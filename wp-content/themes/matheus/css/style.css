@import url(http://fonts.googleapis.com/css?family=Questrial);
/* line 5, scss/compass/reset/_utilities.scss */
html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed,
figure, figcaption, footer, header, hgroup,
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  font: inherit;
  font-size: 100%;
  vertical-align: baseline;
}

/* line 22, scss/compass/reset/_utilities.scss */
html {
  line-height: 1;
}

/* line 24, scss/compass/reset/_utilities.scss */
ol, ul {
  list-style: none;
}

/* line 26, scss/compass/reset/_utilities.scss */
table {
  border-collapse: collapse;
  border-spacing: 0;
}

/* line 28, scss/compass/reset/_utilities.scss */
caption, th, td {
  text-align: left;
  font-weight: normal;
  vertical-align: middle;
}

/* line 30, scss/compass/reset/_utilities.scss */
q, blockquote {
  quotes: none;
}

/* line 103, scss/compass/reset/_utilities.scss */
q:before, q:after, blockquote:before, blockquote:after {
  content: "";
  content: none;
}

/* line 32, scss/compass/reset/_utilities.scss */
a img {
  border: none;
}

/* line 116, scss/compass/reset/_utilities.scss */
elements-of-type(html5-block) {
  display: block;
}

/* line 1, scss/partials/_reset.scss */
.clearfix {
  clear: both;
  display: block;
  float: none;
}

/* line 2, scss/partials/_reset.scss */
a {
  color: inherit;
  text-decoration: none;
  cursor: pointer;
}

/* line 1, scss/partials/_extend.scss */
body,
textarea,
input {
  -webkit-font-smoothing: antialiased !important;
  -moz-osx-font-smoothing: grayscale !important;
  font-smoothing: antialised !important;
  -webkit-text-rendering: geometricPrecision !important;
  -moz-text-rendering: geometricPrecision !important;
  text-rendering: geometricPrecision !important;
}

/* line 11, scss/partials/_extend.scss */
section,
.slides > div,
video, main #about .thumb img,
main #about .thumb svg, main #projects .slides .slider img, .slider .slides > div, .controller li a {
  height: 100vh;
  width: 100vw;
}

/* line 16, scss/partials/_extend.scss */
#popup .content,
#popup .content ul,
#popup > * {
  height: 100%;
  width: 100%;
  overflow: hidden;
}

@keyframes slideenter {
  from {
    top: 20px;
    opacity: 0;
    -webkit-transform: perspective(400px) translate3d(0px, 0px, 0px) scale3d(1, 1, 1) rotate3d(3, 0, 0, 3deg);
    -ms-transform: perspective(400px) translate3d(0px, 0px, 0px) scale3d(1, 1, 1) rotate3d(3, 0, 0, 3deg);
    transform: perspective(400px) translate3d(0px, 0px, 0px) scale3d(1, 1, 1) rotate3d(3, 0, 0, 3deg);
  }
  to {
    top: 0px;
    opacity: 1;
    -webkit-transform: perspective(400px) translate3d(0px, 0px, 0px) scale3d(1, 1, 1) rotate3d(3, 0, 0, 0deg);
    -ms-transform: perspective(400px) translate3d(0px, 0px, 0px) scale3d(1, 1, 1) rotate3d(3, 0, 0, 0deg);
    transform: perspective(400px) translate3d(0px, 0px, 0px) scale3d(1, 1, 1) rotate3d(3, 0, 0, 0deg);
  }
}

@keyframes slideout {
  from {
    top: 0px;
    opacity: 1;
  }
  to {
    top: 20px;
    opacity: 0;
  }
}

@-webkit-keyframes slideenter {
  from {
    top: 20px;
    opacity: 0;
    -webkit-transform: perspective(400px) translate3d(0px, 0px, 0px) scale3d(1, 1, 1) rotate3d(3, 0, 0, 3deg);
    -ms-transform: perspective(400px) translate3d(0px, 0px, 0px) scale3d(1, 1, 1) rotate3d(3, 0, 0, 3deg);
    transform: perspective(400px) translate3d(0px, 0px, 0px) scale3d(1, 1, 1) rotate3d(3, 0, 0, 3deg);
  }
  to {
    top: 0px;
    opacity: 1;
    -webkit-transform: perspective(400px) translate3d(0px, 0px, 0px) scale3d(1, 1, 1) rotate3d(3, 0, 0, 0deg);
    -ms-transform: perspective(400px) translate3d(0px, 0px, 0px) scale3d(1, 1, 1) rotate3d(3, 0, 0, 0deg);
    transform: perspective(400px) translate3d(0px, 0px, 0px) scale3d(1, 1, 1) rotate3d(3, 0, 0, 0deg);
  }
}

@-webkit-keyframes slideout {
  from {
    top: 0px;
    opacity: 1;
  }
  to {
    top: 20px;
    opacity: 0;
  }
}

@keyframes menuenter {
  from {
    left: 20px;
    opacity: 0;
  }
  to {
    left: 0px;
    opacity: 1;
  }
}

@-webkit-keyframes menuenter {
  from {
    left: 20px;
    opacity: 0;
  }
  to {
    left: 0px;
    opacity: 1;
  }
}

/* line 83, scss/partials/_keyframe.scss */
.anim, nav li:before, nav li:after, .expand *, .expand svg circle, main .thumb span, .controller span {
  -webkit-transition-duration: 300ms;
  -webkit-transition-property: all;
  -webkit-animation-timing-function: easein;
  -moz-transition-duration: 300ms;
  -moz-transition-property: all;
  -moz-animation-timing-function: easein;
  -o-transition-duration: 300ms;
  -o-transition-property: all;
  -o-animation-timing-function: easein;
}

@font-face {
  font-family: 'Simplifica';
  src: url("../assets/fonts/simplifica_typeface.eot");
  src: url("../assets/fonts/simplifica_typeface.eot?#iefix") format("embedded-opentype"), url("../assets/fonts/simplifica_typeface.otf") format("opentype"), url("../assets/fonts/simplifica_typeface.woff2") format("woff2"), url("../assets/fonts/simplifica_typeface.woff") format("woff"), url("../assets/fonts/simplifica_typeface.ttf") format("truetype"), url("../assets/fonts/simplifica_typeface.svg#PlacardMT") format("svg");
  font-weight: bold;
  font-style: normal;
}

/* line 9, scss/style.scss */
[data-hidden] {
  display: none !important;
}

/* line 13, scss/style.scss */
::-moz-selection {
  background: #333;
  color: #efefef;
}
::selection {
  background: #333;
  color: #efefef;
}

/* line 18, scss/style.scss */
body::-webkit-scrollbar {
  display: none;
}

/* line 21, scss/style.scss */
body,
html {
  min-height: 100%;
}

/* line 25, scss/style.scss */
body[static] {
  overflow: hidden;
}

/* line 28, scss/style.scss */
body,
textarea,
input {
  font: 16.5px/1.7em "Simplifica", helvetica, arial, sans-serif;
  letter-spacing: 1.5px;
}

/* line 35, scss/style.scss */
svg,
img {
  -webkit-user-select: none;
     -moz-user-select: none;
      -ms-user-select: none;
          user-select: none;
  user-drag: none;
}

/* line 40, scss/style.scss */
.hero, nav span, h1, h2 {
  font: 19px/1.7em "Questrial", helvetica, arial, sans-serif;
  text-transform: uppercase;
  letter-spacing: 3px;
}

/* line 45, scss/style.scss */
.smler {
  font-size: 85%;
}

/* line 48, scss/style.scss */
.fullobj, main .thumb img {
  min-width: 100%;
  width: auto;
  min-height: 100%;
  height: auto;
}

/* line 59, scss/style.scss */
aside {
  position: fixed;
  z-index: 11;
  pointer-events: none;
  overflow: hidden;
}

/* line 64, scss/style.scss */
aside img,
aside svg {
  position: absolute;
}

/* line 68, scss/style.scss */
aside img {
  -webkit-transform: rotate(-7deg);
  -ms-transform: rotate(-7deg);
  transform: rotate(-7deg);
  min-height: 429px;
  z-index: 2;
  height: 53%;
  left: 5.3%;
  top: 21%;
}

/* line 76, scss/style.scss */
aside svg {
  height: 100%;
  width: 100%;
  min-height: 600px;
  min-width: 1000px;
  left: 0;
  top: 0;
  max-width: 1100px;
}

/* line 88, scss/style.scss */
#logo .wrapper > * {
  position: relative;
  top: 20px;
}

/* line 94, scss/style.scss */
#logo.active .wrapper > svg,
#logo.active span {
  -webkit-animation: slideenter 1000ms ease-out forwards;
          animation: slideenter 1000ms ease-out forwards;
}

/* line 98, scss/style.scss */
#logo.active span {
  -webkit-animation-delay: 500ms;
          animation-delay: 500ms;
}

/* line 103, scss/style.scss */
nav {
  position: fixed;
  top: 50%;
  left: 0;
  width: 20%;
  z-index: 12;
  min-width: 150px;
}

/* line 111, scss/style.scss */
nav:hover li a {
  -webkit-animation: slideenter 300ms ease-in forwards;
          animation: slideenter 300ms ease-in forwards;
  top: 20px;
  opacity: 0;
}

/* line 116, scss/style.scss */
nav:hover li:nth-child(2) a {
  -webkit-animation-delay: .05s;
          animation-delay: .05s;
}

/* line 119, scss/style.scss */
nav:hover li:nth-child(3) a {
  -webkit-animation-delay: .1s;
          animation-delay: .1s;
}

/* line 122, scss/style.scss */
nav:hover li:nth-child(4) a {
  -webkit-animation-delay: .15s;
          animation-delay: .15s;
}

/* line 125, scss/style.scss */
nav:hover li.active:after {
  left: -70px;
}

/* line 130, scss/style.scss */
nav.hamburger li.active:after {
  left: -47px;
}

/* line 133, scss/style.scss */
nav.hamburger li.active:before {
  opacity: 1;
  left: 14px;
}

/* line 138, scss/style.scss */
nav span {
  letter-spacing: 1px;
  margin-right: 10px;
}

/* line 143, scss/style.scss */
nav li {
  height: 32px;
  position: relative;
  padding-left: 30px;
}

/* line 147, scss/style.scss */
nav li a {
  position: absolute;
  -webkit-animation: slideout 300ms ease-in forwards;
          animation: slideout 300ms ease-in forwards;
  top: 20px;
  opacity: 0;
}

/* line 154, scss/style.scss */
nav li:after,
nav li:before {
  position: absolute;
}

/* line 158, scss/style.scss */
nav li:before {
  left: 9px;
  z-index: 12;
  opacity: 0;
  width: 20px;
  height: 20px;
  content: url("../assets/images/svg/hamburger.svg");
}

/* line 167, scss/style.scss */
nav li:after {
  -webkit-transform: rotate(1deg);
  -ms-transform: rotate(1deg);
  transform: rotate(1deg);
  -webkit-animation-delay: 0s;
          animation-delay: 0s;
  content: url("../assets/images/activenav.jpg");
  z-index: 11;
  left: -70px;
  top: -29px;
  display: block;
}

/* line 177, scss/style.scss */
nav li.active a {
  -webkit-animation: slideenter 300ms ease-in forwards;
          animation: slideenter 300ms ease-in forwards;
}

/* line 180, scss/style.scss */
nav li.active:after {
  -webkit-transform: rotate(54deg);
  -ms-transform: rotate(54deg);
  transform: rotate(54deg);
  -webkit-animation-delay: 2s;
          animation-delay: 2s;
}

/* line 185, scss/style.scss */
.preload {
  height: 0;
  width: 0;
  overflow: hidden;
}

/* line 190, scss/style.scss */
.wrapper {
  max-width: 370px;
  width: 100%;
}

/* line 194, scss/style.scss */
#notice p,
.wrapper {
  position: absolute;
  top: 50%;
  left: 23vw;
}

/* line 200, scss/style.scss */
.expand {
  position: absolute !important;
  overflow: auto;
  top: 40%;
  left: 105%;
  width: 60% !important;
}

/* line 207, scss/style.scss */
.expand * {
  float: left;
}

/* line 208, scss/style.scss */
.expand svg {
  height: 40px;
}

/* line 214, scss/style.scss */
.expand a:hover svg circle {
  r: 13.5;
}

/* line 215, scss/style.scss */
.expand a:hover span {
  opacity: 1;
  width: auto;
  margin-left: 10px;
}

/* line 222, scss/style.scss */
.expand span {
  margin: 10px 0 0 0px;
  opacity: 0;
}

/* line 230, scss/style.scss */
h1,
h2,
.hero,
nav span,
h1,
h2,
label {
  color: #444;
}

/* line 236, scss/style.scss */
h2 {
  font-size: 16.5px;
  letter-spacing: 2.8px;
  line-height: 1.3em;
}

/* line 242, scss/style.scss */
#popup .controller {
  background: url("../assets/images/svg/slider-control-bottom.svg") no-repeat scroll 100% 100% transparent;
  bottom: 0;
  left: 40%;
  max-height: 29px;
  min-width: 90px;
  right: initial;
  top: initial;
  padding: 9px 0px 0 0;
}

/* line 252, scss/style.scss */
#popup .controller span.scroll {
  font-family: "Simplifica", helvetica, arial, sans-serif;
  text-transform: lowercase;
  margin-left: 5px;
}

/* line 259, scss/style.scss */
.slider .slide,
.slider li {
  position: absolute;
  overflow: hidden;
  width: 100%;
  height: 100%;
  display: none;
}

/* line 266, scss/style.scss */
.slider .slide[data-show], .slider .slide[data-transitioning],
.slider li[data-show],
.slider li[data-transitioning] {
  display: block;
}

/* line 270, scss/style.scss */
.slider .slide[data-show],
.slider li[data-show] {
  z-index: 3;
}

/* line 272, scss/style.scss */
.slider .slide[data-show] img,
.slider li[data-show] img {
  -webkit-animation: slideenter 400ms ease-in;
          animation: slideenter 400ms ease-in;
}

/* line 276, scss/style.scss */
.slider .slide[data-transitioning],
.slider li[data-transitioning] {
  z-index: 2;
}

/* line 279, scss/style.scss */
.slider .slide.portrait,
.slider li.portrait {
  overflow-x: hidden;
  overflow-y: scroll;
}

/* line 283, scss/style.scss */
.slider .slide.portrait img,
.slider li.portrait img {
  width: 100%;
  height: auto;
  -o-object-fit: initial;
     object-fit: initial;
}

/* line 289, scss/style.scss */
.slider .slide img,
.slider li img {
  display: block;
  -o-object-fit: cover;
     object-fit: cover;
  width: 100%;
  height: 100%;
}

/* line 294, scss/style.scss */
.slider .slide img.portrait,
.slider li img.portrait {
  width: 100%;
  height: auto;
  -o-object-fit: initial;
     object-fit: initial;
}

/* line 302, scss/style.scss */
#popup {
  display: none;
  position: fixed;
  z-index: 10;
}

/* line 306, scss/style.scss */
#popup[data-active="true"] {
  display: block;
}

/* line 310, scss/style.scss */
#popup[data-fecthing] .spinner {
  display: block;
  opacity: 1;
}

/* line 315, scss/style.scss */
#popup .spinner {
  position: absolute;
  top: 50%;
  left: 45%;
  display: none;
  opacity: 0;
  height: 50px;
  width: 75px;
  z-index: 2;
  text-align: center;
}

/* line 325, scss/style.scss */
#popup .spinner svg {
  width: 50px;
  height: 50px;
}

/* line 335, scss/style.scss */
#popup .controller {
  padding: 4px 20px 0 20px;
}

/* line 338, scss/style.scss */
#popup .controller [data-control="mute"] {
  display: none;
}

/* line 341, scss/style.scss */
#popup .controller[data-video] [data-control="mute"] {
  display: inline-block;
}

/* line 345, scss/style.scss */
#popup .controller[data-single] i,
#popup .controller[data-single] c,
#popup .controller[data-single] t,
#popup .controller[data-single] divider,
#popup .controller[data-single] [data-control="prev"],
#popup .controller[data-single] [data-control="next"] {
  display: none;
}

/* line 354, scss/style.scss */
#popup .controller > * {
  display: inline-block;
  margin-right: 3px;
}

/* line 358, scss/style.scss */
#popup .controller span {
  margin: 0px 12px;
}

/* line 361, scss/style.scss */
#popup .controller i {
  text-align: right;
  display: inline-block;
}

/* line 365, scss/style.scss */
#popup .controller *:last-child {
  margin-right: 20px;
}

/* line 368, scss/style.scss */
#popup .controller scroll,
#popup .controller mute,
#popup .controller t {
  font-family: "Simplifica", helvetica, arial, sans-serif;
  text-transform: lowercase;
  margin-left: 5px;
}

/* line 379, scss/style.scss */
main #about .thumb {
  width: 180px;
  height: 180px;
  position: absolute;
  top: 0px;
  float: left;
  z-index: 1;
  margin-left: -30px;
}

/* line 387, scss/style.scss */
main #about .thumb img,
main #about .thumb svg {
  top: 0;
  left: 0;
}

/* line 393, scss/style.scss */
main #about .thumb span {
  opacity: 1;
}

/* line 397, scss/style.scss */
main #about .thumb:nth-child(2) {
  z-index: 2;
  left: 165px;
}

/* line 401, scss/style.scss */
main #about .wrapper > p span {
  margin-right: 15px;
}

/* line 405, scss/style.scss */
main #about .slides > div:nth-child(2) .wrapper {
  margin-top: -90px;
}

/* line 407, scss/style.scss */
main #about .slides > div:nth-child(2) .wrapper h1 {
  margin-top: 200px;
}

/* line 414, scss/style.scss */
main #logo svg {
  width: 220px;
  height: auto;
  margin-bottom: 20px;
}

/* line 419, scss/style.scss */
main #logo .wrapper {
  top: 35%;
  left: 37%;
  width: 220px;
  text-align: center;
}

/* line 427, scss/style.scss */
main #blog > * {
  display: block;
  width: 100%;
  height: 100%;
}

/* line 432, scss/style.scss */
main #blog .wrapper.controller {
  min-height: 0;
  padding-left: 0;
}

/* line 437, scss/style.scss */
main #blog .wrapper.controller[data-control] .extend a {
  display: block;
}

/* line 440, scss/style.scss */
main #blog .wrapper.controller[data-control] .expand > a {
  display: none;
}

/* line 446, scss/style.scss */
main #blog .wrapper.controller .extend a:hover span {
  width: auto;
}

/* line 450, scss/style.scss */
main #blog .wrapper.controller .extend span {
  width: 0px;
  overflow: hidden;
}

/* line 454, scss/style.scss */
main #blog .wrapper.controller .extend a {
  display: none;
}

/* line 458, scss/style.scss */
main #blog .wrapper.controller .expand {
  top: 65px;
}

/* line 462, scss/style.scss */
main #blog > .slides > div {
  padding-left: 25%;
  width: 80%;
}

/* line 466, scss/style.scss */
main #blog .post {
  float: left;
  width: 100px;
  height: 280px;
  text-align: center;
  margin: 0 20px 40px 0;
  position: relative;
  top: 45%;
}

/* line 475, scss/style.scss */
main #blog .post:hover h2 {
  white-space: initial;
  height: initial;
}

/* line 480, scss/style.scss */
main #blog .post a {
  font-size: 15px;
}

/* line 483, scss/style.scss */
main #blog .post h2 {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  height: 23px;
}

/* line 488, scss/style.scss */
main #blog .post h2 span {
  font-family: "Simplifica", helvetica, arial, sans-serif;
  letter-spacing: 1.6px;
  margin-left: 10px;
  text-transform: lowercase;
}

/* line 495, scss/style.scss */
main #blog .post .excerpt {
  margin: 0 -15px 0px 20px;
}

/* line 500, scss/style.scss */
main .thumb {
  width: 180px;
  height: 160px;
  overflow: hidden;
  position: relative;
  margin: 0 auto 25px auto;
}

/* line 506, scss/style.scss */
main .thumb:hover span {
  opacity: 1;
  margin: 51% 14px;
}

/* line 510, scss/style.scss */
main .thumb svg {
  z-index: 4;
  width: 145px;
  height: 160px;
}

/* line 515, scss/style.scss */
main .thumb span {
  z-index: 5;
  font-size: 15px;
  display: block;
  position: relative;
  margin: 58% 14px;
  opacity: 0;
  color: white;
  text-align: right;
}

/* line 526, scss/style.scss */
main .thumb svg,
main .thumb img {
  position: absolute;
  left: 0;
  top: 0;
}

/* line 536, scss/style.scss */
main #projects {
  margin-left: 1px;
  height: auto;
}

/* line 543, scss/style.scss */
main #projects .slides section, main #projects
.slides > div, main #projects .slides
video, main #projects .slides #about .thumb img, main #about .thumb #projects .slides img, main #projects .slides #about .thumb svg, main #about .thumb #projects .slides svg, main #projects .slides .slider img, main #projects .slider .slides > div, main #projects .slides .controller li a, .controller li main #projects .slides a {
  position: relative;
}

/* line 549, scss/style.scss */
main #contact .thanks {
  margin-top: 15px;
  display: none;
}

/* line 552, scss/style.scss */
main #contact .thanks h2 {
  font-size: 16.5px;
}

/* line 556, scss/style.scss */
main #contact [data-invalid] {
  -webkit-box-shadow: inset 0 -2px 0px -1px #999;
          box-shadow: inset 0 -2px 0px -1px #999;
}

/* line 560, scss/style.scss */
main #contact [data-sent] .copy {
  display: none;
}

/* line 563, scss/style.scss */
main #contact [data-sent] .thanks {
  display: initial;
}

/* line 567, scss/style.scss */
main #contact .expand {
  top: 20%;
}

/* line 570, scss/style.scss */
main #contact label {
  font-family: "Questrial", helvetica, arial, sans-serif;
  text-transform: uppercase;
  float: left;
  width: 110px;
}

/* line 576, scss/style.scss */
main #contact span {
  margin-right: 25px;
}

/* line 579, scss/style.scss */
main #contact input,
main #contact textarea {
  padding: 0;
  outline: none;
  width: 255px;
  background: none;
  border: none;
}

/* line 587, scss/style.scss */
main #contact textarea {
  height: 130px;
  resize: none;
}

/* line 588, scss/style.scss */
main #contact .wrapper div {
  margin-bottom: 5px;
}

/* line 593, scss/style.scss */
section {
  overflow: hidden;
  position: relative;
}

/* line 596, scss/style.scss */
section .navigate {
  bottom: 20px !important;
  top: initial;
}

/* line 601, scss/style.scss */
aside,
#popup,
section,
#notice {
  width: 90.5vw;
  height: 100vh;
  left: 9.5vw;
  top: 0;
}

/* line 611, scss/style.scss */
.slider.noslide {
  min-height: 100vh;
  height: auto;
}

/* line 614, scss/style.scss */
.slider.noslide .slides {
  position: initial;
}

/* line 616, scss/style.scss */
.slider.noslide .slides > div {
  position: relative;
  display: block;
}

/* line 622, scss/style.scss */
.slider .slides {
  height: 100%;
  width: 100%;
  position: absolute;
  overflow: hidden;
  top: 0;
  left: 0;
}

/* line 629, scss/style.scss */
.slider .slides > div {
  position: absolute;
  display: none;
}

/* line 634, scss/style.scss */
.slider .slides > [data-show] {
  -webkit-animation: slideenter 400ms ease-in;
          animation: slideenter 400ms ease-in;
  display: block;
  z-index: 1;
  overflow: hidden;
}

/* line 640, scss/style.scss */
.slider .slides [data-show][data="scroll"],
.slider .slides div.standby[data="scroll"] {
  overflow-y: scroll;
  overflow-x: hidden;
}

/* line 645, scss/style.scss */
.slider .slides > div.standby {
  z-index: 0;
  display: block;
  overflow: hidden;
}

/* line 653, scss/style.scss */
.slider.active.extended > .controller {
  display: none;
}

/* line 655, scss/style.scss */
.slider.active .controller li a {
  -webkit-animation: menuenter 300ms ease-in forwards;
          animation: menuenter 300ms ease-in forwards;
  -webkit-animation-delay: .3s;
          animation-delay: .3s;
  left: 20px;
  opacity: 0;
}

/* line 661, scss/style.scss */
.slider.active .controller li:nth-child(2) a {
  -webkit-animation-delay: .4s;
          animation-delay: .4s;
}

/* line 664, scss/style.scss */
.slider.active .controller li:nth-child(3) a {
  -webkit-animation-delay: .5s;
          animation-delay: .5s;
}

/* line 667, scss/style.scss */
.slider.active .controller li:nth-child(4) a {
  -webkit-animation-delay: .6s;
          animation-delay: .6s;
}

/* line 672, scss/style.scss */
svg.navigate {
  enable-background: new 0 0 40 40;
}

/* line 674, scss/style.scss */
svg.navigate .round {
  fill: none;
  stroke: #484848;
  stroke-width: 1.8;
  stroke-linecap: round;
  stroke-linejoin: round;
}

/* line 682, scss/style.scss */
.controller {
  position: absolute;
  z-index: 4;
  right: 0;
  top: 50%;
  padding-left: 8px;
  font-family: "Questrial", helvetica, arial, sans-serif;
  text-transform: uppercase;
}

/* line 690, scss/style.scss */
.controller mute,
.controller svg,
.controller span,
.controller li {
  cursor: pointer;
}

/* line 696, scss/style.scss */
.controller span {
  font-size: 0.9em;
}

/* line 700, scss/style.scss */
.controller span.close {
  margin-left: 15px !important;
}

/* line 703, scss/style.scss */
.controller span.next:hover,
.controller span.prev:hover,
.controller span.close:hover {
  bottom: 3px !important;
  top: -3px !important;
  opacity: 1 !important;
  -webkit-animation-fill-mode: initial !important;
          animation-fill-mode: initial !important;
}

/* line 711, scss/style.scss */
.controller ul {
  padding: 20px 7px;
}

/* line 714, scss/style.scss */
.controller li {
  width: 15px;
  height: 22px;
  margin: 5px;
  position: relative;
  background-size: 100%;
}

/* line 720, scss/style.scss */
.controller li a {
  position: absolute;
  display: block;
  background: url("../assets/images/remote.png");
}

/* line 727, scss/style.scss */
.controller li.active {
  width: 23px;
  height: 28px;
  margin: 5px 7px 5px 0px;
}

/* line 729, scss/style.scss */
.controller li.active a {
  background: url("../assets/images/activeremote.png");
}

/* line 735, scss/style.scss */
.plyr .plyr__controls {
  display: none;
}

/* line 738, scss/style.scss */
.plyr .plyr__video-embed {
  height: 100vh;
  padding-bottom: 0;
}

/* line 741, scss/style.scss */
.plyr .plyr__video-embed iframe {
  margin-left: 50%;
  -webkit-transform: translateX(-50%);
      -ms-transform: translateX(-50%);
          transform: translateX(-50%);
}

/* line 747, scss/style.scss */
#notice {
  position: fixed;
  top: 0;
}

@media (max-width: 768px) {
  /* line 752, scss/style.scss */
  .wrapper,
  #notice p {
    width: 50%;
    left: 32%;
  }
  /* line 757, scss/style.scss */
  main #blog .post {
    width: 68px;
  }
}

@media (max-width: 768px) and (orientation: landscape) {
  /* line 762, scss/style.scss */
  nav {
    display: none;
  }
  /* line 765, scss/style.scss */
  main #logo .wrapper {
    top: 20%;
  }
  /* line 768, scss/style.scss */
  .wrapper {
    max-width: 300px;
    top: 40%;
  }
  /* line 772, scss/style.scss */
  aside,
  #popup,
  section,
  #notice {
    width: 105.5vw;
    height: 100vh;
    left: -5.5vw;
    top: 0;
  }
  /* line 781, scss/style.scss */
  #notice p {
    width: 40%;
    left: 45%;
  }
  /* line 785, scss/style.scss */
  .slides > div,
  .slider .slides > div,
  section {
    height: 125vh;
  }
}

@media (orientation: landscape) {
  /* line 792, scss/style.scss */
  #notice {
    display: none;
  }
}

@media (orientation: portrait) {
  /* line 797, scss/style.scss */
  nav {
    display: none;
  }
  /* line 800, scss/style.scss */
  aside,
  #popup,
  section,
  #notice {
    width: 114.5vw;
    height: 100vh;
    left: -14.5vw;
    top: 0;
  }
  /* line 809, scss/style.scss */
  .wrapper,
  #notice p {
    width: 40%;
    left: 45%;
  }
  /* line 814, scss/style.scss */
  body,
  html {
    overflow: hidden;
  }
  /* line 818, scss/style.scss */
  main section {
    opacity: .05;
  }
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInN0eWxlLnNjc3MiLCJzdHlsZS5jc3MiLCJjb21wYXNzL3Jlc2V0L191dGlsaXRpZXMuc2NzcyIsInBhcnRpYWxzL19yZXNldC5zY3NzIiwicGFydGlhbHMvX2V4dGVuZC5zY3NzIiwicGFydGlhbHMvX2tleWZyYW1lLnNjc3MiLCJwYXJ0aWFscy9fZm9udGZhY2Uuc2NzcyIsImNvbXBhc3MvY3NzMy9fc2hhcmVkLnNjc3MiLCJjb21wYXNzL2NzczMvX3RyYW5zZm9ybS5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDhEQUFZO0FDQ1osZ0RBQWdEO0FDRzlDOzs7Ozs7Ozs7Ozs7O0VBNkRBLFVBQVM7RUFDVCxXQUFVO0VBQ1YsVUFBUztFQUlULGNBQWE7RUFDYixnQkFBZTtFQUNmLHlCQUF3QjtDQXZEQTs7QURLMUIsaURBQWlEO0FDRi9DO0VBNkRBLGVBQWM7Q0E1RFU7O0FETTFCLGlEQUFpRDtBQ0wvQztFQStEQSxpQkFBZ0I7Q0E5RGM7O0FEU2hDLGlEQUFpRDtBQ1IvQztFQWlFQSwwQkFBeUI7RUFDekIsa0JBQWlCO0NBakVROztBRGEzQixpREFBaUQ7QUNaL0M7RUFvRUEsaUJBQWdCO0VBQ2hCLG9CQUFtQjtFQUNuQix1QkFBc0I7Q0FyRVE7O0FEa0JoQyxpREFBaUQ7QUNqQi9DO0VBd0VBLGFBQVk7Q0F2RWlCOztBRHFCL0Isa0RBQWtEO0FDdEJoRDtFQTBFRSxZQUFXO0VBQ1gsY0FBYTtDQUFJOztBRC9DckIsaURBQWlEO0FDMUIvQztFQTZFQSxhQUFZO0NBNUUyQjs7QUQ4QnpDLGtEQUFrRDtBQ3FEaEQ7RUFDRSxlQUFjO0NBQUk7O0FEakR0Qix1Q0FBdUM7QUVuRXZDO0VBQVksWUFBVTtFQUFHLGVBQWE7RUFBRyxZQUFVO0NBQUs7O0FGMEV4RCx1Q0FBdUM7QUV6RXZDO0VBQUksZUFBYTtFQUFHLHNCQUFvQjtFQUFHLGdCQUFlO0NBQUs7O0FGZ0YvRCx3Q0FBd0M7QUR0RHhDOzs7RUkxQkUsK0NBQThDO0VBQzlDLDhDQUE2QztF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QUFVO0lBQ1YsVUFBUztHQUNWO0VDbWNELCtCQUErQjtFRGxjL0I7O0lBRUUsaUJBQWdCO0dBQ2pCO0VDb2NELCtCQUErQjtFRG5jL0I7SUFDRSxhQUFZO0dBQ2I7Q0NxY0YiLCJmaWxlIjoic3R5bGUuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiQGltcG9ydCB1cmwoaHR0cDovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9UXVlc3RyaWFsKTtcbkBpbXBvcnQgXCJjb21wYXNzL3Jlc2V0XCI7XG5AaW1wb3J0IFwiY29tcGFzcy9jc3MzXCI7XG5AaW1wb3J0IFwicGFydGlhbHMvcmVzZXRcIjtcbkBpbXBvcnQgXCJwYXJ0aWFscy9leHRlbmRcIjtcbkBpbXBvcnQgXCJwYXJ0aWFscy9rZXlmcmFtZVwiO1xuQGltcG9ydCBcInBhcnRpYWxzL2ZvbnRmYWNlXCI7XG5cbltkYXRhLWhpZGRlbl0ge1xuICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7XG59XG5cbjo6c2VsZWN0aW9uIHtcbiAgYmFja2dyb3VuZDogIzMzMztcbiAgY29sb3I6ICNlZmVmZWY7XG59XG5cbmJvZHk6Oi13ZWJraXQtc2Nyb2xsYmFyIHtcbiAgZGlzcGxheTogbm9uZTtcbn1cbmJvZHksXG5odG1sIHtcbiAgbWluLWhlaWdodDoxMDAlO1xufVxuYm9keVtzdGF0aWNdIHtcbiAgb3ZlcmZsb3c6aGlkZGVuO1xufVxuYm9keSxcbnRleHRhcmVhLFxuaW5wdXQge1xuICBmb250OiAxNi41cHgvMS43ZW0gJGZvbnQtc3RhY2s7XG4gIGxldHRlci1zcGFjaW5nOiAxLjVweDtcbiAgQGV4dGVuZCAlZm9udHNtb290aDtcbn1cbnN2ZyxcbmltZyB7XG4gIHVzZXItc2VsZWN0OiBub25lO1xuICB1c2VyLWRyYWc6IG5vbmU7XG59XG4uaGVybyB7XG4gIGZvbnQ6IDE5cHgvMS43ZW0gJGZvbnQtc3RhY2staGVybztcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgbGV0dGVyLXNwYWNpbmc6IDNweDtcbn1cbi5zbWxlciB7XG4gIGZvbnQtc2l6ZTo4NSU7XG59XG4uZnVsbG9iaiB7XG4gIG1pbi13aWR0aDogMTAwJTtcbiAgd2lkdGg6IGF1dG87XG4gIG1pbi1oZWlnaHQ6IDEwMCU7XG4gIGhlaWdodDogYXV0bztcbn1cbnNlY3Rpb24sXG4uc2xpZGVzID4gZGl2LFxudmlkZW8ge1xuICBAZXh0ZW5kICVmdWxsc2NyZWVuO1xufVxuYXNpZGUge1xuICBwb3NpdGlvbjogZml4ZWQ7XG4gIHotaW5kZXg6IDExO1xuICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgaW1nLFxuICBzdmcge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgfVxuICBpbWcge1xuICAgIEBpbmNsdWRlIHJvdGF0ZSgtN2RlZyk7XG4gICAgbWluLWhlaWdodDogNDI5cHg7XG4gICAgei1pbmRleDogMjtcbiAgICBoZWlnaHQ6IDUzJTtcbiAgICBsZWZ0OiA1LjMlO1xuICAgIHRvcDogMjElO1xuICB9XG4gIHN2ZyB7XG4gICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIG1pbi1oZWlnaHQ6IDYwMHB4O1xuICAgICAgbWluLXdpZHRoOiAxMDAwcHg7XG4gICAgICBsZWZ0OiAwO1xuICAgICAgdG9wOiAwO1xuICAgICAgbWF4LXdpZHRoOiAxMTAwcHg7XG4gIH1cbn1cbiNsb2dvIHtcbiAgLndyYXBwZXIge1xuICAgID4gKiB7XG4gICAgICBwb3NpdGlvbjpyZWxhdGl2ZTtcbiAgICAgIHRvcDoyMHB4O1xuICAgIH1cbiAgfVxuICAmLmFjdGl2ZSB7XG4gICAgLndyYXBwZXIgPiBzdmcsXG4gICAgc3BhbiB7XG4gICAgICBhbmltYXRpb246IHNsaWRlZW50ZXIgMTAwMG1zIGVhc2Utb3V0IGZvcndhcmRzO1xuICAgIH1cbiAgICBzcGFuIHtcbiAgICAgIGFuaW1hdGlvbi1kZWxheTogNTAwbXNcbiAgICB9XG4gIH1cbn1cbm5hdiB7XG4gIHBvc2l0aW9uOiBmaXhlZDtcbiAgdG9wOiA1MCU7XG4gIGxlZnQ6IDA7XG4gIHdpZHRoOiAyMCU7XG4gIHotaW5kZXg6IDEyO1xuICBtaW4td2lkdGg6IDE1MHB4O1xuICAmOmhvdmVyIHtcbiAgICBsaSBhIHtcbiAgICAgIGFuaW1hdGlvbjogc2xpZGVlbnRlciAzMDBtcyBlYXNlLWluIGZvcndhcmRzO1xuICAgICAgdG9wOjIwcHg7XG4gICAgICBvcGFjaXR5OjA7XG4gICAgfVxuICAgIGxpOm50aC1jaGlsZCgyKSBhIHtcbiAgICAgIGFuaW1hdGlvbi1kZWxheTogLjA1cztcbiAgICB9XG4gICAgbGk6bnRoLWNoaWxkKDMpIGEge1xuICAgICAgYW5pbWF0aW9uLWRlbGF5OiAuMXM7XG4gICAgfVxuICAgIGxpOm50aC1jaGlsZCg0KSBhIHtcbiAgICAgIGFuaW1hdGlvbi1kZWxheTogLjE1cztcbiAgICB9XG4gICAgbGkuYWN0aXZlOmFmdGVyIHtcbiAgICAgIGxlZnQ6IC03MHB4O1xuICAgIH1cbiAgfVxuICAmLmhhbWJ1cmdlciB7XG4gICAgbGkuYWN0aXZlOmFmdGVyIHtcbiAgICAgIGxlZnQ6IC00N3B4O1xuICAgIH1cbiAgICBsaS5hY3RpdmU6YmVmb3JlIHtcbiAgICAgIG9wYWNpdHk6MTtcbiAgICAgIGxlZnQ6IDE0cHg7IFxuICAgIH1cbiAgfVxuICBzcGFuIHtcbiAgICBAZXh0ZW5kIC5oZXJvO1xuICAgIGxldHRlci1zcGFjaW5nOjFweDtcbiAgICBtYXJnaW4tcmlnaHQ6MTBweDtcbiAgfVxuICBsaSB7XG4gICAgaGVpZ2h0OiAzMnB4O1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBwYWRkaW5nLWxlZnQ6IDMwcHg7XG4gICAgYSB7XG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICBhbmltYXRpb246IHNsaWRlb3V0IDMwMG1zIGVhc2UtaW4gZm9yd2FyZHM7XG4gICAgICB0b3A6MjBweDtcbiAgICAgIG9wYWNpdHk6MDtcbiAgICB9XG4gIH1cbiAgbGk6YWZ0ZXIsXG4gIGxpOmJlZm9yZSB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICB9XG4gIGxpOmJlZm9yZSB7XG4gICAgQGV4dGVuZCAuYW5pbTtcbiAgICBsZWZ0OiA5cHg7XG4gICAgei1pbmRleDoxMjtcbiAgICBvcGFjaXR5OjA7XG4gICAgd2lkdGg6MjBweDtcbiAgICBoZWlnaHQ6MjBweDtcbiAgICBjb250ZW50OnVybCgnLi4vYXNzZXRzL2ltYWdlcy9zdmcvaGFtYnVyZ2VyLnN2ZycpO1xuICB9XG4gIGxpOmFmdGVyIHtcbiAgICBAaW5jbHVkZSByb3RhdGUoMWRlZyk7XG4gICAgQGV4dGVuZCAuYW5pbTtcbiAgICBhbmltYXRpb24tZGVsYXk6IDBzO1xuICAgIGNvbnRlbnQ6IHVybCgnLi4vYXNzZXRzL2ltYWdlcy9hY3RpdmVuYXYuanBnJyk7XG4gICAgei1pbmRleDogMTE7XG4gICAgbGVmdDogLTcwcHg7XG4gICAgdG9wOiAtMjlweDtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgfVxuICBsaS5hY3RpdmUgYSB7XG4gICAgYW5pbWF0aW9uOiBzbGlkZWVudGVyIDMwMG1zIGVhc2UtaW4gZm9yd2FyZHM7XG4gIH1cbiAgbGkuYWN0aXZlOmFmdGVyIHtcbiAgICBAaW5jbHVkZSByb3RhdGUoNTRkZWcpO1xuICAgIGFuaW1hdGlvbi1kZWxheTogMnM7XG4gIH1cbn1cbi5wcmVsb2FkIHtcbiAgaGVpZ2h0OiAwO1xuICB3aWR0aDogMDtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbn1cbi53cmFwcGVyIHtcbiAgbWF4LXdpZHRoOiAzNzBweDtcbiAgd2lkdGg6IDEwMCU7XG59XG4jbm90aWNlIHAsXG4ud3JhcHBlciB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiA1MCU7XG4gIGxlZnQ6IDIzdnc7XG59XG4uZXhwYW5kIHtcbiAgcG9zaXRpb246IGFic29sdXRlICFpbXBvcnRhbnQ7XG4gIG92ZXJmbG93OmF1dG87XG4gIHRvcDogNDAlO1xuICBsZWZ0OjEwNSU7XG4gIHdpZHRoOiA2MCUgIWltcG9ydGFudDtcblxuICAqIHsgZmxvYXQ6bGVmdDsgQGV4dGVuZCAuYW5pbTsgfVxuICBzdmcge1xuICAgIGhlaWdodDo0MHB4O1xuICAgIGNpcmNsZSB7IEBleHRlbmQgLmFuaW07IH1cbiAgfVxuICBhIHtcbiAgICAmOmhvdmVyIHtcbiAgICAgIHN2ZyBjaXJjbGUgeyByOiAxMy41OyB9XG4gICAgICBzcGFuIHtcbiAgICAgICAgb3BhY2l0eToxO1xuICAgICAgICB3aWR0aDogYXV0bztcbiAgICAgICAgbWFyZ2luLWxlZnQ6IDEwcHg7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHNwYW4ge1xuICAgIG1hcmdpbjogMTBweCAwIDAgMHB4O1xuICAgIG9wYWNpdHk6IDA7XG4gIH1cbn1cbmgxIHtcbiAgQGV4dGVuZCAuaGVybztcbn1cbmgxLFxuaDIsXG4uaGVybyxcbmxhYmVsIHtcbiAgY29sb3I6IzQ0NDtcbn1cbmgyIHtcbiAgQGV4dGVuZCAuaGVybztcbiAgZm9udC1zaXplOiAxNi41cHg7XG4gIGxldHRlci1zcGFjaW5nOiAyLjhweDtcbiAgbGluZS1oZWlnaHQ6IDEuM2VtO1xufVxuJWNvbnRyb2xsZXJib3R0b20ge1xuICBiYWNrZ3JvdW5kOiB1cmwoJy4uL2Fzc2V0cy9pbWFnZXMvc3ZnL3NsaWRlci1jb250cm9sLWJvdHRvbS5zdmcnKSBuby1yZXBlYXQgc2Nyb2xsIDEwMCUgMTAwJSB0cmFuc3BhcmVudDtcbiAgYm90dG9tOiAwOyBcbiAgbGVmdDogNDAlO1xuICBtYXgtaGVpZ2h0OiAyOXB4O1xuICBtaW4td2lkdGg6IDkwcHg7XG4gIHJpZ2h0OiBpbml0aWFsO1xuICB0b3A6IGluaXRpYWw7XG4gIHBhZGRpbmc6IDlweCAwcHggMCAwO1xuICBcbiAgc3Bhbi5zY3JvbGwge1xuICAgIGZvbnQtZmFtaWx5OiAkZm9udC1zdGFjaztcbiAgICB0ZXh0LXRyYW5zZm9ybTpsb3dlcmNhc2U7XG4gICAgbWFyZ2luLWxlZnQ6IDVweDtcbiAgfVxufVxuLnNsaWRlciB7XG4gIC5zbGlkZSxcbiAgbGkge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogMTAwJTtcbiAgICBkaXNwbGF5OiBub25lO1xuICAgICZbZGF0YS1zaG93XSxcbiAgICAmW2RhdGEtdHJhbnNpdGlvbmluZ10ge1xuICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgfVxuICAgICZbZGF0YS1zaG93XSB7XG4gICAgICB6LWluZGV4OiAzO1xuICAgICAgaW1nIHtcbiAgICAgICAgYW5pbWF0aW9uOiBzbGlkZWVudGVyIDQwMG1zIGVhc2UtaW47XG4gICAgICB9XG4gICAgfVxuICAgICZbZGF0YS10cmFuc2l0aW9uaW5nXSB7XG4gICAgICB6LWluZGV4OiAyO1xuICAgIH1cbiAgICAmLnBvcnRyYWl0IHtcbiAgICAgIG92ZXJmbG93LXg6IGhpZGRlbjtcbiAgICAgIG92ZXJmbG93LXk6IHNjcm9sbDtcblxuICAgICAgaW1nIHtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIGhlaWdodDogYXV0bztcbiAgICAgICAgb2JqZWN0LWZpdDogaW5pdGlhbDtcbiAgICAgIH1cbiAgICB9XG4gICAgaW1nIHtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgb2JqZWN0LWZpdDogY292ZXI7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICYucG9ydHJhaXQge1xuICAgICAgICB3aWR0aDogMTAwJTtcbiAgICAgICAgaGVpZ2h0OiBhdXRvO1xuICAgICAgICBvYmplY3QtZml0OiBpbml0aWFsO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuI3BvcHVwIHtcbiAgZGlzcGxheTogbm9uZTtcbiAgcG9zaXRpb246IGZpeGVkO1xuICB6LWluZGV4OiAxMDtcbiAgJltkYXRhLWFjdGl2ZT1cInRydWVcIl0ge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICB9XG4gICZbZGF0YS1mZWN0aGluZ10ge1xuICAgIC5zcGlubmVyIHtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgb3BhY2l0eTogMTtcbiAgICB9XG4gIH1cbiAgLnNwaW5uZXIge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDUwJTtcbiAgICBsZWZ0OiA0NSU7XG4gICAgZGlzcGxheTogbm9uZTtcbiAgICBvcGFjaXR5OiAwO1xuICAgIGhlaWdodDogNTBweDtcbiAgICB3aWR0aDogNzVweDtcbiAgICB6LWluZGV4OiAyO1xuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICBzdmcge1xuICAgICAgd2lkdGg6IDUwcHg7XG4gICAgICBoZWlnaHQ6IDUwcHg7XG4gICAgfVxuICB9XG4gIC5jb250ZW50LFxuICAuY29udGVudCB1bCxcbiAgPiAqIHtcbiAgICBAZXh0ZW5kICVyZWFsZXN0YXRlO1xuICB9XG4gIC5jb250cm9sbGVyIHtcbiAgICBAZXh0ZW5kICVjb250cm9sbGVyYm90dG9tO1xuICAgIHBhZGRpbmc6IDRweCAyMHB4IDAgMjBweDtcbiAgICBbZGF0YS1jb250cm9sPVwibXV0ZVwiXSB7XG4gICAgICBkaXNwbGF5OiBub25lO1xuICAgIH1cbiAgICAmW2RhdGEtdmlkZW9dIFtkYXRhLWNvbnRyb2w9XCJtdXRlXCJdIHtcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICB9XG4gICAgJltkYXRhLXNpbmdsZV0ge1xuICAgICAgaSxcbiAgICAgIGMsXG4gICAgICB0LFxuICAgICAgZGl2aWRlcixcbiAgICAgIFtkYXRhLWNvbnRyb2w9XCJwcmV2XCJdLFxuICAgICAgW2RhdGEtY29udHJvbD1cIm5leHRcIl0ge1xuICAgICAgICBkaXNwbGF5OiBub25lO1xuICAgICAgfVxuICAgIH1cbiAgICA+ICoge1xuICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgICAgbWFyZ2luLXJpZ2h0OiAzcHg7XG4gICAgfVxuICAgIHNwYW4ge1xuICAgICAgbWFyZ2luOiAwcHggMTJweDtcbiAgICB9XG4gICAgaSB7XG4gICAgICB0ZXh0LWFsaWduOiByaWdodDtcbiAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICB9XG4gICAgKjpsYXN0LWNoaWxkIHtcbiAgICAgIG1hcmdpbi1yaWdodDogMjBweDtcbiAgICB9XG4gICAgc2Nyb2xsLFxuICAgIG11dGUsXG4gICAgdCB7XG4gICAgICBmb250LWZhbWlseTogJGZvbnQtc3RhY2s7XG4gICAgICB0ZXh0LXRyYW5zZm9ybTogbG93ZXJjYXNlO1xuICAgICAgbWFyZ2luLWxlZnQ6IDVweDtcbiAgICB9XG4gIH1cbn1cbm1haW4ge1xuICAjYWJvdXQge1xuICAgIC50aHVtYiB7XG4gICAgICB3aWR0aDogMTgwcHg7XG4gICAgICBoZWlnaHQ6IDE4MHB4O1xuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgdG9wOiAwcHg7XG4gICAgICBmbG9hdDogbGVmdDtcbiAgICAgIHotaW5kZXg6IDE7XG4gICAgICBtYXJnaW4tbGVmdDogLTMwcHg7XG4gICAgICBpbWcsXG4gICAgICBzdmcge1xuICAgICAgICBAZXh0ZW5kICVmdWxsc2NyZWVuO1xuICAgICAgICB0b3A6IDA7XG4gICAgICAgIGxlZnQ6IDA7XG4gICAgICB9XG4gICAgICBzcGFuIHtcbiAgICAgICAgb3BhY2l0eTogMTtcbiAgICAgIH1cbiAgICB9XG4gICAgLnRodW1iOm50aC1jaGlsZCgyKSB7XG4gICAgICB6LWluZGV4OjI7XG4gICAgICBsZWZ0OiAxNjVweDtcbiAgICB9XG4gICAgLndyYXBwZXIgPiBwIHNwYW4ge1xuICAgICAgbWFyZ2luLXJpZ2h0OiAxNXB4O1xuICAgIH1cbiAgICAuc2xpZGVzID4gZGl2Om50aC1jaGlsZCgyKSB7XG4gICAgICAud3JhcHBlciB7XG4gICAgICAgIG1hcmdpbi10b3A6IC05MHB4O1xuICAgICAgICBoMSB7XG4gICAgICAgICAgbWFyZ2luLXRvcDogMjAwcHg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgI2xvZ28ge1xuICAgIHN2ZyB7XG4gICAgICB3aWR0aDoyMjBweDtcbiAgICAgIGhlaWdodDphdXRvO1xuICAgICAgbWFyZ2luLWJvdHRvbToyMHB4O1xuICAgIH1cbiAgICAud3JhcHBlciB7XG4gICAgICB0b3A6IDM1JTtcbiAgICAgIGxlZnQ6IDM3JTtcbiAgICAgIHdpZHRoOiAyMjBweDtcbiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICB9XG4gIH1cbiAgI2Jsb2cge1xuICAgID4gKiB7XG4gICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgIHdpZHRoOiAxMDAlO1xuICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgIH1cbiAgICAud3JhcHBlci5jb250cm9sbGVyIHtcbiAgICAgIG1pbi1oZWlnaHQ6IDA7XG4gICAgICBwYWRkaW5nLWxlZnQ6IDA7XG5cbiAgICAgICZbZGF0YS1jb250cm9sXSB7XG4gICAgICAgIC5leHRlbmQgYSB7XG4gICAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgIH1cbiAgICAgICAgLmV4cGFuZCA+IGEge1xuICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC5leHRlbmQge1xuICAgICAgICBhOmhvdmVyIHtcbiAgICAgICAgICBzcGFuIHtcbiAgICAgICAgICAgIHdpZHRoOiBhdXRvO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzcGFuIHtcbiAgICAgICAgICB3aWR0aDogMHB4O1xuICAgICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICAgIH1cbiAgICAgICAgYSB7XG4gICAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLmV4cGFuZCB7XG4gICAgICAgIHRvcDogNjVweDtcbiAgICAgIH1cbiAgICB9XG4gICAgPiAuc2xpZGVzID4gZGl2IHtcbiAgICAgIHBhZGRpbmctbGVmdDogMjUlO1xuICAgICAgd2lkdGg6IDgwJTtcbiAgICB9XG4gICAgLnBvc3Qge1xuICAgICAgZmxvYXQ6IGxlZnQ7IFxuICAgICAgd2lkdGg6IDEwMHB4O1xuICAgICAgaGVpZ2h0OjI4MHB4O1xuICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xuICAgICAgbWFyZ2luOiAwIDIwcHggNDBweCAwO1xuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgdG9wOiA0NSU7XG4gICAgICAmOmhvdmVyIHtcbiAgICAgICAgaDIge1xuICAgICAgICAgIHdoaXRlLXNwYWNlOiBpbml0aWFsO1xuICAgICAgICAgIGhlaWdodDogaW5pdGlhbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYSB7XG4gICAgICAgIGZvbnQtc2l6ZTogMTVweDtcbiAgICAgIH1cbiAgICAgIGgyIHtcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgICAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG4gICAgICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gICAgICAgIGhlaWdodDogMjNweDtcbiAgICAgICAgc3BhbiB7XG4gICAgICAgICAgZm9udC1mYW1pbHk6ICRmb250LXN0YWNrO1xuICAgICAgICAgIGxldHRlci1zcGFjaW5nOiAxLjZweDtcbiAgICAgICAgICBtYXJnaW4tbGVmdDoxMHB4O1xuICAgICAgICAgIHRleHQtdHJhbnNmb3JtOiBsb3dlcmNhc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC5leGNlcnB0IHtcbiAgICAgICAgbWFyZ2luOiAwIC0xNXB4IDBweCAyMHB4O1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAudGh1bWIge1xuICAgIHdpZHRoOiAxODBweDtcbiAgICBoZWlnaHQ6IDE2MHB4O1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIG1hcmdpbjogMCBhdXRvIDI1cHggYXV0bztcbiAgICAmOmhvdmVyIHNwYW4ge1xuICAgICAgb3BhY2l0eToxO1xuICAgICAgbWFyZ2luOiA1MSUgMTRweDtcbiAgICB9XG4gICAgc3ZnIHtcbiAgICAgIHotaW5kZXg6IDQ7XG4gICAgICB3aWR0aDogMTQ1cHg7XG4gICAgICBoZWlnaHQ6IDE2MHB4O1xuICAgIH1cbiAgICBzcGFuIHtcbiAgICAgIEBleHRlbmQgLmFuaW07XG4gICAgICB6LWluZGV4OiA1O1xuICAgICAgZm9udC1zaXplOjE1cHg7XG4gICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgIG1hcmdpbjogNTglIDE0cHg7IFxuICAgICAgb3BhY2l0eTogMDtcbiAgICAgIGNvbG9yOiB3aGl0ZTtcbiAgICAgIHRleHQtYWxpZ246IHJpZ2h0O1xuICAgIH1cbiAgICBzdmcsXG4gICAgaW1nIHtcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgIGxlZnQ6IDA7XG4gICAgICB0b3A6IDA7XG4gICAgfVxuICAgIGltZyB7XG4gICAgICBAZXh0ZW5kIC5mdWxsb2JqO1xuICAgIH1cbiAgfSBcbiAgI3Byb2plY3RzIHtcbiAgICBtYXJnaW4tbGVmdDogMXB4O1xuICAgIGhlaWdodDogYXV0bztcbiAgICAuc2xpZGVzIHtcbiAgICAgIC5zbGlkZXIge1xuICAgICAgICBpbWcgeyBAZXh0ZW5kICVmdWxsc2NyZWVuOyB9XG4gICAgICB9XG4gICAgICAlZnVsbHNjcmVlbiB7XG4gICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgI2NvbnRhY3Qge1xuICAgIC50aGFua3Mge1xuICAgICAgbWFyZ2luLXRvcDogMTVweDtcbiAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgICBoMiB7XG4gICAgICAgIGZvbnQtc2l6ZTogMTYuNXB4O1xuICAgICAgfVxuICAgIH1cbiAgICBbZGF0YS1pbnZhbGlkXSB7XG4gICAgICBib3gtc2hhZG93OiBpbnNldCAwIC0ycHggMHB4IC0xcHggIzk5OTtcbiAgICB9XG4gICAgW2RhdGEtc2VudF0ge1xuICAgICAgLmNvcHkge1xuICAgICAgICBkaXNwbGF5OiBub25lO1xuICAgICAgfVxuICAgICAgLnRoYW5rcyB7XG4gICAgICAgIGRpc3BsYXk6IGluaXRpYWw7XG4gICAgICB9XG4gICAgfVxuICAgIC5leHBhbmQge1xuICAgICAgdG9wOiAyMCU7XG4gICAgfVxuICAgIGxhYmVsIHsgXG4gICAgICBmb250LWZhbWlseTogJGZvbnQtc3RhY2staGVybztcbiAgICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gICAgICBmbG9hdDogbGVmdDtcbiAgICAgIHdpZHRoOiAxMTBweDtcbiAgICB9XG4gICAgc3BhbiB7XG4gICAgICBtYXJnaW4tcmlnaHQ6MjVweDtcbiAgICB9XG4gICAgaW5wdXQsXG4gICAgdGV4dGFyZWEge1xuICAgICAgcGFkZGluZzogMDtcbiAgICAgIG91dGxpbmU6bm9uZTtcbiAgICAgIHdpZHRoOiAyNTVweDtcbiAgICAgIGJhY2tncm91bmQ6IG5vbmU7XG4gICAgICBib3JkZXI6IG5vbmU7IFxuICAgIH1cbiAgICB0ZXh0YXJlYSB7IGhlaWdodDoxMzBweDsgcmVzaXplOiBub25lOyB9XG4gICAgLndyYXBwZXIgZGl2IHtcbiAgICAgIG1hcmdpbi1ib3R0b206IDVweDtcbiAgICB9XG4gIH1cbn1cbnNlY3Rpb24ge1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIC5uYXZpZ2F0ZSB7IFxuICAgIGJvdHRvbTogMjBweCAhaW1wb3J0YW50O1xuICAgIHRvcDogaW5pdGlhbDtcbiAgfVxufVxuYXNpZGUsXG4jcG9wdXAsXG5zZWN0aW9uLFxuI25vdGljZSB7XG4gIHdpZHRoOiA5MC41dnc7XG4gIGhlaWdodDogMTAwdmg7XG4gIGxlZnQ6IDkuNXZ3O1xuICB0b3A6IDA7XG59XG4uc2xpZGVyIHtcbiAgJi5ub3NsaWRlIHtcbiAgICBtaW4taGVpZ2h0OiAxMDB2aDtcbiAgICBoZWlnaHQ6IGF1dG87XG4gICAgLnNsaWRlcyB7XG4gICAgICBwb3NpdGlvbjogaW5pdGlhbDtcbiAgICAgID4gZGl2IHtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLnNsaWRlcyB7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgIHRvcDogMDtcbiAgICBsZWZ0OiAwO1xuICAgID4gZGl2IHtcbiAgICAgIEBleHRlbmQgJWZ1bGxzY3JlZW47XG4gICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICBkaXNwbGF5OiBub25lO1xuICAgIH1cbiAgICA+IFtkYXRhLXNob3ddIHsgXG4gICAgICBhbmltYXRpb246IHNsaWRlZW50ZXIgNDAwbXMgZWFzZS1pbjtcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgei1pbmRleDogMTtcbiAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgfVxuICAgIFtkYXRhLXNob3ddW2RhdGE9XCJzY3JvbGxcIl0sXG4gICAgZGl2LnN0YW5kYnlbZGF0YT1cInNjcm9sbFwiXXtcbiAgICAgIG92ZXJmbG93LXk6IHNjcm9sbDtcbiAgICAgIG92ZXJmbG93LXg6IGhpZGRlbjtcbiAgICB9XG4gICAgPiBkaXYuc3RhbmRieSB7IFxuICAgICAgei1pbmRleDowO1xuICAgICAgZGlzcGxheTpibG9jaztcbiAgICAgIG92ZXJmbG93OmhpZGRlbjtcbiAgICB9XG4gIH1cbiAgJi5hY3RpdmUge1xuICAgICYuZXh0ZW5kZWQge1xuICAgICAgPiAuY29udHJvbGxlciB7IGRpc3BsYXk6bm9uZTsgfVxuICAgIH1cbiAgICAuY29udHJvbGxlciBsaSBhIHtcbiAgICAgIGFuaW1hdGlvbjogbWVudWVudGVyIDMwMG1zIGVhc2UtaW4gZm9yd2FyZHM7XG4gICAgICBhbmltYXRpb24tZGVsYXk6IC4zcztcbiAgICAgIGxlZnQ6MjBweDtcbiAgICAgIG9wYWNpdHk6MDtcbiAgICB9XG4gICAgLmNvbnRyb2xsZXIgbGk6bnRoLWNoaWxkKDIpIGEge1xuICAgICAgYW5pbWF0aW9uLWRlbGF5OiAuNHM7XG4gICAgfVxuICAgIC5jb250cm9sbGVyIGxpOm50aC1jaGlsZCgzKSBhIHtcbiAgICAgIGFuaW1hdGlvbi1kZWxheTogLjVzO1xuICAgIH1cbiAgICAuY29udHJvbGxlciBsaTpudGgtY2hpbGQoNCkgYSB7XG4gICAgICBhbmltYXRpb24tZGVsYXk6IC42cztcbiAgICB9XG4gIH1cbn1cbnN2Zy5uYXZpZ2F0ZSB7XG4gIGVuYWJsZS1iYWNrZ3JvdW5kOiBuZXcgMCAwIDQwIDQwO1xuICAucm91bmQge1xuICAgIGZpbGw6IG5vbmU7XG4gICAgc3Ryb2tlOiAjNDg0ODQ4O1xuICAgIHN0cm9rZS13aWR0aDogMS44O1xuICAgIHN0cm9rZS1saW5lY2FwOiByb3VuZDtcbiAgICBzdHJva2UtbGluZWpvaW46IHJvdW5kO1xuICB9XG59XG4uY29udHJvbGxlciB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgei1pbmRleDogNDtcbiAgcmlnaHQ6IDA7IFxuICB0b3A6IDUwJTtcbiAgcGFkZGluZy1sZWZ0OiA4cHg7XG4gIGZvbnQtZmFtaWx5OiAkZm9udC1zdGFjay1oZXJvO1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICBtdXRlLFxuICBzdmcsXG4gIHNwYW4sXG4gIGxpIHsgXG4gICAgY3Vyc29yOnBvaW50ZXI7XG4gIH1cbiAgc3BhbiB7XG4gICAgQGV4dGVuZCAuYW5pbTtcbiAgICBmb250LXNpemU6IDAuOWVtO1xuICB9XG4gIHNwYW4uY2xvc2Uge1xuICAgIG1hcmdpbi1sZWZ0OjE1cHggIWltcG9ydGFudDtcbiAgfVxuICBzcGFuLm5leHQ6aG92ZXIsXG4gIHNwYW4ucHJldjpob3ZlcixcbiAgc3Bhbi5jbG9zZTpob3ZlciB7XG4gICAgYm90dG9tOiAzcHggIWltcG9ydGFudDtcbiAgICB0b3A6IC0zcHggIWltcG9ydGFudDtcbiAgICBvcGFjaXR5OiAxICFpbXBvcnRhbnQ7XG4gICAgYW5pbWF0aW9uLWZpbGwtbW9kZTogaW5pdGlhbCAhaW1wb3J0YW50O1xuICB9XG4gIHVsIHtcbiAgICBwYWRkaW5nOjIwcHggN3B4O1xuICB9XG4gIGxpIHtcbiAgICB3aWR0aDogMTVweDtcbiAgICBoZWlnaHQ6IDIycHg7XG4gICAgbWFyZ2luOiA1cHg7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIGJhY2tncm91bmQtc2l6ZTogMTAwJTtcbiAgICBhIHtcbiAgICAgIHBvc2l0aW9uOmFic29sdXRlO1xuICAgICAgQGV4dGVuZCAlZnVsbHNjcmVlbjtcbiAgICAgIGRpc3BsYXk6YmxvY2s7XG4gICAgICBiYWNrZ3JvdW5kOnVybCgnLi4vYXNzZXRzL2ltYWdlcy9yZW1vdGUucG5nJyk7XG4gICAgfVxuICB9XG4gIGxpLmFjdGl2ZSB7XG4gICAgd2lkdGg6MjNweDsgaGVpZ2h0OjI4cHg7IG1hcmdpbjo1cHggN3B4IDVweCAwcHg7XG4gICAgYSB7XG4gICAgICBiYWNrZ3JvdW5kOnVybCgnLi4vYXNzZXRzL2ltYWdlcy9hY3RpdmVyZW1vdGUucG5nJyk7XG4gICAgfVxuICB9XG59XG4ucGx5ciB7XG4gIC5wbHlyX19jb250cm9scyB7XG4gICAgZGlzcGxheTogbm9uZTtcbiAgfVxuICAucGx5cl9fdmlkZW8tZW1iZWQge1xuICAgIGhlaWdodDogMTAwdmg7XG4gICAgcGFkZGluZy1ib3R0b206IDA7XG4gICAgaWZyYW1lIHtcbiAgICAgIG1hcmdpbi1sZWZ0OiA1MCU7XG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSk7XG4gICAgfVxuICB9XG59XG4jbm90aWNlIHtcbiAgcG9zaXRpb246IGZpeGVkO1xuICB0b3A6IDA7XG59XG5AbWVkaWEgKG1heC13aWR0aDogNzY4cHgpIHtcbiAgLndyYXBwZXIsXG4gICNub3RpY2UgcCB7XG4gICAgd2lkdGg6IDUwJTtcbiAgICBsZWZ0OiAzMiU7XG4gIH1cbiAgbWFpbiAjYmxvZyAucG9zdCB7XG4gICAgd2lkdGg6IDY4cHg7XG4gIH1cbn1cbkBtZWRpYSAobWF4LXdpZHRoOiA3NjhweCkgYW5kIChvcmllbnRhdGlvbjogbGFuZHNjYXBlKSB7XG4gIG5hdiB7XG4gICAgZGlzcGxheTogbm9uZTtcbiAgfVxuICBtYWluICNsb2dvIC53cmFwcGVyIHtcbiAgICB0b3A6IDIwJTtcbiAgfVxuICAud3JhcHBlciB7XG4gICAgbWF4LXdpZHRoOiAzMDBweDtcbiAgICB0b3A6IDQwJTtcbiAgfVxuICBhc2lkZSxcbiAgI3BvcHVwLFxuICBzZWN0aW9uLFxuICAjbm90aWNlIHtcbiAgICB3aWR0aDogMTA1LjV2dztcbiAgICBoZWlnaHQ6IDEwMHZoO1xuICAgIGxlZnQ6IC01LjV2dztcbiAgICB0b3A6IDA7XG4gIH1cbiAgI25vdGljZSBwIHtcbiAgICB3aWR0aDogNDAlO1xuICAgIGxlZnQ6IDQ1JTtcbiAgfVxuICAuc2xpZGVzID4gZGl2LFxuICAuc2xpZGVyIC5zbGlkZXMgPiBkaXYsXG4gIHNlY3Rpb24ge1xuICAgIGhlaWdodDogMTI1dmg7XG4gIH1cbn1cbkBtZWRpYSAob3JpZW50YXRpb246IGxhbmRzY2FwZSkge1xuICAjbm90aWNlIHtcbiAgICBkaXNwbGF5OiBub25lO1xuICB9XG59XG5AbWVkaWEgKG9yaWVudGF0aW9uOiBwb3J0cmFpdCkge1xuICBuYXYge1xuICAgIGRpc3BsYXk6IG5vbmU7XG4gIH1cbiAgYXNpZGUsXG4gICNwb3B1cCxcbiAgc2VjdGlvbixcbiAgI25vdGljZSB7XG4gICAgd2lkdGg6IDExNC41dnc7XG4gICAgaGVpZ2h0OiAxMDB2aDtcbiAgICBsZWZ0OiAtMTQuNXZ3O1xuICAgIHRvcDogMDtcbiAgfVxuICAud3JhcHBlcixcbiAgI25vdGljZSBwIHtcbiAgICB3aWR0aDogNDAlO1xuICAgIGxlZnQ6IDQ1JTtcbiAgfVxuICBib2R5LFxuICBodG1sIHtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuICB9XG4gIG1haW4gc2VjdGlvbiB7XG4gICAgb3BhY2l0eTogLjA1O1xuICB9XG59IiwiQGltcG9ydCB1cmwoaHR0cDovL2ZvbnRzLmdvb2dsZWFwaXMuY29tL2Nzcz9mYW1pbHk9UXVlc3RyaWFsKTtcbi8qIGxpbmUgNSwgc2Nzcy9jb21wYXNzL3Jlc2V0L191dGlsaXRpZXMuc2NzcyAqL1xuaHRtbCwgYm9keSwgZGl2LCBzcGFuLCBhcHBsZXQsIG9iamVjdCwgaWZyYW1lLFxuaDEsIGgyLCBoMywgaDQsIGg1LCBoNiwgcCwgYmxvY2txdW90ZSwgcHJlLFxuYSwgYWJiciwgYWNyb255bSwgYWRkcmVzcywgYmlnLCBjaXRlLCBjb2RlLFxuZGVsLCBkZm4sIGVtLCBpbWcsIGlucywga2JkLCBxLCBzLCBzYW1wLFxuc21hbGwsIHN0cmlrZSwgc3Ryb25nLCBzdWIsIHN1cCwgdHQsIHZhcixcbmIsIHUsIGksIGNlbnRlcixcbmRsLCBkdCwgZGQsIG9sLCB1bCwgbGksXG5maWVsZHNldCwgZm9ybSwgbGFiZWwsIGxlZ2VuZCxcbnRhYmxlLCBjYXB0aW9uLCB0Ym9keSwgdGZvb3QsIHRoZWFkLCB0ciwgdGgsIHRkLFxuYXJ0aWNsZSwgYXNpZGUsIGNhbnZhcywgZGV0YWlscywgZW1iZWQsXG5maWd1cmUsIGZpZ2NhcHRpb24sIGZvb3RlciwgaGVhZGVyLCBoZ3JvdXAsXG5tZW51LCBuYXYsIG91dHB1dCwgcnVieSwgc2VjdGlvbiwgc3VtbWFyeSxcbnRpbWUsIG1hcmssIGF1ZGlvLCB2aWRlbyB7XG4gIG1hcmdpbjogMDtcbiAgcGFkZGluZzogMDtcbiAgYm9yZGVyOiAwO1xuICBmb250OiBpbmhlcml0O1xuICBmb250LXNpemU6IDEwMCU7XG4gIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTtcbn1cblxuLyogbGluZSAyMiwgc2Nzcy9jb21wYXNzL3Jlc2V0L191dGlsaXRpZXMuc2NzcyAqL1xuaHRtbCB7XG4gIGxpbmUtaGVpZ2h0OiAxO1xufVxuXG4vKiBsaW5lIDI0LCBzY3NzL2NvbXBhc3MvcmVzZXQvX3V0aWxpdGllcy5zY3NzICovXG5vbCwgdWwge1xuICBsaXN0LXN0eWxlOiBub25lO1xufVxuXG4vKiBsaW5lIDI2LCBzY3NzL2NvbXBhc3MvcmVzZXQvX3V0aWxpdGllcy5zY3NzICovXG50YWJsZSB7XG4gIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XG4gIGJvcmRlci1zcGFjaW5nOiAwO1xufVxuXG4vKiBsaW5lIDI4LCBzY3NzL2NvbXBhc3MvcmVzZXQvX3V0aWxpdGllcy5zY3NzICovXG5jYXB0aW9uLCB0aCwgdGQge1xuICB0ZXh0LWFsaWduOiBsZWZ0O1xuICBmb250LXdlaWdodDogbm9ybWFsO1xuICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xufVxuXG4vKiBsaW5lIDMwLCBzY3NzL2NvbXBhc3MvcmVzZXQvX3V0aWxpdGllcy5zY3NzICovXG5xLCBibG9ja3F1b3RlIHtcbiAgcXVvdGVzOiBub25lO1xufVxuXG4vKiBsaW5lIDEwMywgc2Nzcy9jb21wYXNzL3Jlc2V0L191dGlsaXRpZXMuc2NzcyAqL1xucTpiZWZvcmUsIHE6YWZ0ZXIsIGJsb2NrcXVvdGU6YmVmb3JlLCBibG9ja3F1b3RlOmFmdGVyIHtcbiAgY29udGVudDogXCJcIjtcbiAgY29udGVudDogbm9uZTtcbn1cblxuLyogbGluZSAzMiwgc2Nzcy9jb21wYXNzL3Jlc2V0L191dGlsaXRpZXMuc2NzcyAqL1xuYSBpbWcge1xuICBib3JkZXI6IG5vbmU7XG59XG5cbi8qIGxpbmUgMTE2LCBzY3NzL2NvbXBhc3MvcmVzZXQvX3V0aWxpdGllcy5zY3NzICovXG5lbGVtZW50cy1vZi10eXBlKGh0bWw1LWJsb2NrKSB7XG4gIGRpc3BsYXk6IGJsb2NrO1xufVxuXG4vKiBsaW5lIDEsIHNjc3MvcGFydGlhbHMvX3Jlc2V0LnNjc3MgKi9cbi5jbGVhcmZpeCB7XG4gIGNsZWFyOiBib3RoO1xuICBkaXNwbGF5OiBibG9jaztcbiAgZmxvYXQ6IG5vbmU7XG59XG5cbi8qIGxpbmUgMiwgc2Nzcy9wYXJ0aWFscy9fcmVzZXQuc2NzcyAqL1xuYSB7XG4gIGNvbG9yOiBpbmhlcml0O1xuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gIGN1cnNvcjogcG9pbnRlcjtcbn1cblxuLyogbGluZSAxLCBzY3NzL3BhcnRpYWxzL19leHRlbmQuc2NzcyAqL1xuYm9keSxcbnRleHRhcmVhLFxuaW5wdXQge1xuICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZCAhaW1wb3J0YW50O1xuICAtbW96LW9zeC1mb250LXNtb290aGluZzogZ3JheXNjYWxlICFpbXBvcnRhbnQ7XG4gIGZvbnQtc21vb3RoaW5nOiBhbnRpYWxpc2VkICFpbXBvcnRhbnQ7XG4gIC13ZWJraXQtdGV4dC1yZW5kZXJpbmc6IGdlb21ldHJpY1ByZWNpc2lvbiAhaW1wb3J0YW50O1xuICAtbW96LXRleHQtcmVuZGVyaW5nOiBnZW9tZXRyaWNQcmVjaXNpb24gIWltcG9ydGFudDtcbiAgdGV4dC1yZW5kZXJpbmc6IGdlb21ldHJpY1ByZWNpc2lvbiAhaW1wb3J0YW50O1xufVxuXG4vKiBsaW5lIDExLCBzY3NzL3BhcnRpYWxzL19leHRlbmQuc2NzcyAqL1xuc2VjdGlvbixcbi5zbGlkZXMgPiBkaXYsXG52aWRlbywgbWFpbiAjYWJvdXQgLnRodW1iIGltZyxcbm1haW4gI2Fib3V0IC50aHVtYiBzdmcsIG1haW4gI3Byb2plY3RzIC5zbGlkZXMgLnNsaWRlciBpbWcsIC5zbGlkZXIgLnNsaWRlcyA+IGRpdiwgLmNvbnRyb2xsZXIgbGkgYSB7XG4gIGhlaWdodDogMTAwdmg7XG4gIHdpZHRoOiAxMDB2dztcbn1cblxuLyogbGluZSAxNiwgc2Nzcy9wYXJ0aWFscy9fZXh0ZW5kLnNjc3MgKi9cbiNwb3B1cCAuY29udGVudCxcbiNwb3B1cCAuY29udGVudCB1bCxcbiNwb3B1cCA+ICoge1xuICBoZWlnaHQ6IDEwMCU7XG4gIHdpZHRoOiAxMDAlO1xuICBvdmVyZmxvdzogaGlkZGVuO1xufVxuXG5Aa2V5ZnJhbWVzIHNsaWRlZW50ZXIge1xuICBmcm9tIHtcbiAgICB0b3A6IDIwcHg7XG4gICAgb3BhY2l0eTogMDtcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcGVyc3BlY3RpdmUoNDAwcHgpIHRyYW5zbGF0ZTNkKDBweCwgMHB4LCAwcHgpIHNjYWxlM2QoMSwgMSwgMSkgcm90YXRlM2QoMywgMCwgMCwgM2RlZyk7XG4gICAgLW1zLXRyYW5zZm9ybTogcGVyc3BlY3RpdmUoNDAwcHgpIHRyYW5zbGF0ZTNkKDBweCwgMHB4LCAwcHgpIHNjYWxlM2QoMSwgMSwgMSkgcm90YXRlM2QoMywgMCwgMCwgM2RlZyk7XG4gICAgdHJhbnNmb3JtOiBwZXJzcGVjdGl2ZSg0MDBweCkgdHJhbnNsYXRlM2QoMHB4LCAwcHgsIDBweCkgc2NhbGUzZCgxLCAxLCAxKSByb3RhdGUzZCgzLCAwLCAwLCAzZGVnKTtcbiAgfVxuICB0byB7XG4gICAgdG9wOiAwcHg7XG4gICAgb3BhY2l0eTogMTtcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcGVyc3BlY3RpdmUoNDAwcHgpIHRyYW5zbGF0ZTNkKDBweCwgMHB4LCAwcHgpIHNjYWxlM2QoMSwgMSwgMSkgcm90YXRlM2QoMywgMCwgMCwgMGRlZyk7XG4gICAgLW1zLXRyYW5zZm9ybTogcGVyc3BlY3RpdmUoNDAwcHgpIHRyYW5zbGF0ZTNkKDBweCwgMHB4LCAwcHgpIHNjYWxlM2QoMSwgMSwgMSkgcm90YXRlM2QoMywgMCwgMCwgMGRlZyk7XG4gICAgdHJhbnNmb3JtOiBwZXJzcGVjdGl2ZSg0MDBweCkgdHJhbnNsYXRlM2QoMHB4LCAwcHgsIDBweCkgc2NhbGUzZCgxLCAxLCAxKSByb3RhdGUzZCgzLCAwLCAwLCAwZGVnKTtcbiAgfVxufVxuXG5Aa2V5ZnJhbWVzIHNsaWRlb3V0IHtcbiAgZnJvbSB7XG4gICAgdG9wOiAwcHg7XG4gICAgb3BhY2l0eTogMTtcbiAgfVxuICB0byB7XG4gICAgdG9wOiAyMHB4O1xuICAgIG9wYWNpdHk6IDA7XG4gIH1cbn1cblxuQC13ZWJraXQta2V5ZnJhbWVzIHNsaWRlZW50ZXIge1xuICBmcm9tIHtcbiAgICB0b3A6IDIwcHg7XG4gICAgb3BhY2l0eTogMDtcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcGVyc3BlY3RpdmUoNDAwcHgpIHRyYW5zbGF0ZTNkKDBweCwgMHB4LCAwcHgpIHNjYWxlM2QoMSwgMSwgMSkgcm90YXRlM2QoMywgMCwgMCwgM2RlZyk7XG4gICAgLW1zLXRyYW5zZm9ybTogcGVyc3BlY3RpdmUoNDAwcHgpIHRyYW5zbGF0ZTNkKDBweCwgMHB4LCAwcHgpIHNjYWxlM2QoMSwgMSwgMSkgcm90YXRlM2QoMywgMCwgMCwgM2RlZyk7XG4gICAgdHJhbnNmb3JtOiBwZXJzcGVjdGl2ZSg0MDBweCkgdHJhbnNsYXRlM2QoMHB4LCAwcHgsIDBweCkgc2NhbGUzZCgxLCAxLCAxKSByb3RhdGUzZCgzLCAwLCAwLCAzZGVnKTtcbiAgfVxuICB0byB7XG4gICAgdG9wOiAwcHg7XG4gICAgb3BhY2l0eTogMTtcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcGVyc3BlY3RpdmUoNDAwcHgpIHRyYW5zbGF0ZTNkKDBweCwgMHB4LCAwcHgpIHNjYWxlM2QoMSwgMSwgMSkgcm90YXRlM2QoMywgMCwgMCwgMGRlZyk7XG4gICAgLW1zLXRyYW5zZm9ybTogcGVyc3BlY3RpdmUoNDAwcHgpIHRyYW5zbGF0ZTNkKDBweCwgMHB4LCAwcHgpIHNjYWxlM2QoMSwgMSwgMSkgcm90YXRlM2QoMywgMCwgMCwgMGRlZyk7XG4gICAgdHJhbnNmb3JtOiBwZXJzcGVjdGl2ZSg0MDBweCkgdHJhbnNsYXRlM2QoMHB4LCAwcHgsIDBweCkgc2NhbGUzZCgxLCAxLCAxKSByb3RhdGUzZCgzLCAwLCAwLCAwZGVnKTtcbiAgfVxufVxuXG5ALXdlYmtpdC1rZXlmcmFtZXMgc2xpZGVvdXQge1xuICBmcm9tIHtcbiAgICB0b3A6IDBweDtcbiAgICBvcGFjaXR5OiAxO1xuICB9XG4gIHRvIHtcbiAgICB0b3A6IDIwcHg7XG4gICAgb3BhY2l0eTogMDtcbiAgfVxufVxuXG5Aa2V5ZnJhbWVzIG1lbnVlbnRlciB7XG4gIGZyb20ge1xuICAgIGxlZnQ6IDIwcHg7XG4gICAgb3BhY2l0eTogMDtcbiAgfVxuICB0byB7XG4gICAgbGVmdDogMHB4O1xuICAgIG9wYWNpdHk6IDE7XG4gIH1cbn1cblxuQC13ZWJraXQta2V5ZnJhbWVzIG1lbnVlbnRlciB7XG4gIGZyb20ge1xuICAgIGxlZnQ6IDIwcHg7XG4gICAgb3BhY2l0eTogMDtcbiAgfVxuICB0byB7XG4gICAgbGVmdDogMHB4O1xuICAgIG9wYWNpdHk6IDE7XG4gIH1cbn1cblxuLyogbGluZSA4Mywgc2Nzcy9wYXJ0aWFscy9fa2V5ZnJhbWUuc2NzcyAqL1xuLmFuaW0sIG5hdiBsaTpiZWZvcmUsIG5hdiBsaTphZnRlciwgLmV4cGFuZCAqLCAuZXhwYW5kIHN2ZyBjaXJjbGUsIG1haW4gLnRodW1iIHNwYW4sIC5jb250cm9sbGVyIHNwYW4ge1xuICAtd2Via2l0LXRyYW5zaXRpb24tZHVyYXRpb246IDMwMG1zO1xuICAtd2Via2l0LXRyYW5zaXRpb24tcHJvcGVydHk6IGFsbDtcbiAgLXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlaW47XG4gIC1tb3otdHJhbnNpdGlvbi1kdXJhdGlvbjogMzAwbXM7XG4gIC1tb3otdHJhbnNpdGlvbi1wcm9wZXJ0eTogYWxsO1xuICAtbW96LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGVhc2VpbjtcbiAgLW8tdHJhbnNpdGlvbi1kdXJhdGlvbjogMzAwbXM7XG4gIC1vLXRyYW5zaXRpb24tcHJvcGVydHk6IGFsbDtcbiAgLW8tYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZWluO1xufVxuXG5AZm9udC1mYWNlIHtcbiAgZm9udC1mYW1pbHk6ICdTaW1wbGlmaWNhJztcbiAgc3JjOiB1cmwoXCIuLi9hc3NldHMvZm9udHMvc2ltcGxpZmljYV90eXBlZmFjZS5lb3RcIik7XG4gIHNyYzogdXJsKFwiLi4vYXNzZXRzL2ZvbnRzL3NpbXBsaWZpY2FfdHlwZWZhY2UuZW90PyNpZWZpeFwiKSBmb3JtYXQoXCJlbWJlZGRlZC1vcGVudHlwZVwiKSwgdXJsKFwiLi4vYXNzZXRzL2ZvbnRzL3NpbXBsaWZpY2FfdHlwZWZhY2Uub3RmXCIpIGZvcm1hdChcIm9wZW50eXBlXCIpLCB1cmwoXCIuLi9hc3NldHMvZm9udHMvc2ltcGxpZmljYV90eXBlZmFjZS53b2ZmMlwiKSBmb3JtYXQoXCJ3b2ZmMlwiKSwgdXJsKFwiLi4vYXNzZXRzL2ZvbnRzL3NpbXBsaWZpY2FfdHlwZWZhY2Uud29mZlwiKSBmb3JtYXQoXCJ3b2ZmXCIpLCB1cmwoXCIuLi9hc3NldHMvZm9udHMvc2ltcGxpZmljYV90eXBlZmFjZS50dGZcIikgZm9ybWF0KFwidHJ1ZXR5cGVcIiksIHVybChcIi4uL2Fzc2V0cy9mb250cy9zaW1wbGlmaWNhX3R5cGVmYWNlLnN2ZyNQbGFjYXJkTVRcIikgZm9ybWF0KFwic3ZnXCIpO1xuICBmb250LXdlaWdodDogYm9sZDtcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xufVxuXG4vKiBsaW5lIDksIHNjc3Mvc3R5bGUuc2NzcyAqL1xuW2RhdGEtaGlkZGVuXSB7XG4gIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDtcbn1cblxuLyogbGluZSAxMywgc2Nzcy9zdHlsZS5zY3NzICovXG46OnNlbGVjdGlvbiB7XG4gIGJhY2tncm91bmQ6ICMzMzM7XG4gIGNvbG9yOiAjZWZlZmVmO1xufVxuXG4vKiBsaW5lIDE4LCBzY3NzL3N0eWxlLnNjc3MgKi9cbmJvZHk6Oi13ZWJraXQtc2Nyb2xsYmFyIHtcbiAgZGlzcGxheTogbm9uZTtcbn1cblxuLyogbGluZSAyMSwgc2Nzcy9zdHlsZS5zY3NzICovXG5ib2R5LFxuaHRtbCB7XG4gIG1pbi1oZWlnaHQ6IDEwMCU7XG59XG5cbi8qIGxpbmUgMjUsIHNjc3Mvc3R5bGUuc2NzcyAqL1xuYm9keVtzdGF0aWNdIHtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbn1cblxuLyogbGluZSAyOCwgc2Nzcy9zdHlsZS5zY3NzICovXG5ib2R5LFxudGV4dGFyZWEsXG5pbnB1dCB7XG4gIGZvbnQ6IDE2LjVweC8xLjdlbSBcIlNpbXBsaWZpY2FcIiwgaGVsdmV0aWNhLCBhcmlhbCwgc2Fucy1zZXJpZjtcbiAgbGV0dGVyLXNwYWNpbmc6IDEuNXB4O1xufVxuXG4vKiBsaW5lIDM1LCBzY3NzL3N0eWxlLnNjc3MgKi9cbnN2ZyxcbmltZyB7XG4gIHVzZXItc2VsZWN0OiBub25lO1xuICB1c2VyLWRyYWc6IG5vbmU7XG59XG5cbi8qIGxpbmUgNDAsIHNjc3Mvc3R5bGUuc2NzcyAqL1xuLmhlcm8sIG5hdiBzcGFuLCBoMSwgaDIge1xuICBmb250OiAxOXB4LzEuN2VtIFwiUXVlc3RyaWFsXCIsIGhlbHZldGljYSwgYXJpYWwsIHNhbnMtc2VyaWY7XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG4gIGxldHRlci1zcGFjaW5nOiAzcHg7XG59XG5cbi8qIGxpbmUgNDUsIHNjc3Mvc3R5bGUuc2NzcyAqL1xuLnNtbGVyIHtcbiAgZm9udC1zaXplOiA4NSU7XG59XG5cbi8qIGxpbmUgNDgsIHNjc3Mvc3R5bGUuc2NzcyAqL1xuLmZ1bGxvYmosIG1haW4gLnRodW1iIGltZyB7XG4gIG1pbi13aWR0aDogMTAwJTtcbiAgd2lkdGg6IGF1dG87XG4gIG1pbi1oZWlnaHQ6IDEwMCU7XG4gIGhlaWdodDogYXV0bztcbn1cblxuLyogbGluZSA1OSwgc2Nzcy9zdHlsZS5zY3NzICovXG5hc2lkZSB7XG4gIHBvc2l0aW9uOiBmaXhlZDtcbiAgei1pbmRleDogMTE7XG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICBvdmVyZmxvdzogaGlkZGVuO1xufVxuXG4vKiBsaW5lIDY0LCBzY3NzL3N0eWxlLnNjc3MgKi9cbmFzaWRlIGltZyxcbmFzaWRlIHN2ZyB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbn1cblxuLyogbGluZSA2OCwgc2Nzcy9zdHlsZS5zY3NzICovXG5hc2lkZSBpbWcge1xuICAtd2Via2l0LXRyYW5zZm9ybTogcm90YXRlKC03ZGVnKTtcbiAgLW1vei10cmFuc2Zvcm06IHJvdGF0ZSgtN2RlZyk7XG4gIC1tcy10cmFuc2Zvcm06IHJvdGF0ZSgtN2RlZyk7XG4gIC1vLXRyYW5zZm9ybTogcm90YXRlKC03ZGVnKTtcbiAgdHJhbnNmb3JtOiByb3RhdGUoLTdkZWcpO1xuICBtaW4taGVpZ2h0OiA0MjlweDtcbiAgei1pbmRleDogMjtcbiAgaGVpZ2h0OiA1MyU7XG4gIGxlZnQ6IDUuMyU7XG4gIHRvcDogMjElO1xufVxuXG4vKiBsaW5lIDc2LCBzY3NzL3N0eWxlLnNjc3MgKi9cbmFzaWRlIHN2ZyB7XG4gIGhlaWdodDogMTAwJTtcbiAgd2lkdGg6IDEwMCU7XG4gIG1pbi1oZWlnaHQ6IDYwMHB4O1xuICBtaW4td2lkdGg6IDEwMDBweDtcbiAgbGVmdDogMDtcbiAgdG9wOiAwO1xuICBtYXgtd2lkdGg6IDExMDBweDtcbn1cblxuLyogbGluZSA4OCwgc2Nzcy9zdHlsZS5zY3NzICovXG4jbG9nbyAud3JhcHBlciA+ICoge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHRvcDogMjBweDtcbn1cblxuLyogbGluZSA5NCwgc2Nzcy9zdHlsZS5zY3NzICovXG4jbG9nby5hY3RpdmUgLndyYXBwZXIgPiBzdmcsXG4jbG9nby5hY3RpdmUgc3BhbiB7XG4gIGFuaW1hdGlvbjogc2xpZGVlbnRlciAxMDAwbXMgZWFzZS1vdXQgZm9yd2FyZHM7XG59XG5cbi8qIGxpbmUgOTgsIHNjc3Mvc3R5bGUuc2NzcyAqL1xuI2xvZ28uYWN0aXZlIHNwYW4ge1xuICBhbmltYXRpb24tZGVsYXk6IDUwMG1zO1xufVxuXG4vKiBsaW5lIDEwMywgc2Nzcy9zdHlsZS5zY3NzICovXG5uYXYge1xuICBwb3NpdGlvbjogZml4ZWQ7XG4gIHRvcDogNTAlO1xuICBsZWZ0OiAwO1xuICB3aWR0aDogMjAlO1xuICB6LWluZGV4OiAxMjtcbiAgbWluLXdpZHRoOiAxNTBweDtcbn1cblxuLyogbGluZSAxMTEsIHNjc3Mvc3R5bGUuc2NzcyAqL1xubmF2OmhvdmVyIGxpIGEge1xuICBhbmltYXRpb246IHNsaWRlZW50ZXIgMzAwbXMgZWFzZS1pbiBmb3J3YXJkcztcbiAgdG9wOiAyMHB4O1xuICBvcGFjaXR5OiAwO1xufVxuXG4vKiBsaW5lIDExNiwgc2Nzcy9zdHlsZS5zY3NzICovXG5uYXY6aG92ZXIgbGk6bnRoLWNoaWxkKDIpIGEge1xuICBhbmltYXRpb24tZGVsYXk6IC4wNXM7XG59XG5cbi8qIGxpbmUgMTE5LCBzY3NzL3N0eWxlLnNjc3MgKi9cbm5hdjpob3ZlciBsaTpudGgtY2hpbGQoMykgYSB7XG4gIGFuaW1hdGlvbi1kZWxheTogLjFzO1xufVxuXG4vKiBsaW5lIDEyMiwgc2Nzcy9zdHlsZS5zY3NzICovXG5uYXY6aG92ZXIgbGk6bnRoLWNoaWxkKDQpIGEge1xuICBhbmltYXRpb24tZGVsYXk6IC4xNXM7XG59XG5cbi8qIGxpbmUgMTI1LCBzY3NzL3N0eWxlLnNjc3MgKi9cbm5hdjpob3ZlciBsaS5hY3RpdmU6YWZ0ZXIge1xuICBsZWZ0OiAtNzBweDtcbn1cblxuLyogbGluZSAxMzAsIHNjc3Mvc3R5bGUuc2NzcyAqL1xubmF2LmhhbWJ1cmdlciBsaS5hY3RpdmU6YWZ0ZXIge1xuICBsZWZ0OiAtNDdweDtcbn1cblxuLyogbGluZSAxMzMsIHNjc3Mvc3R5bGUuc2NzcyAqL1xubmF2LmhhbWJ1cmdlciBsaS5hY3RpdmU6YmVmb3JlIHtcbiAgb3BhY2l0eTogMTtcbiAgbGVmdDogMTRweDtcbn1cblxuLyogbGluZSAxMzgsIHNjc3Mvc3R5bGUuc2NzcyAqL1xubmF2IHNwYW4ge1xuICBsZXR0ZXItc3BhY2luZzogMXB4O1xuICBtYXJnaW4tcmlnaHQ6IDEwcHg7XG59XG5cbi8qIGxpbmUgMTQzLCBzY3NzL3N0eWxlLnNjc3MgKi9cbm5hdiBsaSB7XG4gIGhlaWdodDogMzJweDtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBwYWRkaW5nLWxlZnQ6IDMwcHg7XG59XG5cbi8qIGxpbmUgMTQ3LCBzY3NzL3N0eWxlLnNjc3MgKi9cbm5hdiBsaSBhIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICBhbmltYXRpb246IHNsaWRlb3V0IDMwMG1zIGVhc2UtaW4gZm9yd2FyZHM7XG4gIHRvcDogMjBweDtcbiAgb3BhY2l0eTogMDtcbn1cblxuLyogbGluZSAxNTQsIHNjc3Mvc3R5bGUuc2NzcyAqL1xubmF2IGxpOmFmdGVyLFxubmF2IGxpOmJlZm9yZSB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbn1cblxuLyogbGluZSAxNTgsIHNjc3Mvc3R5bGUuc2NzcyAqL1xubmF2IGxpOmJlZm9yZSB7XG4gIGxlZnQ6IDlweDtcbiAgei1pbmRleDogMTI7XG4gIG9wYWNpdHk6IDA7XG4gIHdpZHRoOiAyMHB4O1xuICBoZWlnaHQ6IDIwcHg7XG4gIGNvbnRlbnQ6IHVybChcIi4uL2Fzc2V0cy9pbWFnZXMvc3ZnL2hhbWJ1cmdlci5zdmdcIik7XG59XG5cbi8qIGxpbmUgMTY3LCBzY3NzL3N0eWxlLnNjc3MgKi9cbm5hdiBsaTphZnRlciB7XG4gIC13ZWJraXQtdHJhbnNmb3JtOiByb3RhdGUoMWRlZyk7XG4gIC1tb3otdHJhbnNmb3JtOiByb3RhdGUoMWRlZyk7XG4gIC1tcy10cmFuc2Zvcm06IHJvdGF0ZSgxZGVnKTtcbiAgLW8tdHJhbnNmb3JtOiByb3RhdGUoMWRlZyk7XG4gIHRyYW5zZm9ybTogcm90YXRlKDFkZWcpO1xuICBhbmltYXRpb24tZGVsYXk6IDBzO1xuICBjb250ZW50OiB1cmwoXCIuLi9hc3NldHMvaW1hZ2VzL2FjdGl2ZW5hdi5qcGdcIik7XG4gIHotaW5kZXg6IDExO1xuICBsZWZ0OiAtNzBweDtcbiAgdG9wOiAtMjlweDtcbiAgZGlzcGxheTogYmxvY2s7XG59XG5cbi8qIGxpbmUgMTc3LCBzY3NzL3N0eWxlLnNjc3MgKi9cbm5hdiBsaS5hY3RpdmUgYSB7XG4gIGFuaW1hdGlvbjogc2xpZGVlbnRlciAzMDBtcyBlYXNlLWluIGZvcndhcmRzO1xufVxuXG4vKiBsaW5lIDE4MCwgc2Nzcy9zdHlsZS5zY3NzICovXG5uYXYgbGkuYWN0aXZlOmFmdGVyIHtcbiAgLXdlYmtpdC10cmFuc2Zvcm06IHJvdGF0ZSg1NGRlZyk7XG4gIC1tb3otdHJhbnNmb3JtOiByb3RhdGUoNTRkZWcpO1xuICAtbXMtdHJhbnNmb3JtOiByb3RhdGUoNTRkZWcpO1xuICAtby10cmFuc2Zvcm06IHJvdGF0ZSg1NGRlZyk7XG4gIHRyYW5zZm9ybTogcm90YXRlKDU0ZGVnKTtcbiAgYW5pbWF0aW9uLWRlbGF5OiAycztcbn1cblxuLyogbGluZSAxODUsIHNjc3Mvc3R5bGUuc2NzcyAqL1xuLnByZWxvYWQge1xuICBoZWlnaHQ6IDA7XG4gIHdpZHRoOiAwO1xuICBvdmVyZmxvdzogaGlkZGVuO1xufVxuXG4vKiBsaW5lIDE5MCwgc2Nzcy9zdHlsZS5zY3NzICovXG4ud3JhcHBlciB7XG4gIG1heC13aWR0aDogMzcwcHg7XG4gIHdpZHRoOiAxMDAlO1xufVxuXG4vKiBsaW5lIDE5NCwgc2Nzcy9zdHlsZS5zY3NzICovXG4jbm90aWNlIHAsXG4ud3JhcHBlciB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiA1MCU7XG4gIGxlZnQ6IDIzdnc7XG59XG5cbi8qIGxpbmUgMjAwLCBzY3NzL3N0eWxlLnNjc3MgKi9cbi5leHBhbmQge1xuICBwb3NpdGlvbjogYWJzb2x1dGUgIWltcG9ydGFudDtcbiAgb3ZlcmZsb3c6IGF1dG87XG4gIHRvcDogNDAlO1xuICBsZWZ0OiAxMDUlO1xuICB3aWR0aDogNjAlICFpbXBvcnRhbnQ7XG59XG5cbi8qIGxpbmUgMjA3LCBzY3NzL3N0eWxlLnNjc3MgKi9cbi5leHBhbmQgKiB7XG4gIGZsb2F0OiBsZWZ0O1xufVxuXG4vKiBsaW5lIDIwOCwgc2Nzcy9zdHlsZS5zY3NzICovXG4uZXhwYW5kIHN2ZyB7XG4gIGhlaWdodDogNDBweDtcbn1cblxuLyogbGluZSAyMTQsIHNjc3Mvc3R5bGUuc2NzcyAqL1xuLmV4cGFuZCBhOmhvdmVyIHN2ZyBjaXJjbGUge1xuICByOiAxMy41O1xufVxuXG4vKiBsaW5lIDIxNSwgc2Nzcy9zdHlsZS5zY3NzICovXG4uZXhwYW5kIGE6aG92ZXIgc3BhbiB7XG4gIG9wYWNpdHk6IDE7XG4gIHdpZHRoOiBhdXRvO1xuICBtYXJnaW4tbGVmdDogMTBweDtcbn1cblxuLyogbGluZSAyMjIsIHNjc3Mvc3R5bGUuc2NzcyAqL1xuLmV4cGFuZCBzcGFuIHtcbiAgbWFyZ2luOiAxMHB4IDAgMCAwcHg7XG4gIG9wYWNpdHk6IDA7XG59XG5cbi8qIGxpbmUgMjMwLCBzY3NzL3N0eWxlLnNjc3MgKi9cbmgxLFxuaDIsXG4uaGVybyxcbm5hdiBzcGFuLFxuaDEsXG5oMixcbmxhYmVsIHtcbiAgY29sb3I6ICM0NDQ7XG59XG5cbi8qIGxpbmUgMjM2LCBzY3NzL3N0eWxlLnNjc3MgKi9cbmgyIHtcbiAgZm9udC1zaXplOiAxNi41cHg7XG4gIGxldHRlci1zcGFjaW5nOiAyLjhweDtcbiAgbGluZS1oZWlnaHQ6IDEuM2VtO1xufVxuXG4vKiBsaW5lIDI0Miwgc2Nzcy9zdHlsZS5zY3NzICovXG4jcG9wdXAgLmNvbnRyb2xsZXIge1xuICBiYWNrZ3JvdW5kOiB1cmwoXCIuLi9hc3NldHMvaW1hZ2VzL3N2Zy9zbGlkZXItY29udHJvbC1ib3R0b20uc3ZnXCIpIG5vLXJlcGVhdCBzY3JvbGwgMTAwJSAxMDAlIHRyYW5zcGFyZW50O1xuICBib3R0b206IDA7XG4gIGxlZnQ6IDQwJTtcbiAgbWF4LWhlaWdodDogMjlweDtcbiAgbWluLXdpZHRoOiA5MHB4O1xuICByaWdodDogaW5pdGlhbDtcbiAgdG9wOiBpbml0aWFsO1xuICBwYWRkaW5nOiA5cHggMHB4IDAgMDtcbn1cblxuLyogbGluZSAyNTIsIHNjc3Mvc3R5bGUuc2NzcyAqL1xuI3BvcHVwIC5jb250cm9sbGVyIHNwYW4uc2Nyb2xsIHtcbiAgZm9udC1mYW1pbHk6IFwiU2ltcGxpZmljYVwiLCBoZWx2ZXRpY2EsIGFyaWFsLCBzYW5zLXNlcmlmO1xuICB0ZXh0LXRyYW5zZm9ybTogbG93ZXJjYXNlO1xuICBtYXJnaW4tbGVmdDogNXB4O1xufVxuXG4vKiBsaW5lIDI1OSwgc2Nzcy9zdHlsZS5zY3NzICovXG4uc2xpZGVyIC5zbGlkZSxcbi5zbGlkZXIgbGkge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG4gIGRpc3BsYXk6IG5vbmU7XG59XG5cbi8qIGxpbmUgMjY2LCBzY3NzL3N0eWxlLnNjc3MgKi9cbi5zbGlkZXIgLnNsaWRlW2RhdGEtc2hvd10sIC5zbGlkZXIgLnNsaWRlW2RhdGEtdHJhbnNpdGlvbmluZ10sXG4uc2xpZGVyIGxpW2RhdGEtc2hvd10sXG4uc2xpZGVyIGxpW2RhdGEtdHJhbnNpdGlvbmluZ10ge1xuICBkaXNwbGF5OiBibG9jaztcbn1cblxuLyogbGluZSAyNzAsIHNjc3Mvc3R5bGUuc2NzcyAqL1xuLnNsaWRlciAuc2xpZGVbZGF0YS1zaG93XSxcbi5zbGlkZXIgbGlbZGF0YS1zaG93XSB7XG4gIHotaW5kZXg6IDM7XG59XG5cbi8qIGxpbmUgMjcyLCBzY3NzL3N0eWxlLnNjc3MgKi9cbi5zbGlkZXIgLnNsaWRlW2RhdGEtc2hvd10gaW1nLFxuLnNsaWRlciBsaVtkYXRhLXNob3ddIGltZyB7XG4gIGFuaW1hdGlvbjogc2xpZGVlbnRlciA0MDBtcyBlYXNlLWluO1xufVxuXG4vKiBsaW5lIDI3Niwgc2Nzcy9zdHlsZS5zY3NzICovXG4uc2xpZGVyIC5zbGlkZVtkYXRhLXRyYW5zaXRpb25pbmddLFxuLnNsaWRlciBsaVtkYXRhLXRyYW5zaXRpb25pbmddIHtcbiAgei1pbmRleDogMjtcbn1cblxuLyogbGluZSAyNzksIHNjc3Mvc3R5bGUuc2NzcyAqL1xuLnNsaWRlciAuc2xpZGUucG9ydHJhaXQsXG4uc2xpZGVyIGxpLnBvcnRyYWl0IHtcbiAgb3ZlcmZsb3cteDogaGlkZGVuO1xuICBvdmVyZmxvdy15OiBzY3JvbGw7XG59XG5cbi8qIGxpbmUgMjgzLCBzY3NzL3N0eWxlLnNjc3MgKi9cbi5zbGlkZXIgLnNsaWRlLnBvcnRyYWl0IGltZyxcbi5zbGlkZXIgbGkucG9ydHJhaXQgaW1nIHtcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogYXV0bztcbiAgb2JqZWN0LWZpdDogaW5pdGlhbDtcbn1cblxuLyogbGluZSAyODksIHNjc3Mvc3R5bGUuc2NzcyAqL1xuLnNsaWRlciAuc2xpZGUgaW1nLFxuLnNsaWRlciBsaSBpbWcge1xuICBkaXNwbGF5OiBibG9jaztcbiAgb2JqZWN0LWZpdDogY292ZXI7XG4gIHdpZHRoOiAxMDAlO1xuICBoZWlnaHQ6IDEwMCU7XG59XG5cbi8qIGxpbmUgMjk0LCBzY3NzL3N0eWxlLnNjc3MgKi9cbi5zbGlkZXIgLnNsaWRlIGltZy5wb3J0cmFpdCxcbi5zbGlkZXIgbGkgaW1nLnBvcnRyYWl0IHtcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogYXV0bztcbiAgb2JqZWN0LWZpdDogaW5pdGlhbDtcbn1cblxuLyogbGluZSAzMDIsIHNjc3Mvc3R5bGUuc2NzcyAqL1xuI3BvcHVwIHtcbiAgZGlzcGxheTogbm9uZTtcbiAgcG9zaXRpb246IGZpeGVkO1xuICB6LWluZGV4OiAxMDtcbn1cblxuLyogbGluZSAzMDYsIHNjc3Mvc3R5bGUuc2NzcyAqL1xuI3BvcHVwW2RhdGEtYWN0aXZlPVwidHJ1ZVwiXSB7XG4gIGRpc3BsYXk6IGJsb2NrO1xufVxuXG4vKiBsaW5lIDMxMCwgc2Nzcy9zdHlsZS5zY3NzICovXG4jcG9wdXBbZGF0YS1mZWN0aGluZ10gLnNwaW5uZXIge1xuICBkaXNwbGF5OiBibG9jaztcbiAgb3BhY2l0eTogMTtcbn1cblxuLyogbGluZSAzMTUsIHNjc3Mvc3R5bGUuc2NzcyAqL1xuI3BvcHVwIC5zcGlubmVyIHtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDUwJTtcbiAgbGVmdDogNDUlO1xuICBkaXNwbGF5OiBub25lO1xuICBvcGFjaXR5OiAwO1xuICBoZWlnaHQ6IDUwcHg7XG4gIHdpZHRoOiA3NXB4O1xuICB6LWluZGV4OiAyO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG59XG5cbi8qIGxpbmUgMzI1LCBzY3NzL3N0eWxlLnNjc3MgKi9cbiNwb3B1cCAuc3Bpbm5lciBzdmcge1xuICB3aWR0aDogNTBweDtcbiAgaGVpZ2h0OiA1MHB4O1xufVxuXG4vKiBsaW5lIDMzNSwgc2Nzcy9zdHlsZS5zY3NzICovXG4jcG9wdXAgLmNvbnRyb2xsZXIge1xuICBwYWRkaW5nOiA0cHggMjBweCAwIDIwcHg7XG59XG5cbi8qIGxpbmUgMzM4LCBzY3NzL3N0eWxlLnNjc3MgKi9cbiNwb3B1cCAuY29udHJvbGxlciBbZGF0YS1jb250cm9sPVwibXV0ZVwiXSB7XG4gIGRpc3BsYXk6IG5vbmU7XG59XG5cbi8qIGxpbmUgMzQxLCBzY3NzL3N0eWxlLnNjc3MgKi9cbiNwb3B1cCAuY29udHJvbGxlcltkYXRhLXZpZGVvXSBbZGF0YS1jb250cm9sPVwibXV0ZVwiXSB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbn1cblxuLyogbGluZSAzNDUsIHNjc3Mvc3R5bGUuc2NzcyAqL1xuI3BvcHVwIC5jb250cm9sbGVyW2RhdGEtc2luZ2xlXSBpLFxuI3BvcHVwIC5jb250cm9sbGVyW2RhdGEtc2luZ2xlXSBjLFxuI3BvcHVwIC5jb250cm9sbGVyW2RhdGEtc2luZ2xlXSB0LFxuI3BvcHVwIC5jb250cm9sbGVyW2RhdGEtc2luZ2xlXSBkaXZpZGVyLFxuI3BvcHVwIC5jb250cm9sbGVyW2RhdGEtc2luZ2xlXSBbZGF0YS1jb250cm9sPVwicHJldlwiXSxcbiNwb3B1cCAuY29udHJvbGxlcltkYXRhLXNpbmdsZV0gW2RhdGEtY29udHJvbD1cIm5leHRcIl0ge1xuICBkaXNwbGF5OiBub25lO1xufVxuXG4vKiBsaW5lIDM1NCwgc2Nzcy9zdHlsZS5zY3NzICovXG4jcG9wdXAgLmNvbnRyb2xsZXIgPiAqIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICBtYXJnaW4tcmlnaHQ6IDNweDtcbn1cblxuLyogbGluZSAzNTgsIHNjc3Mvc3R5bGUuc2NzcyAqL1xuI3BvcHVwIC5jb250cm9sbGVyIHNwYW4ge1xuICBtYXJnaW46IDBweCAxMnB4O1xufVxuXG4vKiBsaW5lIDM2MSwgc2Nzcy9zdHlsZS5zY3NzICovXG4jcG9wdXAgLmNvbnRyb2xsZXIgaSB7XG4gIHRleHQtYWxpZ246IHJpZ2h0O1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG59XG5cbi8qIGxpbmUgMzY1LCBzY3NzL3N0eWxlLnNjc3MgKi9cbiNwb3B1cCAuY29udHJvbGxlciAqOmxhc3QtY2hpbGQge1xuICBtYXJnaW4tcmlnaHQ6IDIwcHg7XG59XG5cbi8qIGxpbmUgMzY4LCBzY3NzL3N0eWxlLnNjc3MgKi9cbiNwb3B1cCAuY29udHJvbGxlciBzY3JvbGwsXG4jcG9wdXAgLmNvbnRyb2xsZXIgbXV0ZSxcbiNwb3B1cCAuY29udHJvbGxlciB0IHtcbiAgZm9udC1mYW1pbHk6IFwiU2ltcGxpZmljYVwiLCBoZWx2ZXRpY2EsIGFyaWFsLCBzYW5zLXNlcmlmO1xuICB0ZXh0LXRyYW5zZm9ybTogbG93ZXJjYXNlO1xuICBtYXJnaW4tbGVmdDogNXB4O1xufVxuXG4vKiBsaW5lIDM3OSwgc2Nzcy9zdHlsZS5zY3NzICovXG5tYWluICNhYm91dCAudGh1bWIge1xuICB3aWR0aDogMTgwcHg7XG4gIGhlaWdodDogMTgwcHg7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgdG9wOiAwcHg7XG4gIGZsb2F0OiBsZWZ0O1xuICB6LWluZGV4OiAxO1xuICBtYXJnaW4tbGVmdDogLTMwcHg7XG59XG5cbi8qIGxpbmUgMzg3LCBzY3NzL3N0eWxlLnNjc3MgKi9cbm1haW4gI2Fib3V0IC50aHVtYiBpbWcsXG5tYWluICNhYm91dCAudGh1bWIgc3ZnIHtcbiAgdG9wOiAwO1xuICBsZWZ0OiAwO1xufVxuXG4vKiBsaW5lIDM5Mywgc2Nzcy9zdHlsZS5zY3NzICovXG5tYWluICNhYm91dCAudGh1bWIgc3BhbiB7XG4gIG9wYWNpdHk6IDE7XG59XG5cbi8qIGxpbmUgMzk3LCBzY3NzL3N0eWxlLnNjc3MgKi9cbm1haW4gI2Fib3V0IC50aHVtYjpudGgtY2hpbGQoMikge1xuICB6LWluZGV4OiAyO1xuICBsZWZ0OiAxNjVweDtcbn1cblxuLyogbGluZSA0MDEsIHNjc3Mvc3R5bGUuc2NzcyAqL1xubWFpbiAjYWJvdXQgLndyYXBwZXIgPiBwIHNwYW4ge1xuICBtYXJnaW4tcmlnaHQ6IDE1cHg7XG59XG5cbi8qIGxpbmUgNDA1LCBzY3NzL3N0eWxlLnNjc3MgKi9cbm1haW4gI2Fib3V0IC5zbGlkZXMgPiBkaXY6bnRoLWNoaWxkKDIpIC53cmFwcGVyIHtcbiAgbWFyZ2luLXRvcDogLTkwcHg7XG59XG5cbi8qIGxpbmUgNDA3LCBzY3NzL3N0eWxlLnNjc3MgKi9cbm1haW4gI2Fib3V0IC5zbGlkZXMgPiBkaXY6bnRoLWNoaWxkKDIpIC53cmFwcGVyIGgxIHtcbiAgbWFyZ2luLXRvcDogMjAwcHg7XG59XG5cbi8qIGxpbmUgNDE0LCBzY3NzL3N0eWxlLnNjc3MgKi9cbm1haW4gI2xvZ28gc3ZnIHtcbiAgd2lkdGg6IDIyMHB4O1xuICBoZWlnaHQ6IGF1dG87XG4gIG1hcmdpbi1ib3R0b206IDIwcHg7XG59XG5cbi8qIGxpbmUgNDE5LCBzY3NzL3N0eWxlLnNjc3MgKi9cbm1haW4gI2xvZ28gLndyYXBwZXIge1xuICB0b3A6IDM1JTtcbiAgbGVmdDogMzclO1xuICB3aWR0aDogMjIwcHg7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbn1cblxuLyogbGluZSA0MjcsIHNjc3Mvc3R5bGUuc2NzcyAqL1xubWFpbiAjYmxvZyA+ICoge1xuICBkaXNwbGF5OiBibG9jaztcbiAgd2lkdGg6IDEwMCU7XG4gIGhlaWdodDogMTAwJTtcbn1cblxuLyogbGluZSA0MzIsIHNjc3Mvc3R5bGUuc2NzcyAqL1xubWFpbiAjYmxvZyAud3JhcHBlci5jb250cm9sbGVyIHtcbiAgbWluLWhlaWdodDogMDtcbiAgcGFkZGluZy1sZWZ0OiAwO1xufVxuXG4vKiBsaW5lIDQzNywgc2Nzcy9zdHlsZS5zY3NzICovXG5tYWluICNibG9nIC53cmFwcGVyLmNvbnRyb2xsZXJbZGF0YS1jb250cm9sXSAuZXh0ZW5kIGEge1xuICBkaXNwbGF5OiBibG9jaztcbn1cblxuLyogbGluZSA0NDAsIHNjc3Mvc3R5bGUuc2NzcyAqL1xubWFpbiAjYmxvZyAud3JhcHBlci5jb250cm9sbGVyW2RhdGEtY29udHJvbF0gLmV4cGFuZCA+IGEge1xuICBkaXNwbGF5OiBub25lO1xufVxuXG4vKiBsaW5lIDQ0Niwgc2Nzcy9zdHlsZS5zY3NzICovXG5tYWluICNibG9nIC53cmFwcGVyLmNvbnRyb2xsZXIgLmV4dGVuZCBhOmhvdmVyIHNwYW4ge1xuICB3aWR0aDogYXV0bztcbn1cblxuLyogbGluZSA0NTAsIHNjc3Mvc3R5bGUuc2NzcyAqL1xubWFpbiAjYmxvZyAud3JhcHBlci5jb250cm9sbGVyIC5leHRlbmQgc3BhbiB7XG4gIHdpZHRoOiAwcHg7XG4gIG92ZXJmbG93OiBoaWRkZW47XG59XG5cbi8qIGxpbmUgNDU0LCBzY3NzL3N0eWxlLnNjc3MgKi9cbm1haW4gI2Jsb2cgLndyYXBwZXIuY29udHJvbGxlciAuZXh0ZW5kIGEge1xuICBkaXNwbGF5OiBub25lO1xufVxuXG4vKiBsaW5lIDQ1OCwgc2Nzcy9zdHlsZS5zY3NzICovXG5tYWluICNibG9nIC53cmFwcGVyLmNvbnRyb2xsZXIgLmV4cGFuZCB7XG4gIHRvcDogNjVweDtcbn1cblxuLyogbGluZSA0NjIsIHNjc3Mvc3R5bGUuc2NzcyAqL1xubWFpbiAjYmxvZyA+IC5zbGlkZXMgPiBkaXYge1xuICBwYWRkaW5nLWxlZnQ6IDI1JTtcbiAgd2lkdGg6IDgwJTtcbn1cblxuLyogbGluZSA0NjYsIHNjc3Mvc3R5bGUuc2NzcyAqL1xubWFpbiAjYmxvZyAucG9zdCB7XG4gIGZsb2F0OiBsZWZ0O1xuICB3aWR0aDogMTAwcHg7XG4gIGhlaWdodDogMjgwcHg7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgbWFyZ2luOiAwIDIwcHggNDBweCAwO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHRvcDogNDUlO1xufVxuXG4vKiBsaW5lIDQ3NSwgc2Nzcy9zdHlsZS5zY3NzICovXG5tYWluICNibG9nIC5wb3N0OmhvdmVyIGgyIHtcbiAgd2hpdGUtc3BhY2U6IGluaXRpYWw7XG4gIGhlaWdodDogaW5pdGlhbDtcbn1cblxuLyogbGluZSA0ODAsIHNjc3Mvc3R5bGUuc2NzcyAqL1xubWFpbiAjYmxvZyAucG9zdCBhIHtcbiAgZm9udC1zaXplOiAxNXB4O1xufVxuXG4vKiBsaW5lIDQ4Mywgc2Nzcy9zdHlsZS5zY3NzICovXG5tYWluICNibG9nIC5wb3N0IGgyIHtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gIGhlaWdodDogMjNweDtcbn1cblxuLyogbGluZSA0ODgsIHNjc3Mvc3R5bGUuc2NzcyAqL1xubWFpbiAjYmxvZyAucG9zdCBoMiBzcGFuIHtcbiAgZm9udC1mYW1pbHk6IFwiU2ltcGxpZmljYVwiLCBoZWx2ZXRpY2EsIGFyaWFsLCBzYW5zLXNlcmlmO1xuICBsZXR0ZXItc3BhY2luZzogMS42cHg7XG4gIG1hcmdpbi1sZWZ0OiAxMHB4O1xuICB0ZXh0LXRyYW5zZm9ybTogbG93ZXJjYXNlO1xufVxuXG4vKiBsaW5lIDQ5NSwgc2Nzcy9zdHlsZS5zY3NzICovXG5tYWluICNibG9nIC5wb3N0IC5leGNlcnB0IHtcbiAgbWFyZ2luOiAwIC0xNXB4IDBweCAyMHB4O1xufVxuXG4vKiBsaW5lIDUwMCwgc2Nzcy9zdHlsZS5zY3NzICovXG5tYWluIC50aHVtYiB7XG4gIHdpZHRoOiAxODBweDtcbiAgaGVpZ2h0OiAxNjBweDtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBtYXJnaW46IDAgYXV0byAyNXB4IGF1dG87XG59XG5cbi8qIGxpbmUgNTA2LCBzY3NzL3N0eWxlLnNjc3MgKi9cbm1haW4gLnRodW1iOmhvdmVyIHNwYW4ge1xuICBvcGFjaXR5OiAxO1xuICBtYXJnaW46IDUxJSAxNHB4O1xufVxuXG4vKiBsaW5lIDUxMCwgc2Nzcy9zdHlsZS5zY3NzICovXG5tYWluIC50aHVtYiBzdmcge1xuICB6LWluZGV4OiA0O1xuICB3aWR0aDogMTQ1cHg7XG4gIGhlaWdodDogMTYwcHg7XG59XG5cbi8qIGxpbmUgNTE1LCBzY3NzL3N0eWxlLnNjc3MgKi9cbm1haW4gLnRodW1iIHNwYW4ge1xuICB6LWluZGV4OiA1O1xuICBmb250LXNpemU6IDE1cHg7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIG1hcmdpbjogNTglIDE0cHg7XG4gIG9wYWNpdHk6IDA7XG4gIGNvbG9yOiB3aGl0ZTtcbiAgdGV4dC1hbGlnbjogcmlnaHQ7XG59XG5cbi8qIGxpbmUgNTI2LCBzY3NzL3N0eWxlLnNjc3MgKi9cbm1haW4gLnRodW1iIHN2Zyxcbm1haW4gLnRodW1iIGltZyB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgbGVmdDogMDtcbiAgdG9wOiAwO1xufVxuXG4vKiBsaW5lIDUzNiwgc2Nzcy9zdHlsZS5zY3NzICovXG5tYWluICNwcm9qZWN0cyB7XG4gIG1hcmdpbi1sZWZ0OiAxcHg7XG4gIGhlaWdodDogYXV0bztcbn1cblxuLyogbGluZSA1NDMsIHNjc3Mvc3R5bGUuc2NzcyAqL1xubWFpbiAjcHJvamVjdHMgLnNsaWRlcyBzZWN0aW9uLCBtYWluICNwcm9qZWN0c1xuLnNsaWRlcyA+IGRpdiwgbWFpbiAjcHJvamVjdHMgLnNsaWRlc1xudmlkZW8sIG1haW4gI3Byb2plY3RzIC5zbGlkZXMgI2Fib3V0IC50aHVtYiBpbWcsIG1haW4gI2Fib3V0IC50aHVtYiAjcHJvamVjdHMgLnNsaWRlcyBpbWcsIG1haW4gI3Byb2plY3RzIC5zbGlkZXMgI2Fib3V0IC50aHVtYiBzdmcsIG1haW4gI2Fib3V0IC50aHVtYiAjcHJvamVjdHMgLnNsaWRlcyBzdmcsIG1haW4gI3Byb2plY3RzIC5zbGlkZXMgLnNsaWRlciBpbWcsIG1haW4gI3Byb2plY3RzIC5zbGlkZXIgLnNsaWRlcyA+IGRpdiwgbWFpbiAjcHJvamVjdHMgLnNsaWRlcyAuY29udHJvbGxlciBsaSBhLCAuY29udHJvbGxlciBsaSBtYWluICNwcm9qZWN0cyAuc2xpZGVzIGEge1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG59XG5cbi8qIGxpbmUgNTQ5LCBzY3NzL3N0eWxlLnNjc3MgKi9cbm1haW4gI2NvbnRhY3QgLnRoYW5rcyB7XG4gIG1hcmdpbi10b3A6IDE1cHg7XG4gIGRpc3BsYXk6IG5vbmU7XG59XG5cbi8qIGxpbmUgNTUyLCBzY3NzL3N0eWxlLnNjc3MgKi9cbm1haW4gI2NvbnRhY3QgLnRoYW5rcyBoMiB7XG4gIGZvbnQtc2l6ZTogMTYuNXB4O1xufVxuXG4vKiBsaW5lIDU1Niwgc2Nzcy9zdHlsZS5zY3NzICovXG5tYWluICNjb250YWN0IFtkYXRhLWludmFsaWRdIHtcbiAgYm94LXNoYWRvdzogaW5zZXQgMCAtMnB4IDBweCAtMXB4ICM5OTk7XG59XG5cbi8qIGxpbmUgNTYwLCBzY3NzL3N0eWxlLnNjc3MgKi9cbm1haW4gI2NvbnRhY3QgW2RhdGEtc2VudF0gLmNvcHkge1xuICBkaXNwbGF5OiBub25lO1xufVxuXG4vKiBsaW5lIDU2Mywgc2Nzcy9zdHlsZS5zY3NzICovXG5tYWluICNjb250YWN0IFtkYXRhLXNlbnRdIC50aGFua3Mge1xuICBkaXNwbGF5OiBpbml0aWFsO1xufVxuXG4vKiBsaW5lIDU2Nywgc2Nzcy9zdHlsZS5zY3NzICovXG5tYWluICNjb250YWN0IC5leHBhbmQge1xuICB0b3A6IDIwJTtcbn1cblxuLyogbGluZSA1NzAsIHNjc3Mvc3R5bGUuc2NzcyAqL1xubWFpbiAjY29udGFjdCBsYWJlbCB7XG4gIGZvbnQtZmFtaWx5OiBcIlF1ZXN0cmlhbFwiLCBoZWx2ZXRpY2EsIGFyaWFsLCBzYW5zLXNlcmlmO1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICBmbG9hdDogbGVmdDtcbiAgd2lkdGg6IDExMHB4O1xufVxuXG4vKiBsaW5lIDU3Niwgc2Nzcy9zdHlsZS5zY3NzICovXG5tYWluICNjb250YWN0IHNwYW4ge1xuICBtYXJnaW4tcmlnaHQ6IDI1cHg7XG59XG5cbi8qIGxpbmUgNTc5LCBzY3NzL3N0eWxlLnNjc3MgKi9cbm1haW4gI2NvbnRhY3QgaW5wdXQsXG5tYWluICNjb250YWN0IHRleHRhcmVhIHtcbiAgcGFkZGluZzogMDtcbiAgb3V0bGluZTogbm9uZTtcbiAgd2lkdGg6IDI1NXB4O1xuICBiYWNrZ3JvdW5kOiBub25lO1xuICBib3JkZXI6IG5vbmU7XG59XG5cbi8qIGxpbmUgNTg3LCBzY3NzL3N0eWxlLnNjc3MgKi9cbm1haW4gI2NvbnRhY3QgdGV4dGFyZWEge1xuICBoZWlnaHQ6IDEzMHB4O1xuICByZXNpemU6IG5vbmU7XG59XG5cbi8qIGxpbmUgNTg4LCBzY3NzL3N0eWxlLnNjc3MgKi9cbm1haW4gI2NvbnRhY3QgLndyYXBwZXIgZGl2IHtcbiAgbWFyZ2luLWJvdHRvbTogNXB4O1xufVxuXG4vKiBsaW5lIDU5Mywgc2Nzcy9zdHlsZS5zY3NzICovXG5zZWN0aW9uIHtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xufVxuXG4vKiBsaW5lIDU5Niwgc2Nzcy9zdHlsZS5zY3NzICovXG5zZWN0aW9uIC5uYXZpZ2F0ZSB7XG4gIGJvdHRvbTogMjBweCAhaW1wb3J0YW50O1xuICB0b3A6IGluaXRpYWw7XG59XG5cbi8qIGxpbmUgNjAxLCBzY3NzL3N0eWxlLnNjc3MgKi9cbmFzaWRlLFxuI3BvcHVwLFxuc2VjdGlvbixcbiNub3RpY2Uge1xuICB3aWR0aDogOTAuNXZ3O1xuICBoZWlnaHQ6IDEwMHZoO1xuICBsZWZ0OiA5LjV2dztcbiAgdG9wOiAwO1xufVxuXG4vKiBsaW5lIDYxMSwgc2Nzcy9zdHlsZS5zY3NzICovXG4uc2xpZGVyLm5vc2xpZGUge1xuICBtaW4taGVpZ2h0OiAxMDB2aDtcbiAgaGVpZ2h0OiBhdXRvO1xufVxuXG4vKiBsaW5lIDYxNCwgc2Nzcy9zdHlsZS5zY3NzICovXG4uc2xpZGVyLm5vc2xpZGUgLnNsaWRlcyB7XG4gIHBvc2l0aW9uOiBpbml0aWFsO1xufVxuXG4vKiBsaW5lIDYxNiwgc2Nzcy9zdHlsZS5zY3NzICovXG4uc2xpZGVyLm5vc2xpZGUgLnNsaWRlcyA+IGRpdiB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgZGlzcGxheTogYmxvY2s7XG59XG5cbi8qIGxpbmUgNjIyLCBzY3NzL3N0eWxlLnNjc3MgKi9cbi5zbGlkZXIgLnNsaWRlcyB7XG4gIGhlaWdodDogMTAwJTtcbiAgd2lkdGg6IDEwMCU7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgdG9wOiAwO1xuICBsZWZ0OiAwO1xufVxuXG4vKiBsaW5lIDYyOSwgc2Nzcy9zdHlsZS5zY3NzICovXG4uc2xpZGVyIC5zbGlkZXMgPiBkaXYge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIGRpc3BsYXk6IG5vbmU7XG59XG5cbi8qIGxpbmUgNjM0LCBzY3NzL3N0eWxlLnNjc3MgKi9cbi5zbGlkZXIgLnNsaWRlcyA+IFtkYXRhLXNob3ddIHtcbiAgYW5pbWF0aW9uOiBzbGlkZWVudGVyIDQwMG1zIGVhc2UtaW47XG4gIGRpc3BsYXk6IGJsb2NrO1xuICB6LWluZGV4OiAxO1xuICBvdmVyZmxvdzogaGlkZGVuO1xufVxuXG4vKiBsaW5lIDY0MCwgc2Nzcy9zdHlsZS5zY3NzICovXG4uc2xpZGVyIC5zbGlkZXMgW2RhdGEtc2hvd11bZGF0YT1cInNjcm9sbFwiXSxcbi5zbGlkZXIgLnNsaWRlcyBkaXYuc3RhbmRieVtkYXRhPVwic2Nyb2xsXCJdIHtcbiAgb3ZlcmZsb3cteTogc2Nyb2xsO1xuICBvdmVyZmxvdy14OiBoaWRkZW47XG59XG5cbi8qIGxpbmUgNjQ1LCBzY3NzL3N0eWxlLnNjc3MgKi9cbi5zbGlkZXIgLnNsaWRlcyA+IGRpdi5zdGFuZGJ5IHtcbiAgei1pbmRleDogMDtcbiAgZGlzcGxheTogYmxvY2s7XG4gIG92ZXJmbG93OiBoaWRkZW47XG59XG5cbi8qIGxpbmUgNjUzLCBzY3NzL3N0eWxlLnNjc3MgKi9cbi5zbGlkZXIuYWN0aXZlLmV4dGVuZGVkID4gLmNvbnRyb2xsZXIge1xuICBkaXNwbGF5OiBub25lO1xufVxuXG4vKiBsaW5lIDY1NSwgc2Nzcy9zdHlsZS5zY3NzICovXG4uc2xpZGVyLmFjdGl2ZSAuY29udHJvbGxlciBsaSBhIHtcbiAgYW5pbWF0aW9uOiBtZW51ZW50ZXIgMzAwbXMgZWFzZS1pbiBmb3J3YXJkcztcbiAgYW5pbWF0aW9uLWRlbGF5OiAuM3M7XG4gIGxlZnQ6IDIwcHg7XG4gIG9wYWNpdHk6IDA7XG59XG5cbi8qIGxpbmUgNjYxLCBzY3NzL3N0eWxlLnNjc3MgKi9cbi5zbGlkZXIuYWN0aXZlIC5jb250cm9sbGVyIGxpOm50aC1jaGlsZCgyKSBhIHtcbiAgYW5pbWF0aW9uLWRlbGF5OiAuNHM7XG59XG5cbi8qIGxpbmUgNjY0LCBzY3NzL3N0eWxlLnNjc3MgKi9cbi5zbGlkZXIuYWN0aXZlIC5jb250cm9sbGVyIGxpOm50aC1jaGlsZCgzKSBhIHtcbiAgYW5pbWF0aW9uLWRlbGF5OiAuNXM7XG59XG5cbi8qIGxpbmUgNjY3LCBzY3NzL3N0eWxlLnNjc3MgKi9cbi5zbGlkZXIuYWN0aXZlIC5jb250cm9sbGVyIGxpOm50aC1jaGlsZCg0KSBhIHtcbiAgYW5pbWF0aW9uLWRlbGF5OiAuNnM7XG59XG5cbi8qIGxpbmUgNjcyLCBzY3NzL3N0eWxlLnNjc3MgKi9cbnN2Zy5uYXZpZ2F0ZSB7XG4gIGVuYWJsZS1iYWNrZ3JvdW5kOiBuZXcgMCAwIDQwIDQwO1xufVxuXG4vKiBsaW5lIDY3NCwgc2Nzcy9zdHlsZS5zY3NzICovXG5zdmcubmF2aWdhdGUgLnJvdW5kIHtcbiAgZmlsbDogbm9uZTtcbiAgc3Ryb2tlOiAjNDg0ODQ4O1xuICBzdHJva2Utd2lkdGg6IDEuODtcbiAgc3Ryb2tlLWxpbmVjYXA6IHJvdW5kO1xuICBzdHJva2UtbGluZWpvaW46IHJvdW5kO1xufVxuXG4vKiBsaW5lIDY4Miwgc2Nzcy9zdHlsZS5zY3NzICovXG4uY29udHJvbGxlciB7XG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgei1pbmRleDogNDtcbiAgcmlnaHQ6IDA7XG4gIHRvcDogNTAlO1xuICBwYWRkaW5nLWxlZnQ6IDhweDtcbiAgZm9udC1mYW1pbHk6IFwiUXVlc3RyaWFsXCIsIGhlbHZldGljYSwgYXJpYWwsIHNhbnMtc2VyaWY7XG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XG59XG5cbi8qIGxpbmUgNjkwLCBzY3NzL3N0eWxlLnNjc3MgKi9cbi5jb250cm9sbGVyIG11dGUsXG4uY29udHJvbGxlciBzdmcsXG4uY29udHJvbGxlciBzcGFuLFxuLmNvbnRyb2xsZXIgbGkge1xuICBjdXJzb3I6IHBvaW50ZXI7XG59XG5cbi8qIGxpbmUgNjk2LCBzY3NzL3N0eWxlLnNjc3MgKi9cbi5jb250cm9sbGVyIHNwYW4ge1xuICBmb250LXNpemU6IDAuOWVtO1xufVxuXG4vKiBsaW5lIDcwMCwgc2Nzcy9zdHlsZS5zY3NzICovXG4uY29udHJvbGxlciBzcGFuLmNsb3NlIHtcbiAgbWFyZ2luLWxlZnQ6IDE1cHggIWltcG9ydGFudDtcbn1cblxuLyogbGluZSA3MDMsIHNjc3Mvc3R5bGUuc2NzcyAqL1xuLmNvbnRyb2xsZXIgc3Bhbi5uZXh0OmhvdmVyLFxuLmNvbnRyb2xsZXIgc3Bhbi5wcmV2OmhvdmVyLFxuLmNvbnRyb2xsZXIgc3Bhbi5jbG9zZTpob3ZlciB7XG4gIGJvdHRvbTogM3B4ICFpbXBvcnRhbnQ7XG4gIHRvcDogLTNweCAhaW1wb3J0YW50O1xuICBvcGFjaXR5OiAxICFpbXBvcnRhbnQ7XG4gIGFuaW1hdGlvbi1maWxsLW1vZGU6IGluaXRpYWwgIWltcG9ydGFudDtcbn1cblxuLyogbGluZSA3MTEsIHNjc3Mvc3R5bGUuc2NzcyAqL1xuLmNvbnRyb2xsZXIgdWwge1xuICBwYWRkaW5nOiAyMHB4IDdweDtcbn1cblxuLyogbGluZSA3MTQsIHNjc3Mvc3R5bGUuc2NzcyAqL1xuLmNvbnRyb2xsZXIgbGkge1xuICB3aWR0aDogMTVweDtcbiAgaGVpZ2h0OiAyMnB4O1xuICBtYXJnaW46IDVweDtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBiYWNrZ3JvdW5kLXNpemU6IDEwMCU7XG59XG5cbi8qIGxpbmUgNzIwLCBzY3NzL3N0eWxlLnNjc3MgKi9cbi5jb250cm9sbGVyIGxpIGEge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBiYWNrZ3JvdW5kOiB1cmwoXCIuLi9hc3NldHMvaW1hZ2VzL3JlbW90ZS5wbmdcIik7XG59XG5cbi8qIGxpbmUgNzI3LCBzY3NzL3N0eWxlLnNjc3MgKi9cbi5jb250cm9sbGVyIGxpLmFjdGl2ZSB7XG4gIHdpZHRoOiAyM3B4O1xuICBoZWlnaHQ6IDI4cHg7XG4gIG1hcmdpbjogNXB4IDdweCA1cHggMHB4O1xufVxuXG4vKiBsaW5lIDcyOSwgc2Nzcy9zdHlsZS5zY3NzICovXG4uY29udHJvbGxlciBsaS5hY3RpdmUgYSB7XG4gIGJhY2tncm91bmQ6IHVybChcIi4uL2Fzc2V0cy9pbWFnZXMvYWN0aXZlcmVtb3RlLnBuZ1wiKTtcbn1cblxuLyogbGluZSA3MzUsIHNjc3Mvc3R5bGUuc2NzcyAqL1xuLnBseXIgLnBseXJfX2NvbnRyb2xzIHtcbiAgZGlzcGxheTogbm9uZTtcbn1cblxuLyogbGluZSA3MzgsIHNjc3Mvc3R5bGUuc2NzcyAqL1xuLnBseXIgLnBseXJfX3ZpZGVvLWVtYmVkIHtcbiAgaGVpZ2h0OiAxMDB2aDtcbiAgcGFkZGluZy1ib3R0b206IDA7XG59XG5cbi8qIGxpbmUgNzQxLCBzY3NzL3N0eWxlLnNjc3MgKi9cbi5wbHlyIC5wbHlyX192aWRlby1lbWJlZCBpZnJhbWUge1xuICBtYXJnaW4tbGVmdDogNTAlO1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSk7XG59XG5cbi8qIGxpbmUgNzQ3LCBzY3NzL3N0eWxlLnNjc3MgKi9cbiNub3RpY2Uge1xuICBwb3NpdGlvbjogZml4ZWQ7XG4gIHRvcDogMDtcbn1cblxuQG1lZGlhIChtYXgtd2lkdGg6IDc2OHB4KSB7XG4gIC8qIGxpbmUgNzUyLCBzY3NzL3N0eWxlLnNjc3MgKi9cbiAgLndyYXBwZXIsXG4gICNub3RpY2UgcCB7XG4gICAgd2lkdGg6IDUwJTtcbiAgICBsZWZ0OiAzMiU7XG4gIH1cbiAgLyogbGluZSA3NTcsIHNjc3Mvc3R5bGUuc2NzcyAqL1xuICBtYWluICNibG9nIC5wb3N0IHtcbiAgICB3aWR0aDogNjhweDtcbiAgfVxufVxuXG5AbWVkaWEgKG1heC13aWR0aDogNzY4cHgpIGFuZCAob3JpZW50YXRpb246IGxhbmRzY2FwZSkge1xuICAvKiBsaW5lIDc2Miwgc2Nzcy9zdHlsZS5zY3NzICovXG4gIG5hdiB7XG4gICAgZGlzcGxheTogbm9uZTtcbiAgfVxuICAvKiBsaW5lIDc2NSwgc2Nzcy9zdHlsZS5zY3NzICovXG4gIG1haW4gI2xvZ28gLndyYXBwZXIge1xuICAgIHRvcDogMjAlO1xuICB9XG4gIC8qIGxpbmUgNzY4LCBzY3NzL3N0eWxlLnNjc3MgKi9cbiAgLndyYXBwZXIge1xuICAgIG1heC13aWR0aDogMzAwcHg7XG4gICAgdG9wOiA0MCU7XG4gIH1cbiAgLyogbGluZSA3NzIsIHNjc3Mvc3R5bGUuc2NzcyAqL1xuICBhc2lkZSxcbiAgI3BvcHVwLFxuICBzZWN0aW9uLFxuICAjbm90aWNlIHtcbiAgICB3aWR0aDogMTA1LjV2dztcbiAgICBoZWlnaHQ6IDEwMHZoO1xuICAgIGxlZnQ6IC01LjV2dztcbiAgICB0b3A6IDA7XG4gIH1cbiAgLyogbGluZSA3ODEsIHNjc3Mvc3R5bGUuc2NzcyAqL1xuICAjbm90aWNlIHAge1xuICAgIHdpZHRoOiA0MCU7XG4gICAgbGVmdDogNDUlO1xuICB9XG4gIC8qIGxpbmUgNzg1LCBzY3NzL3N0eWxlLnNjc3MgKi9cbiAgLnNsaWRlcyA+IGRpdixcbiAgLnNsaWRlciAuc2xpZGVzID4gZGl2LFxuICBzZWN0aW9uIHtcbiAgICBoZWlnaHQ6IDEyNXZoO1xuICB9XG59XG5cbkBtZWRpYSAob3JpZW50YXRpb246IGxhbmRzY2FwZSkge1xuICAvKiBsaW5lIDc5Miwgc2Nzcy9zdHlsZS5zY3NzICovXG4gICNub3RpY2Uge1xuICAgIGRpc3BsYXk6IG5vbmU7XG4gIH1cbn1cblxuQG1lZGlhIChvcmllbnRhdGlvbjogcG9ydHJhaXQpIHtcbiAgLyogbGluZSA3OTcsIHNjc3Mvc3R5bGUuc2NzcyAqL1xuICBuYXYge1xuICAgIGRpc3BsYXk6IG5vbmU7XG4gIH1cbiAgLyogbGluZSA4MDAsIHNjc3Mvc3R5bGUuc2NzcyAqL1xuICBhc2lkZSxcbiAgI3BvcHVwLFxuICBzZWN0aW9uLFxuICAjbm90aWNlIHtcbiAgICB3aWR0aDogMTE0LjV2dztcbiAgICBoZWlnaHQ6IDEwMHZoO1xuICAgIGxlZnQ6IC0xNC41dnc7XG4gICAgdG9wOiAwO1xuICB9XG4gIC8qIGxpbmUgODA5LCBzY3NzL3N0eWxlLnNjc3MgKi9cbiAgLndyYXBwZXIsXG4gICNub3RpY2UgcCB7XG4gICAgd2lkdGg6IDQwJTtcbiAgICBsZWZ0OiA0NSU7XG4gIH1cbiAgLyogbGluZSA4MTQsIHNjc3Mvc3R5bGUuc2NzcyAqL1xuICBib2R5LFxuICBodG1sIHtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuICB9XG4gIC8qIGxpbmUgODE4LCBzY3NzL3N0eWxlLnNjc3MgKi9cbiAgbWFpbiBzZWN0aW9uIHtcbiAgICBvcGFjaXR5OiAuMDU7XG4gIH1cbn1cbiIsIi8vIEJhc2VkIG9uIFtFcmljIE1leWVyJ3MgcmVzZXQgMi4wXShodHRwOi8vbWV5ZXJ3ZWIuY29tL2VyaWMvdG9vbHMvY3NzL3Jlc2V0L2luZGV4Lmh0bWwpXG4vLyBHbG9iYWwgcmVzZXQgcnVsZXMuXG4vLyBGb3IgbW9yZSBzcGVjaWZpYyByZXNldHMsIHVzZSB0aGUgcmVzZXQgbWl4aW5zIHByb3ZpZGVkIGJlbG93XG5AbWl4aW4gZ2xvYmFsLXJlc2V0IHtcbiAgaHRtbCwgYm9keSwgZGl2LCBzcGFuLCBhcHBsZXQsIG9iamVjdCwgaWZyYW1lLFxuICBoMSwgaDIsIGgzLCBoNCwgaDUsIGg2LCBwLCBibG9ja3F1b3RlLCBwcmUsXG4gIGEsIGFiYnIsIGFjcm9ueW0sIGFkZHJlc3MsIGJpZywgY2l0ZSwgY29kZSxcbiAgZGVsLCBkZm4sIGVtLCBpbWcsIGlucywga2JkLCBxLCBzLCBzYW1wLFxuICBzbWFsbCwgc3RyaWtlLCBzdHJvbmcsIHN1Yiwgc3VwLCB0dCwgdmFyLFxuICBiLCB1LCBpLCBjZW50ZXIsXG4gIGRsLCBkdCwgZGQsIG9sLCB1bCwgbGksXG4gIGZpZWxkc2V0LCBmb3JtLCBsYWJlbCwgbGVnZW5kLFxuICB0YWJsZSwgY2FwdGlvbiwgdGJvZHksIHRmb290LCB0aGVhZCwgdHIsIHRoLCB0ZCxcbiAgYXJ0aWNsZSwgYXNpZGUsIGNhbnZhcywgZGV0YWlscywgZW1iZWQsIFxuICBmaWd1cmUsIGZpZ2NhcHRpb24sIGZvb3RlciwgaGVhZGVyLCBoZ3JvdXAsIFxuICBtZW51LCBuYXYsIG91dHB1dCwgcnVieSwgc2VjdGlvbiwgc3VtbWFyeSxcbiAgdGltZSwgbWFyaywgYXVkaW8sIHZpZGVvIHtcbiAgICBAaW5jbHVkZSByZXNldC1ib3gtbW9kZWw7XG4gICAgQGluY2x1ZGUgcmVzZXQtZm9udDsgfVxuICAvLyBVbmxpa2UgRXJpYydzIG9yaWdpbmFsIHJlc2V0LCB3ZSByZXNldCB0aGUgaHRtbCBlbGVtZW50IHRvIGJlIGNvbXBhdGlibGVcbiAgLy8gd2l0aCB0aGUgdmVydGljYWwgcmh5dGhtIG1peGlucy5cbiAgaHRtbCB7XG4gICAgQGluY2x1ZGUgcmVzZXQtYm9keTsgfVxuICBvbCwgdWwge1xuICAgIEBpbmNsdWRlIHJlc2V0LWxpc3Qtc3R5bGU7IH1cbiAgdGFibGUge1xuICAgIEBpbmNsdWRlIHJlc2V0LXRhYmxlOyB9XG4gIGNhcHRpb24sIHRoLCB0ZCB7XG4gICAgQGluY2x1ZGUgcmVzZXQtdGFibGUtY2VsbDsgfVxuICBxLCBibG9ja3F1b3RlIHtcbiAgICBAaW5jbHVkZSByZXNldC1xdW90YXRpb247IH1cbiAgYSBpbWcge1xuICAgIEBpbmNsdWRlIHJlc2V0LWltYWdlLWFuY2hvci1ib3JkZXI7IH1cbiAgQGluY2x1ZGUgcmVzZXQtaHRtbDU7IH1cblxuLy8gUmVzZXQgYWxsIGVsZW1lbnRzIHdpdGhpbiBzb21lIHNlbGVjdG9yIHNjb3BlLiBUbyByZXNldCB0aGUgc2VsZWN0b3IgaXRzZWxmLFxuLy8gbWl4aW4gdGhlIGFwcHJvcHJpYXRlIHJlc2V0IG1peGluIGZvciB0aGF0IGVsZW1lbnQgdHlwZSBhcyB3ZWxsLiBUaGlzIGNvdWxkIGJlXG4vLyB1c2VmdWwgaWYgeW91IHdhbnQgdG8gc3R5bGUgYSBwYXJ0IG9mIHlvdXIgcGFnZSBpbiBhIGRyYW1hdGljYWxseSBkaWZmZXJlbnQgd2F5LlxuQG1peGluIG5lc3RlZC1yZXNldCB7XG4gIGRpdiwgc3BhbiwgYXBwbGV0LCBvYmplY3QsIGlmcmFtZSxcbiAgaDEsIGgyLCBoMywgaDQsIGg1LCBoNiwgcCwgYmxvY2txdW90ZSwgcHJlLFxuICBhLCBhYmJyLCBhY3JvbnltLCBhZGRyZXNzLCBiaWcsIGNpdGUsIGNvZGUsXG4gIGRlbCwgZGZuLCBlbSwgaW1nLCBpbnMsIGtiZCwgcSwgcywgc2FtcCxcbiAgc21hbGwsIHN0cmlrZSwgc3Ryb25nLCBzdWIsIHN1cCwgdHQsIHZhcixcbiAgYiwgdSwgaSwgY2VudGVyLFxuICBkbCwgZHQsIGRkLCBvbCwgdWwsIGxpLFxuICBmaWVsZHNldCwgZm9ybSwgbGFiZWwsIGxlZ2VuZCxcbiAgdGFibGUsIGNhcHRpb24sIHRib2R5LCB0Zm9vdCwgdGhlYWQsIHRyLCB0aCwgdGQsXG4gIGFydGljbGUsIGFzaWRlLCBjYW52YXMsIGRldGFpbHMsIGVtYmVkLCBcbiAgZmlndXJlLCBmaWdjYXB0aW9uLCBmb290ZXIsIGhlYWRlciwgaGdyb3VwLCBcbiAgbWVudSwgbmF2LCBvdXRwdXQsIHJ1YnksIHNlY3Rpb24sIHN1bW1hcnksXG4gIHRpbWUsIG1hcmssIGF1ZGlvLCB2aWRlbyB7XG4gICAgQGluY2x1ZGUgcmVzZXQtYm94LW1vZGVsO1xuICAgIEBpbmNsdWRlIHJlc2V0LWZvbnQ7IH1cbiAgdGFibGUge1xuICAgIEBpbmNsdWRlIHJlc2V0LXRhYmxlOyB9XG4gIGNhcHRpb24sIHRoLCB0ZCB7XG4gICAgQGluY2x1ZGUgcmVzZXQtdGFibGUtY2VsbDsgfVxuICBxLCBibG9ja3F1b3RlIHtcbiAgICBAaW5jbHVkZSByZXNldC1xdW90YXRpb247IH1cbiAgYSBpbWcge1xuICAgIEBpbmNsdWRlIHJlc2V0LWltYWdlLWFuY2hvci1ib3JkZXI7IH0gfVxuXG4vLyBSZXNldCB0aGUgYm94IG1vZGVsIG1lYXN1cmVtZW50cy5cbkBtaXhpbiByZXNldC1ib3gtbW9kZWwge1xuICBtYXJnaW46IDA7XG4gIHBhZGRpbmc6IDA7XG4gIGJvcmRlcjogMDsgfVxuXG4vLyBSZXNldCB0aGUgZm9udCBhbmQgdmVydGljYWwgYWxpZ25tZW50LlxuQG1peGluIHJlc2V0LWZvbnQge1xuICBmb250OiBpbmhlcml0O1xuICBmb250LXNpemU6IDEwMCU7XG4gIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTsgfVxuXG4vLyBSZXNldHMgdGhlIG91dGxpbmUgd2hlbiBmb2N1cy5cbi8vIEZvciBhY2Nlc3NpYmlsaXR5IHlvdSBuZWVkIHRvIGFwcGx5IHNvbWUgc3R5bGluZyBpbiBpdHMgcGxhY2UuXG5AbWl4aW4gcmVzZXQtZm9jdXMge1xuICBvdXRsaW5lOiAwOyB9XG5cbi8vIFJlc2V0IGEgYm9keSBlbGVtZW50LlxuQG1peGluIHJlc2V0LWJvZHkge1xuICBsaW5lLWhlaWdodDogMTsgfVxuXG4vLyBSZXNldCB0aGUgbGlzdCBzdHlsZSBvZiBhbiBlbGVtZW50LlxuQG1peGluIHJlc2V0LWxpc3Qtc3R5bGUge1xuICBsaXN0LXN0eWxlOiBub25lOyB9XG5cbi8vIFJlc2V0IGEgdGFibGVcbkBtaXhpbiByZXNldC10YWJsZSB7XG4gIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XG4gIGJvcmRlci1zcGFjaW5nOiAwOyB9XG5cbi8vIFJlc2V0IGEgdGFibGUgY2VsbCAoYHRoYCwgYHRkYClcbkBtaXhpbiByZXNldC10YWJsZS1jZWxsIHtcbiAgdGV4dC1hbGlnbjogbGVmdDtcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcbiAgdmVydGljYWwtYWxpZ246IG1pZGRsZTsgfVxuXG4vLyBSZXNldCBhIHF1b3RhdGlvbiAoYHFgLCBgYmxvY2txdW90ZWApXG5AbWl4aW4gcmVzZXQtcXVvdGF0aW9uIHtcbiAgcXVvdGVzOiBub25lO1xuICAmOmJlZm9yZSwgJjphZnRlciB7XG4gICAgY29udGVudDogXCJcIjsgXG4gICAgY29udGVudDogbm9uZTsgfSB9XG5cbi8vIFJlc2V0cyB0aGUgYm9yZGVyLlxuQG1peGluIHJlc2V0LWltYWdlLWFuY2hvci1ib3JkZXIge1xuICBib3JkZXI6IG5vbmU7IH1cblxuLy8gVW5yZWNvZ25pemVkIGVsZW1lbnRzIGFyZSBkaXNwbGF5ZWQgaW5saW5lLlxuLy8gVGhpcyByZXNldCBwcm92aWRlcyBhIGJhc2ljIHJlc2V0IGZvciBibG9jayBodG1sNSBlbGVtZW50c1xuLy8gc28gdGhleSBhcmUgcmVuZGVyZWQgY29ycmVjdGx5IGluIGJyb3dzZXJzIHRoYXQgZG9uJ3QgcmVjb2duaXplIHRoZW1cbi8vIGFuZCByZXNldCBpbiBicm93c2VycyB0aGF0IGhhdmUgZGVmYXVsdCBzdHlsZXMgZm9yIHRoZW0uXG5AbWl4aW4gcmVzZXQtaHRtbDUge1xuICAje2VsZW1lbnRzLW9mLXR5cGUoaHRtbDUtYmxvY2spfSB7XG4gICAgZGlzcGxheTogYmxvY2s7IH0gfVxuXG4vLyBSZXNldHMgdGhlIGRpc3BsYXkgb2YgaW5saW5lIGFuZCBibG9jayBlbGVtZW50cyB0byB0aGVpciBkZWZhdWx0IGRpc3BsYXlcbi8vIGFjY29yZGluZyB0byB0aGVpciB0YWcgdHlwZS4gRWxlbWVudHMgdGhhdCBoYXZlIGEgZGVmYXVsdCBkaXNwbGF5IHRoYXQgdmFyaWVzIGFjcm9zc1xuLy8gdmVyc2lvbnMgb2YgaHRtbCBvciBicm93c2VyIGFyZSBub3QgaGFuZGxlZCBoZXJlLCBidXQgdGhpcyBjb3ZlcnMgdGhlIDkwJSB1c2UgY2FzZS5cbi8vIFVzYWdlIEV4YW1wbGU6XG4vL1xuLy8gICAgIC8vIFR1cm4gb2ZmIHRoZSBkaXNwbGF5IGZvciBib3RoIG9mIHRoZXNlIGNsYXNzZXNcbi8vICAgICAudW5yZWdpc3RlcmVkLW9ubHksIC5yZWdpc3RlcmVkLW9ubHlcbi8vICAgICAgIGRpc3BsYXk6IG5vbmVcbi8vICAgICAvLyBOb3cgdHVybiBvbmx5IG9uZSBvZiB0aGVtIGJhY2sgb24gZGVwZW5kaW5nIG9uIHNvbWUgb3RoZXIgY29udGV4dC5cbi8vICAgICBib2R5LnJlZ2lzdGVyZWRcbi8vICAgICAgICtyZXNldC1kaXNwbGF5KFwiLnJlZ2lzdGVyZWQtb25seVwiKVxuLy8gICAgIGJvZHkudW5yZWdpc3RlcmVkXG4vLyAgICAgICArcmVzZXQtZGlzcGxheShcIi51bnJlZ2lzdGVyZWQtb25seVwiKVxuQG1peGluIHJlc2V0LWRpc3BsYXkoJHNlbGVjdG9yOiBcIlwiLCAkaW1wb3J0YW50OiBmYWxzZSkge1xuICAje2FwcGVuZC1zZWxlY3RvcihlbGVtZW50cy1vZi10eXBlKFwiaW5saW5lXCIpLCAkc2VsZWN0b3IpfSB7XG4gICAgQGlmICRpbXBvcnRhbnQge1xuICAgICAgZGlzcGxheTogaW5saW5lICFpbXBvcnRhbnQ7IH1cbiAgICBAZWxzZSB7XG4gICAgICBkaXNwbGF5OiBpbmxpbmU7IH0gfVxuICAje2FwcGVuZC1zZWxlY3RvcihlbGVtZW50cy1vZi10eXBlKFwiYmxvY2tcIiksICRzZWxlY3Rvcil9IHtcbiAgICBAaWYgJGltcG9ydGFudCB7XG4gICAgICBkaXNwbGF5OiBibG9jayAhaW1wb3J0YW50OyB9XG4gICAgQGVsc2Uge1xuICAgICAgZGlzcGxheTogYmxvY2s7IH0gfSB9XG4iLCIuY2xlYXJmaXggeyBjbGVhcjpib3RoOyBkaXNwbGF5OmJsb2NrOyBmbG9hdDpub25lOyB9XG5hIHsgY29sb3I6aW5oZXJpdDsgdGV4dC1kZWNvcmF0aW9uOm5vbmU7IGN1cnNvcjogcG9pbnRlcjsgfSIsIiVmb250c21vb3RoIHtcbiAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQgIWltcG9ydGFudDtcbiAgLW1vei1vc3gtZm9udC1zbW9vdGhpbmc6IGdyYXlzY2FsZSAhaW1wb3J0YW50O1xuICBmb250LXNtb290aGluZzogYW50aWFsaXNlZCAhaW1wb3J0YW50O1xuXG4gIC13ZWJraXQtdGV4dC1yZW5kZXJpbmc6IGdlb21ldHJpY1ByZWNpc2lvbiAhaW1wb3J0YW50O1xuICAtbW96LXRleHQtcmVuZGVyaW5nOiBnZW9tZXRyaWNQcmVjaXNpb24gIWltcG9ydGFudDtcbiAgdGV4dC1yZW5kZXJpbmc6IGdlb21ldHJpY1ByZWNpc2lvbiAhaW1wb3J0YW50O1xufVxuXG4lZnVsbHNjcmVlbiB7XG4gIGhlaWdodDogMTAwdmg7XG4gIHdpZHRoOiAxMDB2dztcbn1cblxuJXJlYWxlc3RhdGUge1xuICBoZWlnaHQ6IDEwMCU7XG4gIHdpZHRoOiAxMDAlO1xuICBvdmVyZmxvdzogaGlkZGVuO1xufSIsIkBrZXlmcmFtZXMgc2xpZGVlbnRlciB7XG4gIGZyb20ge1xuICAgIHRvcDoyMHB4OyBvcGFjaXR5OjA7XG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHBlcnNwZWN0aXZlKDQwMHB4KVxuICAgICAgICAgICAgICAgdHJhbnNsYXRlM2QoMHB4LDBweCwwcHgpXG4gICAgICAgICAgICAgICBzY2FsZTNkKDEsMSwxKVxuICAgICAgICAgICAgICAgcm90YXRlM2QoMywwLDAsM2RlZyk7XG4gICAgLW1zLXRyYW5zZm9ybTogcGVyc3BlY3RpdmUoNDAwcHgpXG4gICAgICAgICAgICAgICB0cmFuc2xhdGUzZCgwcHgsMHB4LDBweClcbiAgICAgICAgICAgICAgIHNjYWxlM2QoMSwxLDEpXG4gICAgICAgICAgICAgICByb3RhdGUzZCgzLDAsMCwzZGVnKTtcbiAgICB0cmFuc2Zvcm06IHBlcnNwZWN0aXZlKDQwMHB4KVxuICAgICAgICAgICAgICAgdHJhbnNsYXRlM2QoMHB4LDBweCwwcHgpXG4gICAgICAgICAgICAgICBzY2FsZTNkKDEsMSwxKVxuICAgICAgICAgICAgICAgcm90YXRlM2QoMywwLDAsM2RlZyk7XG4gIH1cbiAgdG8ge1xuICAgIHRvcDowcHg7IG9wYWNpdHk6MTtcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcGVyc3BlY3RpdmUoNDAwcHgpXG4gICAgICAgICAgICAgICB0cmFuc2xhdGUzZCgwcHgsMHB4LDBweClcbiAgICAgICAgICAgICAgIHNjYWxlM2QoMSwxLDEpXG4gICAgICAgICAgICAgICByb3RhdGUzZCgzLDAsMCwwZGVnKTtcbiAgICAtbXMtdHJhbnNmb3JtOiBwZXJzcGVjdGl2ZSg0MDBweClcbiAgICAgICAgICAgICAgIHRyYW5zbGF0ZTNkKDBweCwwcHgsMHB4KVxuICAgICAgICAgICAgICAgc2NhbGUzZCgxLDEsMSlcbiAgICAgICAgICAgICAgIHJvdGF0ZTNkKDMsMCwwLDBkZWcpO1xuICAgIHRyYW5zZm9ybTogcGVyc3BlY3RpdmUoNDAwcHgpXG4gICAgICAgICAgICAgICB0cmFuc2xhdGUzZCgwcHgsMHB4LDBweClcbiAgICAgICAgICAgICAgIHNjYWxlM2QoMSwxLDEpXG4gICAgICAgICAgICAgICByb3RhdGUzZCgzLDAsMCwwZGVnKTtcbiAgfVxufVxuQGtleWZyYW1lcyBzbGlkZW91dCB7XG4gIGZyb20geyB0b3A6MHB4OyBvcGFjaXR5OjE7IH1cbiAgdG8geyB0b3A6MjBweDsgb3BhY2l0eTowOyB9XG59XG5ALXdlYmtpdC1rZXlmcmFtZXMgc2xpZGVlbnRlciB7XG4gIGZyb20ge1xuICAgIHRvcDoyMHB4OyBvcGFjaXR5OjA7XG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHBlcnNwZWN0aXZlKDQwMHB4KVxuICAgICAgICAgICAgICAgdHJhbnNsYXRlM2QoMHB4LDBweCwwcHgpXG4gICAgICAgICAgICAgICBzY2FsZTNkKDEsMSwxKVxuICAgICAgICAgICAgICAgcm90YXRlM2QoMywwLDAsM2RlZyk7XG4gICAgLW1zLXRyYW5zZm9ybTogcGVyc3BlY3RpdmUoNDAwcHgpXG4gICAgICAgICAgICAgICB0cmFuc2xhdGUzZCgwcHgsMHB4LDBweClcbiAgICAgICAgICAgICAgIHNjYWxlM2QoMSwxLDEpXG4gICAgICAgICAgICAgICByb3RhdGUzZCgzLDAsMCwzZGVnKTtcbiAgICB0cmFuc2Zvcm06IHBlcnNwZWN0aXZlKDQwMHB4KVxuICAgICAgICAgICAgICAgdHJhbnNsYXRlM2QoMHB4LDBweCwwcHgpXG4gICAgICAgICAgICAgICBzY2FsZTNkKDEsMSwxKVxuICAgICAgICAgICAgICAgcm90YXRlM2QoMywwLDAsM2RlZyk7XG4gIH1cbiAgdG8ge1xuICAgIHRvcDowcHg7IG9wYWNpdHk6MTtcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogcGVyc3BlY3RpdmUoNDAwcHgpXG4gICAgICAgICAgICAgICB0cmFuc2xhdGUzZCgwcHgsMHB4LDBweClcbiAgICAgICAgICAgICAgIHNjYWxlM2QoMSwxLDEpXG4gICAgICAgICAgICAgICByb3RhdGUzZCgzLDAsMCwwZGVnKTtcbiAgICAtbXMtdHJhbnNmb3JtOiBwZXJzcGVjdGl2ZSg0MDBweClcbiAgICAgICAgICAgICAgIHRyYW5zbGF0ZTNkKDBweCwwcHgsMHB4KVxuICAgICAgICAgICAgICAgc2NhbGUzZCgxLDEsMSlcbiAgICAgICAgICAgICAgIHJvdGF0ZTNkKDMsMCwwLDBkZWcpO1xuICAgIHRyYW5zZm9ybTogcGVyc3BlY3RpdmUoNDAwcHgpXG4gICAgICAgICAgICAgICB0cmFuc2xhdGUzZCgwcHgsMHB4LDBweClcbiAgICAgICAgICAgICAgIHNjYWxlM2QoMSwxLDEpXG4gICAgICAgICAgICAgICByb3RhdGUzZCgzLDAsMCwwZGVnKTtcbiAgfVxufVxuQC13ZWJraXQta2V5ZnJhbWVzIHNsaWRlb3V0IHtcbiAgZnJvbSB7IHRvcDowcHg7IG9wYWNpdHk6MTsgfVxuICB0byB7IHRvcDoyMHB4OyBvcGFjaXR5OjA7IH1cbn1cblxuQGtleWZyYW1lcyBtZW51ZW50ZXIge1xuICBmcm9tIHtsZWZ0OjIwcHg7IG9wYWNpdHk6MDt9XG4gIHRvIHtsZWZ0OjBweDsgb3BhY2l0eToxO31cbn1cbkAtd2Via2l0LWtleWZyYW1lcyBtZW51ZW50ZXIge1xuICBmcm9tIHtsZWZ0OjIwcHg7IG9wYWNpdHk6MDt9XG4gIHRvIHtsZWZ0OjBweDsgb3BhY2l0eToxO31cbn1cblxuLmFuaW0ge1xuICAtd2Via2l0LXRyYW5zaXRpb24tZHVyYXRpb246IDMwMG1zO1xuICAtd2Via2l0LXRyYW5zaXRpb24tcHJvcGVydHk6IGFsbDtcbiAgLXdlYmtpdC1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlaW47XG4gIC1tb3otdHJhbnNpdGlvbi1kdXJhdGlvbjogMzAwbXM7XG4gIC1tb3otdHJhbnNpdGlvbi1wcm9wZXJ0eTogYWxsO1xuICAtbW96LWFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGVhc2VpbjtcbiAgLW8tdHJhbnNpdGlvbi1kdXJhdGlvbjogMzAwbXM7XG4gIC1vLXRyYW5zaXRpb24tcHJvcGVydHk6IGFsbDtcbiAgLW8tYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZWluO1xufSIsIiRmb250LXN0YWNrOiAnU2ltcGxpZmljYScsIGhlbHZldGljYSwgYXJpYWwsIHNhbnMtc2VyaWY7XG4kZm9udC1zdGFjay1oZXJvOiAnUXVlc3RyaWFsJywgaGVsdmV0aWNhLCBhcmlhbCwgc2Fucy1zZXJpZjtcblxuQGZvbnQtZmFjZSB7XG4gICAgZm9udC1mYW1pbHk6ICdTaW1wbGlmaWNhJztcbiAgICBzcmM6IHVybChcIi4uL2Fzc2V0cy9mb250cy9zaW1wbGlmaWNhX3R5cGVmYWNlLmVvdFwiKTtcbiAgICBzcmM6IHVybChcIi4uL2Fzc2V0cy9mb250cy9zaW1wbGlmaWNhX3R5cGVmYWNlLmVvdD8jaWVmaXhcIikgZm9ybWF0KFwiZW1iZWRkZWQtb3BlbnR5cGVcIiksXG4gICAgICAgICB1cmwoXCIuLi9hc3NldHMvZm9udHMvc2ltcGxpZmljYV90eXBlZmFjZS5vdGZcIikgZm9ybWF0KFwib3BlbnR5cGVcIiksXG4gICAgICAgICB1cmwoXCIuLi9hc3NldHMvZm9udHMvc2ltcGxpZmljYV90eXBlZmFjZS53b2ZmMlwiKSBmb3JtYXQoXCJ3b2ZmMlwiKSxcbiAgICAgICAgIHVybChcIi4uL2Fzc2V0cy9mb250cy9zaW1wbGlmaWNhX3R5cGVmYWNlLndvZmZcIikgZm9ybWF0KFwid29mZlwiKSxcbiAgICAgICAgIHVybChcIi4uL2Fzc2V0cy9mb250cy9zaW1wbGlmaWNhX3R5cGVmYWNlLnR0ZlwiKSBmb3JtYXQoXCJ0cnVldHlwZVwiKSxcbiAgICAgICAgIHVybChcIi4uL2Fzc2V0cy9mb250cy9zaW1wbGlmaWNhX3R5cGVmYWNlLnN2ZyNQbGFjYXJkTVRcIikgZm9ybWF0KFwic3ZnXCIpO1xuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xuICAgIGZvbnQtc3R5bGU6IG5vcm1hbFxufSIsIkBpbXBvcnQgXCIuLi9zdXBwb3J0XCI7XG5cbi8vIFRoaXMgbWl4aW4gcHJvdmlkZXMgYmFzaWMgc3VwcG9ydCBmb3IgQ1NTMyBwcm9wZXJ0aWVzIGFuZFxuLy8gdGhlaXIgY29ycmVzcG9uZGluZyBleHBlcmltZW50YWwgQ1NTMiBwcm9wZXJ0aWVzIHdoZW5cbi8vIHRoZSBpbXBsZW1lbnRhdGlvbnMgYXJlIGlkZW50aWNhbCBleGNlcHQgZm9yIHRoZSBwcm9wZXJ0eVxuLy8gcHJlZml4LlxuQG1peGluIGV4cGVyaW1lbnRhbCgkcHJvcGVydHksICR2YWx1ZSxcbiAgJG1veiAgICAgIDogJGV4cGVyaW1lbnRhbC1zdXBwb3J0LWZvci1tb3ppbGxhLFxuICAkd2Via2l0ICAgOiAkZXhwZXJpbWVudGFsLXN1cHBvcnQtZm9yLXdlYmtpdCxcbiAgJG8gICAgICAgIDogJGV4cGVyaW1lbnRhbC1zdXBwb3J0LWZvci1vcGVyYSxcbiAgJG1zICAgICAgIDogJGV4cGVyaW1lbnRhbC1zdXBwb3J0LWZvci1taWNyb3NvZnQsXG4gICRraHRtbCAgICA6ICRleHBlcmltZW50YWwtc3VwcG9ydC1mb3Ita2h0bWwsXG4gICRvZmZpY2lhbCA6IHRydWVcbikge1xuICBAaWYgJHdlYmtpdCAgYW5kICRleHBlcmltZW50YWwtc3VwcG9ydC1mb3Itd2Via2l0ICAgIHsgLXdlYmtpdC0jeyRwcm9wZXJ0eX0gOiAkdmFsdWU7IH1cbiAgQGlmICRraHRtbCAgIGFuZCAkZXhwZXJpbWVudGFsLXN1cHBvcnQtZm9yLWtodG1sICAgICB7ICAta2h0bWwtI3skcHJvcGVydHl9IDogJHZhbHVlOyB9XG4gIEBpZiAkbW96ICAgICBhbmQgJGV4cGVyaW1lbnRhbC1zdXBwb3J0LWZvci1tb3ppbGxhICAgeyAgICAtbW96LSN7JHByb3BlcnR5fSA6ICR2YWx1ZTsgfVxuICBAaWYgJG1zICAgICAgYW5kICRleHBlcmltZW50YWwtc3VwcG9ydC1mb3ItbWljcm9zb2Z0IHsgICAgIC1tcy0jeyRwcm9wZXJ0eX0gOiAkdmFsdWU7IH1cbiAgQGlmICRvICAgICAgIGFuZCAkZXhwZXJpbWVudGFsLXN1cHBvcnQtZm9yLW9wZXJhICAgICB7ICAgICAgLW8tI3skcHJvcGVydHl9IDogJHZhbHVlOyB9XG4gIEBpZiAkb2ZmaWNpYWwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyAgICAgICAgICN7JHByb3BlcnR5fSA6ICR2YWx1ZTsgfVxufVxuXG4vLyBTYW1lIGFzIGV4cGVyaW1lbnRhbCgpLCBidXQgZm9yIGNhc2VzIHdoZW4gdGhlIHByb3BlcnR5IGlzIHRoZSBzYW1lIGFuZCB0aGUgdmFsdWUgaXMgdmVuZG9yaXplZFxuQG1peGluIGV4cGVyaW1lbnRhbC12YWx1ZSgkcHJvcGVydHksICR2YWx1ZSxcbiAgJG1veiAgICAgIDogJGV4cGVyaW1lbnRhbC1zdXBwb3J0LWZvci1tb3ppbGxhLFxuICAkd2Via2l0ICAgOiAkZXhwZXJpbWVudGFsLXN1cHBvcnQtZm9yLXdlYmtpdCxcbiAgJG8gICAgICAgIDogJGV4cGVyaW1lbnRhbC1zdXBwb3J0LWZvci1vcGVyYSxcbiAgJG1zICAgICAgIDogJGV4cGVyaW1lbnRhbC1zdXBwb3J0LWZvci1taWNyb3NvZnQsXG4gICRraHRtbCAgICA6ICRleHBlcmltZW50YWwtc3VwcG9ydC1mb3Ita2h0bWwsXG4gICRvZmZpY2lhbCA6IHRydWVcbikge1xuICBAaWYgJHdlYmtpdCAgYW5kICRleHBlcmltZW50YWwtc3VwcG9ydC1mb3Itd2Via2l0ICAgIHsgI3skcHJvcGVydHl9IDogLXdlYmtpdC0jeyR2YWx1ZX07IH1cbiAgQGlmICRraHRtbCAgIGFuZCAkZXhwZXJpbWVudGFsLXN1cHBvcnQtZm9yLWtodG1sICAgICB7ICN7JHByb3BlcnR5fSA6ICAta2h0bWwtI3skdmFsdWV9OyB9XG4gIEBpZiAkbW96ICAgICBhbmQgJGV4cGVyaW1lbnRhbC1zdXBwb3J0LWZvci1tb3ppbGxhICAgeyAjeyRwcm9wZXJ0eX0gOiAgICAtbW96LSN7JHZhbHVlfTsgfVxuICBAaWYgJG1zICAgICAgYW5kICRleHBlcmltZW50YWwtc3VwcG9ydC1mb3ItbWljcm9zb2Z0IHsgI3skcHJvcGVydHl9IDogICAgIC1tcy0jeyR2YWx1ZX07IH1cbiAgQGlmICRvICAgICAgIGFuZCAkZXhwZXJpbWVudGFsLXN1cHBvcnQtZm9yLW9wZXJhICAgICB7ICN7JHByb3BlcnR5fSA6ICAgICAgLW8tI3skdmFsdWV9OyB9XG4gIEBpZiAkb2ZmaWNpYWwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyAjeyRwcm9wZXJ0eX0gOiAgICAgICAgICN7JHZhbHVlfTsgfVxufVxuIiwiQGltcG9ydCBcInNoYXJlZFwiO1xuXG4vLyBAZG9jIG9mZlxuLy8gTm90ZSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBTYWZhcmksIENocm9tZSwgYW5kIEZpcmVmb3ggYWxsIHN1cHBvcnQgM0QgdHJhbnNmb3Jtcy4gSG93ZXZlcixcbi8vIG9ubHkgaW4gdGhlIG1vc3QgcmVjZW50IGJ1aWxkcy4gWW91IHNob3VsZCBhbHNvIHByb3ZpZGUgZmFsbGJhY2sgMmQgc3VwcG9ydCBmb3Jcbi8vIE9wZXJhIGFuZCBJRS4gSUUxMCBpcyBzbGF0ZWQgdG8gaGF2ZSAzZCBlbmFibGVkLCBidXQgaXMgY3VycmVudGx5IHVucmVsZWFzZWQuXG4vLyBUbyBtYWtlIHRoYXQgZWFzeSwgYWxsIDJEIHRyYW5zZm9ybXMgaW5jbHVkZSBhbiBicm93c2VyLXRhcmdldGluZyB0b2dnbGUgKCRvbmx5M2QpXG4vLyB0byBzd2l0Y2ggYmV0d2VlbiB0aGUgdHdvIHN1cHBvcnQgbGlzdHMuIFRoZSB0b2dnbGUgZGVmYXVsdHMgdG8gJ2ZhbHNlJyAoMkQpLFxuLy8gYW5kIGFsc28gYWNjZXB0cyAndHJ1ZScgKDNEKS4gQ3VycmVudGx5IHRoZSBsaXN0cyBhcmUgYXMgZm9sbG93czpcbi8vIDJEOiBNb3ppbGxhLCBXZWJraXQsIE9wZXJhLCBPZmZpY2lhbFxuLy8gM0Q6IFdlYmtpdCwgRmlyZWZveC5cblxuLy8gQXZhaWxhYmxlIFRyYW5zZm9ybXMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyAtIFNjYWxlICgyZCBhbmQgM2QpXG4vLyAtIFJvdGF0ZSAoMmQgYW5kIDNkKVxuLy8gLSBUcmFuc2xhdGUgKDJkIGFuZCAzZClcbi8vIC0gU2tldyAoMmQgb25seSlcblxuLy8gVHJhbnNmb3JtIFBhcmFtZXRlcnMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyAtIFRyYW5zZm9ybSBPcmlnaW4gKDJkIGFuZCAzZClcbi8vIC0gUGVyc3BlY3RpdmUgKDNkKVxuLy8gLSBQZXJzcGVjdGl2ZSBPcmlnaW4gKDNkKVxuLy8gLSBUcmFuc2Zvcm0gU3R5bGUgKDNkKVxuLy8gLSBCYWNrZmFjZSBWaXNpYmlsaXR5ICgzZClcblxuLy8gTWl4aW5zIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyB0cmFuc2Zvcm0tb3JpZ2luXG4vLyAgLSBzaG9ydGN1dHM6ICB0cmFuc2Zvcm0tb3JpZ2luMmQsIHRyYW5zZm9ybS1vcmlnaW4zZFxuLy8gIC0gaGVscGVyczogICAgYXBwbHktb3JpZ2luXG4vLyB0cmFuc2Zvcm1cbi8vICAtIHNob3J0Y3V0czogIHRyYW5zZm9ybTJkLCB0cmFuc2Zvcm0zZFxuLy8gIC0gaGVscGVyczogICAgc2ltcGxlLXRyYW5zZm9ybSwgY3JlYXRlLXRyYW5zZm9ybVxuLy8gcGVyc3BlY3RpdmVcbi8vICAtIGhlbHBlcnM6ICAgIHBlcnNwZWN0aXZlLW9yaWdpblxuLy8gdHJhbnNmb3JtLXN0eWxlXG4vLyBiYWNrZmFjZS12aXNpYmlsaXR5XG4vLyBzY2FsZVxuLy8gIC0gc2hvcnRjdXRzOiAgc2NhbGVYLCBzY2FsZVksIHNjYWxlWiwgc2NhbGUzZFxuLy8gcm90YXRlXG4vLyAgLSBzaG9ydGN1dHM6ICByb3RhdGVYLCByb3RhdGVZLCByb3RhdGUzZFxuLy8gdHJhbnNsYXRlXG4vLyAgLSBzaG9ydGN1dHM6ICB0cmFuc2xhdGVYLCB0cmFuc2xhdGVZLCB0cmFuc2xhdGVaLCB0cmFuc2xhdGUzZFxuLy8gc2tld1xuLy8gIC0gc2hvcnRjdXRzOiAgc2tld1gsIHNrZXdZXG5cbi8vIERlZmF1bHRzIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gQGRvYyBvblxuXG4vLyBUaGUgZGVmYXVsdCB4LW9yaWdpbiBmb3IgdHJhbnNmb3Jtc1xuJGRlZmF1bHQtb3JpZ2luLXggICAgOiA1MCUgICAgICAgICAgICAgICAgICAgIWRlZmF1bHQ7XG4vLyBUaGUgZGVmYXVsdCB5LW9yaWdpbiBmb3IgdHJhbnNmb3Jtc1xuJGRlZmF1bHQtb3JpZ2luLXkgICAgOiA1MCUgICAgICAgICAgICAgICAgICAgIWRlZmF1bHQ7XG4vLyBUaGUgZGVmYXVsdCB6LW9yaWdpbiBmb3IgdHJhbnNmb3Jtc1xuJGRlZmF1bHQtb3JpZ2luLXogICAgOiA1MCUgICAgICAgICAgICAgICAgICAgIWRlZmF1bHQ7XG5cblxuLy8gVGhlIGRlZmF1bHQgeC1tdWx0aXBsaWVyIGZvciBzY2FsaW5nXG4kZGVmYXVsdC1zY2FsZS14ICAgICA6IDEuMjUgICAgICAgICAgICAgICAgICAhZGVmYXVsdDtcbi8vIFRoZSBkZWZhdWx0IHktbXVsdGlwbGllciBmb3Igc2NhbGluZ1xuJGRlZmF1bHQtc2NhbGUteSAgICAgOiAkZGVmYXVsdC1zY2FsZS14ICAgICAgIWRlZmF1bHQ7XG4vLyBUaGUgZGVmYXVsdCB6LW11bHRpcGxpZXIgZm9yIHNjYWxpbmdcbiRkZWZhdWx0LXNjYWxlLXogICAgIDogJGRlZmF1bHQtc2NhbGUteCAgICAgICFkZWZhdWx0O1xuXG5cbi8vIFRoZSBkZWZhdWx0IGFuZ2xlIGZvciByb3RhdGlvbnNcbiRkZWZhdWx0LXJvdGF0ZSAgICAgIDogNDVkZWcgICAgICAgICAgICAgICAgICFkZWZhdWx0O1xuXG5cbi8vIFRoZSBkZWZhdWx0IHgtdmVjdG9yIGZvciB0aGUgYXhpcyBvZiAzZCByb3RhdGlvbnNcbiRkZWZhdWx0LXZlY3Rvci14ICAgIDogMSAgICAgICAgICAgICAgICAgICAgICFkZWZhdWx0O1xuLy8gVGhlIGRlZmF1bHQgeS12ZWN0b3IgZm9yIHRoZSBheGlzIG9mIDNkIHJvdGF0aW9uc1xuJGRlZmF1bHQtdmVjdG9yLXkgICAgOiAxICAgICAgICAgICAgICAgICAgICAgIWRlZmF1bHQ7XG4vLyBUaGUgZGVmYXVsdCB6LXZlY3RvciBmb3IgdGhlIGF4aXMgb2YgM2Qgcm90YXRpb25zXG4kZGVmYXVsdC12ZWN0b3IteiAgICA6IDEgICAgICAgICAgICAgICAgICAgICAhZGVmYXVsdDtcblxuXG4vLyBUaGUgZGVmYXVsdCB4LWxlbmd0aCBmb3IgdHJhbnNsYXRpb25zXG4kZGVmYXVsdC10cmFuc2xhdGUteCA6IDFlbSAgICAgICAgICAgICAgICAgICAhZGVmYXVsdDtcbi8vIFRoZSBkZWZhdWx0IHktbGVuZ3RoIGZvciB0cmFuc2xhdGlvbnNcbiRkZWZhdWx0LXRyYW5zbGF0ZS15IDogJGRlZmF1bHQtdHJhbnNsYXRlLXggICFkZWZhdWx0O1xuLy8gVGhlIGRlZmF1bHQgei1sZW5ndGggZm9yIHRyYW5zbGF0aW9uc1xuJGRlZmF1bHQtdHJhbnNsYXRlLXogOiAkZGVmYXVsdC10cmFuc2xhdGUteCAgIWRlZmF1bHQ7XG5cblxuLy8gVGhlIGRlZmF1bHQgeC1hbmdsZSBmb3Igc2tld2luZ1xuJGRlZmF1bHQtc2tldy14ICAgICAgOiA1ZGVnICAgICAgICAgICAgICAgICAgIWRlZmF1bHQ7XG4vLyBUaGUgZGVmYXVsdCB5LWFuZ2xlIGZvciBza2V3aW5nXG4kZGVmYXVsdC1za2V3LXkgICAgICA6IDVkZWcgICAgICAgICAgICAgICAgICAhZGVmYXVsdDtcblxuXG4vLyAqKlRyYW5zZm9ybS1vcmlnaW4qKlxuLy8gVHJhbnNmb3JtLW9yaWdpbiBzZW50IGFzIGEgY29tcGxldGUgc3RyaW5nXG4vL1xuLy8gICAgIEBpbmNsdWRlIGFwcGx5LW9yaWdpbiggb3JpZ2luIFssIDNELW9ubHkgXSApXG4vL1xuLy8gd2hlcmUgJ29yaWdpbicgaXMgYSBzcGFjZSBzZXBhcmF0ZWQgbGlzdCBjb250YWluaW5nIDEtMyAoeC95L3opIGNvb3JkaW5hdGVzXG4vLyBpbiBwZXJjZW50YWdlcywgYWJzb2x1dGUgKHB4LCBjbSwgaW4sIGVtIGV0Yy4uKSBvciByZWxhdGl2ZVxuLy8gKGxlZnQsIHRvcCwgcmlnaHQsIGJvdHRvbSwgY2VudGVyKSB1bml0c1xuLy9cbi8vIEBwYXJhbSBvbmx5M2QgU2V0IHRoaXMgdG8gdHJ1ZSB0byBvbmx5IGFwcGx5IHRoaXNcbi8vIG1peGluIHdoZXJlIGJyb3dzZXJzIGhhdmUgM0Qgc3VwcG9ydC5cbkBtaXhpbiBhcHBseS1vcmlnaW4oJG9yaWdpbiwgJG9ubHkzZCkge1xuICAkb25seTNkOiAkb25seTNkIG9yIC1jb21wYXNzLWxpc3Qtc2l6ZSgtY29tcGFzcy1saXN0KCRvcmlnaW4pKSA+IDI7XG4gIEBpZiAkb25seTNkIHtcbiAgICBAaW5jbHVkZSBleHBlcmltZW50YWwodHJhbnNmb3JtLW9yaWdpbiwgJG9yaWdpbixcbiAgICAgIC1tb3osIC13ZWJraXQsIC1vLCAtbXMsIG5vdCgta2h0bWwpLCBvZmZpY2lhbFxuICAgICk7XG4gIH0gQGVsc2Uge1xuICAgIEBpbmNsdWRlIGV4cGVyaW1lbnRhbCh0cmFuc2Zvcm0tb3JpZ2luLCAkb3JpZ2luLFxuICAgICAgLW1veiwgLXdlYmtpdCwgLW8sIC1tcywgbm90KC1raHRtbCksIG9mZmljaWFsXG4gICAgKTtcbiAgfVxufVxuXG4vLyBUcmFuc2Zvcm0tb3JpZ2luIHNlbnQgYXMgaW5kaXZpZHVhbCBhcmd1bWVudHM6XG4vL1xuLy8gICAgIEBpbmNsdWRlIHRyYW5zZm9ybS1vcmlnaW4oIFsgb3JpZ2luLXgsIG9yaWdpbi15LCBvcmlnaW4teiwgM0Qtb25seSBdIClcbi8vXG4vLyB3aGVyZSB0aGUgMyAnb3JpZ2luLScgYXJndW1lbnRzIHJlcHJlc2VudCB4L3kveiBjb29yZGluYXRlcy5cbi8vXG4vLyAqKk5PVEU6Kiogc2V0dGluZyB6IGNvb3JkaW5hdGVzIHRyaWdnZXJzIDNEIHN1cHBvcnQgbGlzdCwgbGVhdmUgZmFsc2UgZm9yIDJEIHN1cHBvcnRcbkBtaXhpbiB0cmFuc2Zvcm0tb3JpZ2luKFxuICAkb3JpZ2luLXg6ICRkZWZhdWx0LW9yaWdpbi14LFxuICAkb3JpZ2luLXk6ICRkZWZhdWx0LW9yaWdpbi15LFxuICAkb3JpZ2luLXo6IGZhbHNlLFxuICAkb25seTNkOiAgIGlmKCRvcmlnaW4teiwgdHJ1ZSwgZmFsc2UpXG4pIHtcbiAgJG9yaWdpbjogdW5xdW90ZSgnJyk7XG4gIEBpZiAkb3JpZ2luLXggb3IgJG9yaWdpbi15IG9yICRvcmlnaW4teiB7XG4gICAgQGlmICRvcmlnaW4teCB7ICRvcmlnaW46ICRvcmlnaW4teDsgfSBAZWxzZSB7ICRvcmlnaW46IDUwJTsgfVxuICAgIEBpZiAkb3JpZ2luLXkgeyAkb3JpZ2luOiAkb3JpZ2luICRvcmlnaW4teTsgfSBAZWxzZSB7IEBpZiAkb3JpZ2luLXogeyAkb3JpZ2luOiAkb3JpZ2luIDUwJTsgfX1cbiAgICBAaWYgJG9yaWdpbi16IHsgJG9yaWdpbjogJG9yaWdpbiAkb3JpZ2luLXo7IH1cbiAgICBAaW5jbHVkZSBhcHBseS1vcmlnaW4oJG9yaWdpbiwgJG9ubHkzZCk7XG4gIH1cbn1cblxuXG4vLyBUcmFuc2Zvcm0gc2VudCBhcyBhIGNvbXBsZXRlIHN0cmluZzpcbi8vXG4vLyAgICAgQGluY2x1ZGUgdHJhbnNmb3JtKCB0cmFuc2Zvcm1zIFssIDNELW9ubHkgXSApXG4vL1xuLy8gd2hlcmUgJ3RyYW5zZm9ybXMnIGlzIGEgc3BhY2Ugc2VwYXJhdGVkIGxpc3Qgb2YgYWxsIHRoZSB0cmFuc2Zvcm1zIHRvIGJlIGFwcGxpZWQuXG5AbWl4aW4gdHJhbnNmb3JtKFxuICAkdHJhbnNmb3JtLFxuICAkb25seTNkOiBmYWxzZVxuKSB7XG4gIEBpZiAkb25seTNkIHtcbiAgICBAaW5jbHVkZSBleHBlcmltZW50YWwodHJhbnNmb3JtLCAkdHJhbnNmb3JtLFxuICAgICAgLW1veiwgLXdlYmtpdCwgLW8sIC1tcywgbm90KC1raHRtbCksIG9mZmljaWFsXG4gICAgKTtcbiAgfSBAZWxzZSB7XG4gICAgQGluY2x1ZGUgZXhwZXJpbWVudGFsKHRyYW5zZm9ybSwgJHRyYW5zZm9ybSxcbiAgICAgIC1tb3osIC13ZWJraXQsIC1vLCAtbXMsIG5vdCgta2h0bWwpLCBvZmZpY2lhbFxuICAgICk7XG4gIH1cbn1cblxuLy8gU2hvcnRjdXQgdG8gdGFyZ2V0IGFsbCBicm93c2VycyB3aXRoIDJEIHRyYW5zZm9ybSBzdXBwb3J0XG5AbWl4aW4gdHJhbnNmb3JtMmQoJHRyYW5zKSB7XG4gIEBpbmNsdWRlIHRyYW5zZm9ybSgkdHJhbnMsIGZhbHNlKTtcbn1cblxuLy8gU2hvcnRjdXQgdG8gdGFyZ2V0IG9ubHkgYnJvd3NlcnMgd2l0aCAzRCB0cmFuc2Zvcm0gc3VwcG9ydFxuQG1peGluIHRyYW5zZm9ybTNkKCR0cmFucykge1xuICBAaW5jbHVkZSB0cmFuc2Zvcm0oJHRyYW5zLCB0cnVlKTtcbn1cblxuLy8gQGRvYyBvZmZcbi8vIDNEIFBhcmFtZXRlcnMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gQGRvYyBvblxuXG4vLyBTZXQgdGhlIHBlcnNwZWN0aXZlIG9mIDNEIHRyYW5zZm9ybXMgb24gdGhlIGNoaWxkcmVuIG9mIGFuIGVsZW1lbnQ6XG4vL1xuLy8gICAgICBAaW5jbHVkZSBwZXJzcGVjdGl2ZSggcGVyc3BlY3RpdmUgKVxuLy9cbi8vIHdoZXJlICdwZXJzcGVjdGl2ZScgaXMgYSB1bml0bGVzcyBudW1iZXIgcmVwcmVzZW50aW5nIHRoZSBkZXB0aCBvZiB0aGVcbi8vIHotYXhpcy4gVGhlIGhpZ2hlciB0aGUgcGVyc3BlY3RpdmUsIHRoZSBtb3JlIGV4YWdnZXJhdGVkIHRoZSBmb3Jlc2hvcnRlbmluZy5cbi8vIHZhbHVlcyBmcm9tIDUwMCB0byAxMDAwIGFyZSBtb3JlLW9yLWxlc3MgXCJub3JtYWxcIiAtIGEgZ29vZCBzdGFydGluZy1wb2ludC5cbkBtaXhpbiBwZXJzcGVjdGl2ZSgkcCkge1xuICBAaW5jbHVkZSBleHBlcmltZW50YWwocGVyc3BlY3RpdmUsICRwLFxuICAgIC1tb3osIC13ZWJraXQsIC1vLCAtbXMsIG5vdCgta2h0bWwpLCBvZmZpY2lhbFxuICApO1xufVxuXG4vLyBTZXQgdGhlIG9yaWdpbiBwb3NpdGlvbiBmb3IgdGhlIHBlcnNwZWN0aXZlXG4vL1xuLy8gICAgICBAaW5jbHVkZSBwZXJzcGVjdGl2ZS1vcmlnaW4ob3JpZ2luLXggW29yaWdpbi15XSlcbi8vXG4vLyB3aGVyZSB0aGUgdHdvIGFyZ3VtZW50cyByZXByZXNlbnQgeC95IGNvb3JkaW5hdGVzXG5AbWl4aW4gcGVyc3BlY3RpdmUtb3JpZ2luKCRvcmlnaW46IDUwJSkge1xuICBAaW5jbHVkZSBleHBlcmltZW50YWwocGVyc3BlY3RpdmUtb3JpZ2luLCAkb3JpZ2luLFxuICAgIC1tb3osIC13ZWJraXQsIC1vLCAtbXMsIG5vdCgta2h0bWwpLCBvZmZpY2lhbFxuICApO1xufVxuXG4vLyBEZXRlcm1pbmUgd2hldGhlciBhIDNEIG9iamVjdHMgY2hpbGRyZW4gYWxzbyBsaXZlIGluIHRoZSBnaXZlbiAzRCBzcGFjZVxuLy9cbi8vICAgICAgQGluY2x1ZGUgdHJhbnNmb3JtLXN0eWxlKCBbIHN0eWxlIF0gKVxuLy9cbi8vIHdoZXJlIGBzdHlsZWAgY2FuIGJlIGVpdGhlciBgZmxhdGAgb3IgYHByZXNlcnZlLTNkYC5cbi8vIEJyb3dzZXJzIGRlZmF1bHQgdG8gYGZsYXRgLCBtaXhpbiBkZWZhdWx0cyB0byBgcHJlc2VydmUtM2RgLlxuQG1peGluIHRyYW5zZm9ybS1zdHlsZSgkc3R5bGU6IHByZXNlcnZlLTNkKSB7XG4gIEBpbmNsdWRlIGV4cGVyaW1lbnRhbCh0cmFuc2Zvcm0tc3R5bGUsICRzdHlsZSxcbiAgICAtbW96LCAtd2Via2l0LCAtbywgLW1zLCBub3QoLWtodG1sKSwgb2ZmaWNpYWxcbiAgKTtcbn1cblxuLy8gRGV0ZXJtaW5lIHRoZSB2aXNpYmlsaXR5IG9mIGFuIGVsZW1lbnQgd2hlbiBpdCdzIGJhY2sgaXMgdHVybmVkXG4vL1xuLy8gICAgIEBpbmNsdWRlIGJhY2tmYWNlLXZpc2liaWxpdHkoIFsgdmlzaWJpbGl0eSBdIClcbi8vXG4vLyB3aGVyZSBgdmlzaWJpbGl0eWAgY2FuIGJlIGVpdGhlciBgdmlzaWJsZWAgb3IgYGhpZGRlbmAuXG4vLyBCcm93c2VycyBkZWZhdWx0IHRvIHZpc2libGUsIG1peGluIGRlZmF1bHRzIHRvIGhpZGRlblxuQG1peGluIGJhY2tmYWNlLXZpc2liaWxpdHkoJHZpc2liaWxpdHk6IGhpZGRlbikge1xuICBAaW5jbHVkZSBleHBlcmltZW50YWwoYmFja2ZhY2UtdmlzaWJpbGl0eSwgJHZpc2liaWxpdHksXG4gICAgLW1veiwgLXdlYmtpdCwgLW8sIC1tcywgbm90KC1raHRtbCksIG9mZmljaWFsXG4gICk7XG59XG5cbi8vIEBkb2Mgb2ZmXG4vLyBUcmFuc2Zvcm0gUGFydGlhbHMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIFRoZXNlIHdvcmsgd2VsbCBvbiB0aGVpciBvd24sIGJ1dCB0aGV5IGRvbid0IGFkZCB0byBlYWNoIG90aGVyLCB0aGV5IG92ZXJyaWRlLlxuLy8gVXNlIGFsb25nIHdpdGggdHJhbnNmb3JtIHBhcmFtZXRlciBtaXhpbnMgdG8gYWRqdXN0IG9yaWdpbiwgcGVyc3BlY3RpdmUgYW5kIHN0eWxlXG4vLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuXG4vLyBTY2FsZSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEBkb2Mgb25cblxuLy8gU2NhbGUgYW4gb2JqZWN0IGFsb25nIHRoZSB4IGFuZCB5IGF4aXM6XG4vL1xuLy8gICAgICBAaW5jbHVkZSBzY2FsZSggWyBzY2FsZS14LCBzY2FsZS15LCBwZXJzcGVjdGl2ZSwgM0Qtb25seSBdIClcbi8vXG4vLyB3aGVyZSB0aGUgJ3NjYWxlLScgYXJndW1lbnRzIGFyZSB1bml0bGVzcyBtdWx0aXBsaWVycyBvZiB0aGUgeCBhbmQgeSBkaW1lbnNpb25zXG4vLyBhbmQgcGVyc3BlY3RpdmUsIHdoaWNoIHdvcmtzIHRoZSBzYW1lIGFzIHRoZSBzdGFuZC1hbG9uZSBwZXJzcGVjdGl2ZSBwcm9wZXJ0eS9taXhpblxuLy8gYnV0IGFwcGxpZXMgdG8gdGhlIGluZGl2aWR1YWwgZWxlbWVudCAobXVsdGlwbGllZCB3aXRoIGFueSBwYXJlbnQgcGVyc3BlY3RpdmUpXG4vL1xuLy8gKipOb3RlKiogVGhpcyBtaXhpbiBjYW5ub3QgYmUgY29tYmluZWQgd2l0aCBvdGhlciB0cmFuc2Zvcm0gbWl4aW5zLlxuQG1peGluIHNjYWxlKFxuICAkc2NhbGUteDogICAgICRkZWZhdWx0LXNjYWxlLXgsXG4gICRzY2FsZS15OiAgICAgJHNjYWxlLXgsXG4gICRwZXJzcGVjdGl2ZTogZmFsc2UsXG4gICRvbmx5M2Q6ICAgICAgZmFsc2Vcbikge1xuICAkdHJhbnM6IHNjYWxlKCRzY2FsZS14LCAkc2NhbGUteSk7XG4gIEBpZiAkcGVyc3BlY3RpdmUgeyAkdHJhbnM6IHBlcnNwZWN0aXZlKCRwZXJzcGVjdGl2ZSkgJHRyYW5zOyB9XG4gIEBpbmNsdWRlIHRyYW5zZm9ybSgkdHJhbnMsICRvbmx5M2QpO1xufVxuXG4vLyBTY2FsZSBhbiBvYmplY3QgYWxvbmcgdGhlIHggYXhpc1xuLy8gQGluY2x1ZGUgc2NhbGVYKCBbIHNjYWxlLXgsIHBlcnNwZWN0aXZlLCAzRC1vbmx5IF0gKVxuLy9cbi8vICoqTm90ZSoqIFRoaXMgbWl4aW4gY2Fubm90IGJlIGNvbWJpbmVkIHdpdGggb3RoZXIgdHJhbnNmb3JtIG1peGlucy5cbkBtaXhpbiBzY2FsZVgoXG4gICRzY2FsZTogICAgICAgJGRlZmF1bHQtc2NhbGUteCxcbiAgJHBlcnNwZWN0aXZlOiBmYWxzZSxcbiAgJG9ubHkzZDogICAgICBmYWxzZVxuKSB7XG4gICR0cmFuczogc2NhbGVYKCRzY2FsZSk7XG4gIEBpZiAkcGVyc3BlY3RpdmUgeyAkdHJhbnM6IHBlcnNwZWN0aXZlKCRwZXJzcGVjdGl2ZSkgJHRyYW5zOyB9XG4gIEBpbmNsdWRlIHRyYW5zZm9ybSgkdHJhbnMsICRvbmx5M2QpO1xufVxuXG4vLyBTY2FsZSBhbiBvYmplY3QgYWxvbmcgdGhlIHkgYXhpc1xuLy8gQGluY2x1ZGUgc2NhbGVZKCBbIHNjYWxlLXksIHBlcnNwZWN0aXZlLCAzRC1vbmx5IF0gKVxuLy9cbi8vICoqTm90ZSoqIFRoaXMgbWl4aW4gY2Fubm90IGJlIGNvbWJpbmVkIHdpdGggb3RoZXIgdHJhbnNmb3JtIG1peGlucy5cbkBtaXhpbiBzY2FsZVkoXG4gICRzY2FsZTogICAgICAgJGRlZmF1bHQtc2NhbGUteSxcbiAgJHBlcnNwZWN0aXZlOiBmYWxzZSxcbiAgJG9ubHkzZDogICAgICBmYWxzZVxuKSB7XG4gICR0cmFuczogc2NhbGVZKCRzY2FsZSk7XG4gIEBpZiAkcGVyc3BlY3RpdmUgeyAkdHJhbnM6IHBlcnNwZWN0aXZlKCRwZXJzcGVjdGl2ZSkgJHRyYW5zOyB9XG4gIEBpbmNsdWRlIHRyYW5zZm9ybSgkdHJhbnMsICRvbmx5M2QpO1xufVxuXG4vLyBTY2FsZSBhbiBvYmplY3QgYWxvbmcgdGhlIHogYXhpc1xuLy8gQGluY2x1ZGUgc2NhbGVaKCBbIHNjYWxlLXosIHBlcnNwZWN0aXZlIF0gKVxuLy9cbi8vICoqTm90ZSoqIFRoaXMgbWl4aW4gY2Fubm90IGJlIGNvbWJpbmVkIHdpdGggb3RoZXIgdHJhbnNmb3JtIG1peGlucy5cbkBtaXhpbiBzY2FsZVooXG4gICRzY2FsZTogJGRlZmF1bHQtc2NhbGUteixcbiAgJHBlcnNwZWN0aXZlOiBmYWxzZVxuKSB7XG4gICR0cmFuczogc2NhbGVaKCRzY2FsZSk7XG4gIEBpZiAkcGVyc3BlY3RpdmUgeyAkdHJhbnM6IHBlcnNwZWN0aXZlKCRwZXJzcGVjdGl2ZSkgJHRyYW5zOyB9XG4gIEBpbmNsdWRlIHRyYW5zZm9ybTNkKCR0cmFucyk7XG59XG5cbi8vIFNjYWxlIGFuZCBvYmplY3QgYWxvbmcgYWxsIHRocmVlIGF4aXNcbi8vIEBpbmNsdWRlIHNjYWxlM2QoIFsgc2NhbGUteCwgc2NhbGUteSwgc2NhbGUteiwgcGVyc3BlY3RpdmUgXSApXG4vL1xuLy8gKipOb3RlKiogVGhpcyBtaXhpbiBjYW5ub3QgYmUgY29tYmluZWQgd2l0aCBvdGhlciB0cmFuc2Zvcm0gbWl4aW5zLlxuQG1peGluIHNjYWxlM2QoXG4gICRzY2FsZS14OiAgICAgJGRlZmF1bHQtc2NhbGUteCxcbiAgJHNjYWxlLXk6ICAgICAkZGVmYXVsdC1zY2FsZS15LFxuICAkc2NhbGUtejogICAgICRkZWZhdWx0LXNjYWxlLXosXG4gICRwZXJzcGVjdGl2ZTogZmFsc2Vcbikge1xuICAkdHJhbnM6IHNjYWxlM2QoJHNjYWxlLXgsICRzY2FsZS15LCAkc2NhbGUteik7XG4gIEBpZiAkcGVyc3BlY3RpdmUgeyAkdHJhbnM6IHBlcnNwZWN0aXZlKCRwZXJzcGVjdGl2ZSkgJHRyYW5zOyB9XG4gIEBpbmNsdWRlIHRyYW5zZm9ybTNkKCR0cmFucyk7XG59XG5cbi8vIEBkb2Mgb2ZmXG4vLyBSb3RhdGUgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbi8vIEBkb2Mgb25cblxuLy8gUm90YXRlIGFuIG9iamVjdCBhcm91bmQgdGhlIHogYXhpcyAgKDJEKVxuLy8gQGluY2x1ZGUgcm90YXRlKCBbIHJvdGF0aW9uLCBwZXJzcGVjdGl2ZSwgM0Qtb25seSBdIClcbi8vIHdoZXJlICdyb3RhdGlvbicgaXMgYW4gYW5nbGUgc2V0IGluIGRlZ3JlZXMgKGRlZykgb3IgcmFkaWFuIChyYWQpIHVuaXRzXG4vL1xuLy8gKipOb3RlKiogVGhpcyBtaXhpbiBjYW5ub3QgYmUgY29tYmluZWQgd2l0aCBvdGhlciB0cmFuc2Zvcm0gbWl4aW5zLlxuQG1peGluIHJvdGF0ZShcbiAgJHJvdGF0ZTogICAgICAkZGVmYXVsdC1yb3RhdGUsXG4gICRwZXJzcGVjdGl2ZTogZmFsc2UsXG4gICRvbmx5M2Q6ICAgICAgZmFsc2Vcbikge1xuICAkdHJhbnM6IHJvdGF0ZSgkcm90YXRlKTtcbiAgQGlmICRwZXJzcGVjdGl2ZSB7ICR0cmFuczogcGVyc3BlY3RpdmUoJHBlcnNwZWN0aXZlKSAkdHJhbnM7IH1cbiAgQGluY2x1ZGUgdHJhbnNmb3JtKCR0cmFucywgJG9ubHkzZCk7XG59XG5cbi8vIEEgbG9uZ2N1dCBmb3IgJ3JvdGF0ZScgaW4gY2FzZSB5b3UgZm9yZ2V0IHRoYXQgJ3onIGlzIGltcGxpZWRcbi8vXG4vLyAqKk5vdGUqKiBUaGlzIG1peGluIGNhbm5vdCBiZSBjb21iaW5lZCB3aXRoIG90aGVyIHRyYW5zZm9ybSBtaXhpbnMuXG5AbWl4aW4gcm90YXRlWihcbiAgJHJvdGF0ZTogICAgICAkZGVmYXVsdC1yb3RhdGUsXG4gICRwZXJzcGVjdGl2ZTogZmFsc2UsXG4gICRvbmx5M2Q6ICAgICAgZmFsc2Vcbikge1xuICBAaW5jbHVkZSByb3RhdGUoJHJvdGF0ZSwgJHBlcnNwZWN0aXZlLCAkb25seTNkKTtcbn1cblxuLy8gUm90YXRlIGFuIG9iamVjdCBhcm91bmQgdGhlIHggYXhpcyAoM0QpXG4vLyBAaW5jbHVkZSByb3RhdGVYKCBbIHJvdGF0aW9uLCBwZXJzcGVjdGl2ZSBdIClcbi8vXG4vLyAqKk5vdGUqKiBUaGlzIG1peGluIGNhbm5vdCBiZSBjb21iaW5lZCB3aXRoIG90aGVyIHRyYW5zZm9ybSBtaXhpbnMuXG5AbWl4aW4gcm90YXRlWChcbiAgJHJvdGF0ZTogJGRlZmF1bHQtcm90YXRlLFxuICAkcGVyc3BlY3RpdmU6IGZhbHNlXG4pIHtcbiAgJHRyYW5zOiByb3RhdGVYKCRyb3RhdGUpO1xuICBAaWYgJHBlcnNwZWN0aXZlIHsgJHRyYW5zOiBwZXJzcGVjdGl2ZSgkcGVyc3BlY3RpdmUpICR0cmFuczsgfVxuICBAaW5jbHVkZSB0cmFuc2Zvcm0zZCgkdHJhbnMpO1xufVxuXG4vLyBSb3RhdGUgYW4gb2JqZWN0IGFyb3VuZCB0aGUgeSBheGlzICgzRClcbi8vIEBpbmNsdWRlIHJvdGF0ZSggWyByb3RhdGlvbiwgcGVyc3BlY3RpdmUgXSApXG4vL1xuLy8gKipOb3RlKiogVGhpcyBtaXhpbiBjYW5ub3QgYmUgY29tYmluZWQgd2l0aCBvdGhlciB0cmFuc2Zvcm0gbWl4aW5zLlxuQG1peGluIHJvdGF0ZVkoXG4gICRyb3RhdGU6ICRkZWZhdWx0LXJvdGF0ZSxcbiAgJHBlcnNwZWN0aXZlOiBmYWxzZVxuKSB7XG4gICR0cmFuczogcm90YXRlWSgkcm90YXRlKTtcbiAgQGlmICRwZXJzcGVjdGl2ZSB7ICR0cmFuczogcGVyc3BlY3RpdmUoJHBlcnNwZWN0aXZlKSAkdHJhbnM7IH1cbiAgQGluY2x1ZGUgdHJhbnNmb3JtM2QoJHRyYW5zKTtcbn1cblxuLy8gUm90YXRlIGFuIG9iamVjdCBhcm91bmQgYW4gYXJiaXRyYXJ5IGF4aXMgKDNEKVxuLy8gQGluY2x1ZGUgcm90YXRlKCBbIHZlY3Rvci14LCB2ZWN0b3IteSwgdmVjdG9yLXosIHJvdGF0aW9uLCBwZXJzcGVjdGl2ZSBdIClcbi8vIHdoZXJlIHRoZSAndmVjdG9yLScgYXJndW1lbnRzIGFjY2VwdCB1bml0bGVzcyBudW1iZXJzLlxuLy8gVGhlc2UgbnVtYmVycyBhcmUgbm90IGltcG9ydGFudCBvbiB0aGVpciBvd24sIGJ1dCBpbiByZWxhdGlvbiB0byBvbmUgYW5vdGhlclxuLy8gY3JlYXRpbmcgYW4gYXhpcyBmcm9tIHlvdXIgdHJhbnNmb3JtLW9yaWdpbiwgYWxvbmcgdGhlIGF4aXMgb2YgWHggPSBZeSA9IFp6LlxuLy9cbi8vICoqTm90ZSoqIFRoaXMgbWl4aW4gY2Fubm90IGJlIGNvbWJpbmVkIHdpdGggb3RoZXIgdHJhbnNmb3JtIG1peGlucy5cbkBtaXhpbiByb3RhdGUzZChcbiAgJHZlY3Rvci14OiAkZGVmYXVsdC12ZWN0b3IteCxcbiAgJHZlY3Rvci15OiAkZGVmYXVsdC12ZWN0b3IteSxcbiAgJHZlY3Rvci16OiAkZGVmYXVsdC12ZWN0b3IteixcbiAgJHJvdGF0ZTogJGRlZmF1bHQtcm90YXRlLFxuICAkcGVyc3BlY3RpdmU6IGZhbHNlXG4pIHtcbiAgJHRyYW5zOiByb3RhdGUzZCgkdmVjdG9yLXgsICR2ZWN0b3IteSwgJHZlY3Rvci16LCAkcm90YXRlKTtcbiAgQGlmICRwZXJzcGVjdGl2ZSB7ICR0cmFuczogcGVyc3BlY3RpdmUoJHBlcnNwZWN0aXZlKSAkdHJhbnM7IH1cbiAgQGluY2x1ZGUgdHJhbnNmb3JtM2QoJHRyYW5zKTtcbn1cblxuLy8gQGRvYyBvZmZcbi8vIFRyYW5zbGF0ZSAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gQGRvYyBvblxuXG4vLyBNb3ZlIGFuIG9iamVjdCBhbG9uZyB0aGUgeCBvciB5IGF4aXMgKDJEKVxuLy8gQGluY2x1ZGUgdHJhbnNsYXRlKCBbIHRyYW5zbGF0ZS14LCB0cmFuc2xhdGUteSwgcGVyc3BlY3RpdmUsIDNELW9ubHkgXSApXG4vLyB3aGVyZSB0aGUgJ3RyYW5zbGF0ZS0nIGFyZ3VtZW50cyBhY2NlcHQgYW55IGRpc3RhbmNlIGluIHBlcmNlbnRhZ2VzIG9yIGFic29sdXRlIChweCwgY20sIGluLCBlbSBldGMuLikgdW5pdHMuXG4vL1xuLy8gKipOb3RlKiogVGhpcyBtaXhpbiBjYW5ub3QgYmUgY29tYmluZWQgd2l0aCBvdGhlciB0cmFuc2Zvcm0gbWl4aW5zLlxuQG1peGluIHRyYW5zbGF0ZShcbiAgJHRyYW5zbGF0ZS14OiAkZGVmYXVsdC10cmFuc2xhdGUteCxcbiAgJHRyYW5zbGF0ZS15OiAkZGVmYXVsdC10cmFuc2xhdGUteSxcbiAgJHBlcnNwZWN0aXZlOiBmYWxzZSxcbiAgJG9ubHkzZDogICAgICBmYWxzZVxuKSB7XG4gICR0cmFuczogdHJhbnNsYXRlKCR0cmFuc2xhdGUteCwgJHRyYW5zbGF0ZS15KTtcbiAgQGlmICRwZXJzcGVjdGl2ZSB7ICR0cmFuczogcGVyc3BlY3RpdmUoJHBlcnNwZWN0aXZlKSAkdHJhbnM7IH1cbiAgQGluY2x1ZGUgdHJhbnNmb3JtKCR0cmFucywgJG9ubHkzZCk7XG59XG5cbi8vIE1vdmUgYW4gb2JqZWN0IGFsb25nIHRoZSB4IGF4aXMgKDJEKVxuLy8gQGluY2x1ZGUgdHJhbnNsYXRlKCBbIHRyYW5zbGF0ZS14LCBwZXJzcGVjdGl2ZSwgM0Qtb25seSBdIClcbi8vXG4vLyAqKk5vdGUqKiBUaGlzIG1peGluIGNhbm5vdCBiZSBjb21iaW5lZCB3aXRoIG90aGVyIHRyYW5zZm9ybSBtaXhpbnMuXG5AbWl4aW4gdHJhbnNsYXRlWChcbiAgJHRyYW5zLXg6ICAgICAkZGVmYXVsdC10cmFuc2xhdGUteCxcbiAgJHBlcnNwZWN0aXZlOiBmYWxzZSxcbiAgJG9ubHkzZDogICAgICBmYWxzZVxuKSB7XG4gICR0cmFuczogdHJhbnNsYXRlWCgkdHJhbnMteCk7XG4gIEBpZiAkcGVyc3BlY3RpdmUgeyAkdHJhbnM6IHBlcnNwZWN0aXZlKCRwZXJzcGVjdGl2ZSkgJHRyYW5zOyB9XG4gIEBpbmNsdWRlIHRyYW5zZm9ybSgkdHJhbnMsICRvbmx5M2QpO1xufVxuXG4vLyBNb3ZlIGFuIG9iamVjdCBhbG9uZyB0aGUgeSBheGlzICgyRClcbi8vIEBpbmNsdWRlIHRyYW5zbGF0ZSggWyB0cmFuc2xhdGUteSwgcGVyc3BlY3RpdmUsIDNELW9ubHkgXSApXG4vL1xuLy8gKipOb3RlKiogVGhpcyBtaXhpbiBjYW5ub3QgYmUgY29tYmluZWQgd2l0aCBvdGhlciB0cmFuc2Zvcm0gbWl4aW5zLlxuQG1peGluIHRyYW5zbGF0ZVkoXG4gICR0cmFucy15OiAgICAgJGRlZmF1bHQtdHJhbnNsYXRlLXksXG4gICRwZXJzcGVjdGl2ZTogZmFsc2UsXG4gICRvbmx5M2Q6ICAgICAgZmFsc2Vcbikge1xuICAkdHJhbnM6IHRyYW5zbGF0ZVkoJHRyYW5zLXkpO1xuICBAaWYgJHBlcnNwZWN0aXZlIHsgJHRyYW5zOiBwZXJzcGVjdGl2ZSgkcGVyc3BlY3RpdmUpICR0cmFuczsgfVxuICBAaW5jbHVkZSB0cmFuc2Zvcm0oJHRyYW5zLCAkb25seTNkKTtcbn1cblxuLy8gTW92ZSBhbiBvYmplY3QgYWxvbmcgdGhlIHogYXhpcyAoM0QpXG4vLyBAaW5jbHVkZSB0cmFuc2xhdGUoIFsgdHJhbnNsYXRlLXosIHBlcnNwZWN0aXZlIF0gKVxuLy9cbi8vICoqTm90ZSoqIFRoaXMgbWl4aW4gY2Fubm90IGJlIGNvbWJpbmVkIHdpdGggb3RoZXIgdHJhbnNmb3JtIG1peGlucy5cbkBtaXhpbiB0cmFuc2xhdGVaKFxuICAkdHJhbnMtejogICAgICRkZWZhdWx0LXRyYW5zbGF0ZS16LFxuICAkcGVyc3BlY3RpdmU6IGZhbHNlXG4pIHtcbiAgJHRyYW5zOiB0cmFuc2xhdGVaKCR0cmFucy16KTtcbiAgQGlmICRwZXJzcGVjdGl2ZSB7ICR0cmFuczogcGVyc3BlY3RpdmUoJHBlcnNwZWN0aXZlKSAkdHJhbnM7IH1cbiAgQGluY2x1ZGUgdHJhbnNmb3JtM2QoJHRyYW5zKTtcbn1cblxuLy8gTW92ZSBhbiBvYmplY3QgYWxvbmcgdGhlIHgsIHkgYW5kIHogYXhpcyAoM0QpXG4vLyBAaW5jbHVkZSB0cmFuc2xhdGUoIFsgdHJhbnNsYXRlLXgsIHRyYW5zbGF0ZS15LCB0cmFuc2xhdGUteiwgcGVyc3BlY3RpdmUgXSApXG4vL1xuLy8gKipOb3RlKiogVGhpcyBtaXhpbiBjYW5ub3QgYmUgY29tYmluZWQgd2l0aCBvdGhlciB0cmFuc2Zvcm0gbWl4aW5zLlxuQG1peGluIHRyYW5zbGF0ZTNkKFxuICAkdHJhbnNsYXRlLXg6ICRkZWZhdWx0LXRyYW5zbGF0ZS14LFxuICAkdHJhbnNsYXRlLXk6ICRkZWZhdWx0LXRyYW5zbGF0ZS15LFxuICAkdHJhbnNsYXRlLXo6ICRkZWZhdWx0LXRyYW5zbGF0ZS16LFxuICAkcGVyc3BlY3RpdmU6IGZhbHNlXG4pIHtcbiAgJHRyYW5zOiB0cmFuc2xhdGUzZCgkdHJhbnNsYXRlLXgsICR0cmFuc2xhdGUteSwgJHRyYW5zbGF0ZS16KTtcbiAgQGlmICRwZXJzcGVjdGl2ZSB7ICR0cmFuczogcGVyc3BlY3RpdmUoJHBlcnNwZWN0aXZlKSAkdHJhbnM7IH1cbiAgQGluY2x1ZGUgdHJhbnNmb3JtM2QoJHRyYW5zKTtcbn1cblxuLy8gQGRvYyBvZmZcbi8vIFNrZXcgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gQGRvYyBvblxuXG4vLyBTa2V3IGFuIGVsZW1lbnQ6XG4vL1xuLy8gICAgIEBpbmNsdWRlIHNrZXcoIFsgc2tldy14LCBza2V3LXksIDNELW9ubHkgXSApXG4vL1xuLy8gd2hlcmUgdGhlICdza2V3LScgYXJndW1lbnRzIGFjY2VwdCBjc3MgYW5nbGVzIGluIGRlZ3JlZXMgKGRlZykgb3IgcmFkaWFuIChyYWQpIHVuaXRzLlxuLy9cbi8vICoqTm90ZSoqIFRoaXMgbWl4aW4gY2Fubm90IGJlIGNvbWJpbmVkIHdpdGggb3RoZXIgdHJhbnNmb3JtIG1peGlucy5cbkBtaXhpbiBza2V3KFxuICAkc2tldy14OiAkZGVmYXVsdC1za2V3LXgsXG4gICRza2V3LXk6ICRkZWZhdWx0LXNrZXcteSxcbiAgJG9ubHkzZDogZmFsc2Vcbikge1xuICAkdHJhbnM6IHNrZXcoJHNrZXcteCwgJHNrZXcteSk7XG4gIEBpbmNsdWRlIHRyYW5zZm9ybSgkdHJhbnMsICRvbmx5M2QpO1xufVxuXG4vLyBTa2V3IGFuIGVsZW1lbnQgYWxvbmcgdGhlIHggYXhpelxuLy9cbi8vICAgICBAaW5jbHVkZSBza2V3KCBbIHNrZXcteCwgM0Qtb25seSBdIClcbi8vXG4vLyAqKk5vdGUqKiBUaGlzIG1peGluIGNhbm5vdCBiZSBjb21iaW5lZCB3aXRoIG90aGVyIHRyYW5zZm9ybSBtaXhpbnMuXG5AbWl4aW4gc2tld1goXG4gICRza2V3LXg6ICRkZWZhdWx0LXNrZXcteCxcbiAgJG9ubHkzZDogZmFsc2Vcbikge1xuICAkdHJhbnM6IHNrZXdYKCRza2V3LXgpO1xuICBAaW5jbHVkZSB0cmFuc2Zvcm0oJHRyYW5zLCAkb25seTNkKTtcbn1cblxuLy8gU2tldyBhbiBlbGVtZW50IGFsb25nIHRoZSB5IGF4aXNcbi8vXG4vLyAgICAgQGluY2x1ZGUgc2tldyggWyBza2V3LXksIDNELW9ubHkgXSApXG4vL1xuLy8gKipOb3RlKiogVGhpcyBtaXhpbiBjYW5ub3QgYmUgY29tYmluZWQgd2l0aCBvdGhlciB0cmFuc2Zvcm0gbWl4aW5zLlxuQG1peGluIHNrZXdZKFxuICAkc2tldy15OiAkZGVmYXVsdC1za2V3LXksXG4gICRvbmx5M2Q6IGZhbHNlXG4pIHtcbiAgJHRyYW5zOiBza2V3WSgkc2tldy15KTtcbiAgQGluY2x1ZGUgdHJhbnNmb3JtKCR0cmFucywgJG9ubHkzZCk7XG59XG5cblxuLy8gRnVsbCB0cmFuc2Zvcm0gbWl4aW5zXG4vLyBGb3Igc2V0dGluZ3MgYW55IGNvbWJpbmF0aW9uIG9mIHRyYW5zZm9ybXMgYXMgYXJndW1lbnRzXG4vLyBUaGVzZSBhcmUgY29tcGxleCBhbmQgbm90IGhpZ2hseSByZWNvbW1lbmRlZCBmb3IgZGFpbHkgdXNlLiBUaGV5IGFyZSBtYWlubHlcbi8vIGhlcmUgZm9yIGJhY2t3YXJkLWNvbXBhdGliaWxpdHkgcHVycG9zZXMuXG4vL1xuLy8gKiB0aGV5IGluY2x1ZGUgb3JpZ2luIGFkanVzdG1lbnRzXG4vLyAqIHNjYWxlIHRha2VzIGEgbXVsdGlwbGllciAodW5pdGxlc3MpLCByb3RhdGUgYW5kIHNrZXcgdGFrZSBkZWdyZWVzIChkZWcpXG4vL1xuLy8gKipOb3RlKiogVGhpcyBtaXhpbiBjYW5ub3QgYmUgY29tYmluZWQgd2l0aCBvdGhlciB0cmFuc2Zvcm0gbWl4aW5zLlxuQG1peGluIGNyZWF0ZS10cmFuc2Zvcm0oXG4gICRwZXJzcGVjdGl2ZTogZmFsc2UsXG4gICRzY2FsZS14OiAgICAgZmFsc2UsXG4gICRzY2FsZS15OiAgICAgZmFsc2UsXG4gICRzY2FsZS16OiAgICAgZmFsc2UsXG4gICRyb3RhdGUteDogICAgZmFsc2UsXG4gICRyb3RhdGUteTogICAgZmFsc2UsXG4gICRyb3RhdGUtejogICAgZmFsc2UsXG4gICRyb3RhdGUzZDogICAgZmFsc2UsXG4gICR0cmFucy14OiAgICAgZmFsc2UsXG4gICR0cmFucy15OiAgICAgZmFsc2UsXG4gICR0cmFucy16OiAgICAgZmFsc2UsXG4gICRza2V3LXg6ICAgICAgZmFsc2UsXG4gICRza2V3LXk6ICAgICAgZmFsc2UsXG4gICRvcmlnaW4teDogICAgZmFsc2UsXG4gICRvcmlnaW4teTogICAgZmFsc2UsXG4gICRvcmlnaW4tejogICAgZmFsc2UsXG4gICRvbmx5M2Q6ICAgICAgZmFsc2Vcbikge1xuICAkdHJhbnM6IHVucXVvdGUoXCJcIik7XG5cbiAgLy8gcGVyc3BlY3RpdmVcbiAgQGlmICRwZXJzcGVjdGl2ZSB7ICR0cmFuczogcGVyc3BlY3RpdmUoJHBlcnNwZWN0aXZlKSA7IH1cblxuICAvLyBzY2FsZVxuICBAaWYgJHNjYWxlLXggYW5kICRzY2FsZS15IHtcbiAgICBAaWYgJHNjYWxlLXogeyAkdHJhbnM6ICR0cmFucyBzY2FsZTNkKCRzY2FsZS14LCAkc2NhbGUteSwgJHNjYWxlLXopOyB9XG4gICAgQGVsc2UgeyAkdHJhbnM6ICR0cmFucyBzY2FsZSgkc2NhbGUteCwgJHNjYWxlLXkpOyB9XG4gIH0gQGVsc2Uge1xuICAgIEBpZiAkc2NhbGUteCB7ICR0cmFuczogJHRyYW5zIHNjYWxlWCgkc2NhbGUteCk7IH1cbiAgICBAaWYgJHNjYWxlLXkgeyAkdHJhbnM6ICR0cmFucyBzY2FsZVkoJHNjYWxlLXkpOyB9XG4gICAgQGlmICRzY2FsZS16IHsgJHRyYW5zOiAkdHJhbnMgc2NhbGVaKCRzY2FsZS16KTsgfVxuICB9XG5cbiAgLy8gcm90YXRlXG4gIEBpZiAkcm90YXRlLXggeyAkdHJhbnM6ICR0cmFucyByb3RhdGVYKCRyb3RhdGUteCk7IH1cbiAgQGlmICRyb3RhdGUteSB7ICR0cmFuczogJHRyYW5zIHJvdGF0ZVkoJHJvdGF0ZS15KTsgfVxuICBAaWYgJHJvdGF0ZS16IHsgJHRyYW5zOiAkdHJhbnMgcm90YXRlWigkcm90YXRlLXopOyB9XG4gIEBpZiAkcm90YXRlM2QgeyAkdHJhbnM6ICR0cmFucyByb3RhdGUzZCgkcm90YXRlM2QpOyB9XG5cbiAgLy8gdHJhbnNsYXRlXG4gIEBpZiAkdHJhbnMteCBhbmQgJHRyYW5zLXkge1xuICAgIEBpZiAkdHJhbnMteiB7ICR0cmFuczogJHRyYW5zIHRyYW5zbGF0ZTNkKCR0cmFucy14LCAkdHJhbnMteSwgJHRyYW5zLXopOyB9XG4gICAgQGVsc2UgeyAkdHJhbnM6ICR0cmFucyB0cmFuc2xhdGUoJHRyYW5zLXgsICR0cmFucy15KTsgfVxuICB9IEBlbHNlIHtcbiAgICBAaWYgJHRyYW5zLXggeyAkdHJhbnM6ICR0cmFucyB0cmFuc2xhdGVYKCR0cmFucy14KTsgfVxuICAgIEBpZiAkdHJhbnMteSB7ICR0cmFuczogJHRyYW5zIHRyYW5zbGF0ZVkoJHRyYW5zLXkpOyB9XG4gICAgQGlmICR0cmFucy16IHsgJHRyYW5zOiAkdHJhbnMgdHJhbnNsYXRlWigkdHJhbnMteik7IH1cbiAgfVxuXG4gIC8vIHNrZXdcbiAgQGlmICRza2V3LXggYW5kICRza2V3LXkgeyAkdHJhbnM6ICR0cmFucyBza2V3KCRza2V3LXgsICRza2V3LXkpOyB9XG4gIEBlbHNlIHtcbiAgICBAaWYgJHNrZXcteCB7ICR0cmFuczogJHRyYW5zIHNrZXdYKCRza2V3LXgpOyB9XG4gICAgQGlmICRza2V3LXkgeyAkdHJhbnM6ICR0cmFucyBza2V3WSgkc2tldy15KTsgfVxuICB9XG5cbiAgLy8gYXBwbHkgaXQhXG4gIEBpbmNsdWRlIHRyYW5zZm9ybSgkdHJhbnMsICRvbmx5M2QpO1xuICBAaW5jbHVkZSB0cmFuc2Zvcm0tb3JpZ2luKCRvcmlnaW4teCwgJG9yaWdpbi15LCAkb3JpZ2luLXosICRvbmx5M2QpO1xufVxuXG5cbi8vIEEgc2ltcGxpZmllZCBzZXQgb2Ygb3B0aW9uc1xuLy8gYmFja3dhcmRzLWNvbXBhdGlibGUgd2l0aCB0aGUgcHJldmlvdXMgdmVyc2lvbiBvZiB0aGUgJ3RyYW5zZm9ybScgbWl4aW5cbkBtaXhpbiBzaW1wbGUtdHJhbnNmb3JtKFxuICAkc2NhbGU6ICAgIGZhbHNlLFxuICAkcm90YXRlOiAgIGZhbHNlLFxuICAkdHJhbnMteDogIGZhbHNlLFxuICAkdHJhbnMteTogIGZhbHNlLFxuICAkc2tldy14OiAgIGZhbHNlLFxuICAkc2tldy15OiAgIGZhbHNlLFxuICAkb3JpZ2luLXg6IGZhbHNlLFxuICAkb3JpZ2luLXk6IGZhbHNlXG4pIHtcbiAgQGluY2x1ZGUgY3JlYXRlLXRyYW5zZm9ybShcbiAgICBmYWxzZSxcbiAgICAkc2NhbGUsICRzY2FsZSwgZmFsc2UsXG4gICAgZmFsc2UsIGZhbHNlLCAkcm90YXRlLCBmYWxzZSxcbiAgICAkdHJhbnMteCwgJHRyYW5zLXksIGZhbHNlLFxuICAgICRza2V3LXgsICRza2V3LXksXG4gICAgJG9yaWdpbi14LCAkb3JpZ2luLXksIGZhbHNlLFxuICAgIGZhbHNlXG4gICk7XG59XG4iXX0= */
