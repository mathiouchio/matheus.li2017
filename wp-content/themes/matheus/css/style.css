@import url(http://fonts.googleapis.com/css?family=Questrial);
/* line 5, scss/compass/reset/_utilities.scss */
html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed,
figure, figcaption, footer, header, hgroup,
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  font: inherit;
  font-size: 100%;
  vertical-align: baseline;
}

/* line 22, scss/compass/reset/_utilities.scss */
html {
  line-height: 1;
}

/* line 24, scss/compass/reset/_utilities.scss */
ol, ul {
  list-style: none;
}

/* line 26, scss/compass/reset/_utilities.scss */
table {
  border-collapse: collapse;
  border-spacing: 0;
}

/* line 28, scss/compass/reset/_utilities.scss */
caption, th, td {
  text-align: left;
  font-weight: normal;
  vertical-align: middle;
}

/* line 30, scss/compass/reset/_utilities.scss */
q, blockquote {
  quotes: none;
}

/* line 103, scss/compass/reset/_utilities.scss */
q:before, q:after, blockquote:before, blockquote:after {
  content: "";
  content: none;
}

/* line 32, scss/compass/reset/_utilities.scss */
a img {
  border: none;
}

/* line 116, scss/compass/reset/_utilities.scss */
elements-of-type(html5-block) {
  display: block;
}

/* line 1, scss/partials/_reset.scss */
.clearfix {
  clear: both;
  display: block;
  float: none;
}

/* line 2, scss/partials/_reset.scss */
a {
  color: inherit;
  text-decoration: none;
  cursor: pointer;
}

/* line 1, scss/partials/_extend.scss */
body,
textarea,
input {
  -webkit-font-smoothing: antialiased !important;
  -moz-osx-font-smoothing: grayscale !important;
  font-smoothing: antialised !important;
  -webkit-text-rendering: geometricPrecision !important;
  -moz-text-rendering: geometricPrecision !important;
  text-rendering: geometricPrecision !important;
}

/* line 11, scss/partials/_extend.scss */
section,
.slides > div,
video, main #about .thumb img,
main #about .thumb svg, main #projects .slides .slider img, .slider .slides > div, .controller li a {
  height: 100vh;
  width: 100vw;
}

/* line 16, scss/partials/_extend.scss */
#popup .content,
#popup .content ul,
#popup > * {
  height: 100%;
  width: 100%;
  overflow: hidden;
}

@keyframes slideenter {
  from {
    top: 20px;
    opacity: 0;
    -webkit-transform: perspective(400px) translate3d(0px, 0px, 0px) scale3d(1, 1, 1) rotate3d(3, 0, 0, 3deg);
    -ms-transform: perspective(400px) translate3d(0px, 0px, 0px) scale3d(1, 1, 1) rotate3d(3, 0, 0, 3deg);
    transform: perspective(400px) translate3d(0px, 0px, 0px) scale3d(1, 1, 1) rotate3d(3, 0, 0, 3deg);
  }
  to {
    top: 0px;
    opacity: 1;
    -webkit-transform: perspective(400px) translate3d(0px, 0px, 0px) scale3d(1, 1, 1) rotate3d(3, 0, 0, 0deg);
    -ms-transform: perspective(400px) translate3d(0px, 0px, 0px) scale3d(1, 1, 1) rotate3d(3, 0, 0, 0deg);
    transform: perspective(400px) translate3d(0px, 0px, 0px) scale3d(1, 1, 1) rotate3d(3, 0, 0, 0deg);
  }
}

@keyframes slideout {
  from {
    top: 0px;
    opacity: 1;
  }
  to {
    top: 20px;
    opacity: 0;
  }
}

@-webkit-keyframes slideenter {
  from {
    top: 20px;
    opacity: 0;
    -webkit-transform: perspective(400px) translate3d(0px, 0px, 0px) scale3d(1, 1, 1) rotate3d(3, 0, 0, 3deg);
    -ms-transform: perspective(400px) translate3d(0px, 0px, 0px) scale3d(1, 1, 1) rotate3d(3, 0, 0, 3deg);
    transform: perspective(400px) translate3d(0px, 0px, 0px) scale3d(1, 1, 1) rotate3d(3, 0, 0, 3deg);
  }
  to {
    top: 0px;
    opacity: 1;
    -webkit-transform: perspective(400px) translate3d(0px, 0px, 0px) scale3d(1, 1, 1) rotate3d(3, 0, 0, 0deg);
    -ms-transform: perspective(400px) translate3d(0px, 0px, 0px) scale3d(1, 1, 1) rotate3d(3, 0, 0, 0deg);
    transform: perspective(400px) translate3d(0px, 0px, 0px) scale3d(1, 1, 1) rotate3d(3, 0, 0, 0deg);
  }
}

@-webkit-keyframes slideout {
  from {
    top: 0px;
    opacity: 1;
  }
  to {
    top: 20px;
    opacity: 0;
  }
}

@keyframes menuenter {
  from {
    left: 20px;
    opacity: 0;
  }
  to {
    left: 0px;
    opacity: 1;
  }
}

@-webkit-keyframes menuenter {
  from {
    left: 20px;
    opacity: 0;
  }
  to {
    left: 0px;
    opacity: 1;
  }
}

/* line 83, scss/partials/_keyframe.scss */
.anim, nav li:before, nav li:after, .expand *, .expand svg circle, main .thumb span, .controller span {
  -webkit-transition-duration: 300ms;
  -webkit-transition-property: all;
  -webkit-animation-timing-function: easein;
  -moz-transition-duration: 300ms;
  -moz-transition-property: all;
  -moz-animation-timing-function: easein;
  -o-transition-duration: 300ms;
  -o-transition-property: all;
  -o-animation-timing-function: easein;
}

@font-face {
  font-family: 'Simplifica';
  src: url("../assets/fonts/simplifica_typeface.eot");
  src: url("../assets/fonts/simplifica_typeface.eot?#iefix") format("embedded-opentype"), url("../assets/fonts/simplifica_typeface.otf") format("opentype"), url("../assets/fonts/simplifica_typeface.woff2") format("woff2"), url("../assets/fonts/simplifica_typeface.woff") format("woff"), url("../assets/fonts/simplifica_typeface.ttf") format("truetype"), url("../assets/fonts/simplifica_typeface.svg#PlacardMT") format("svg");
  font-weight: bold;
  font-style: normal;
}

/* line 9, scss/style.scss */
[data-hidden] {
  display: none !important;
}

/* line 13, scss/style.scss */
::-moz-selection {
  background: #333;
  color: #efefef;
}
::selection {
  background: #333;
  color: #efefef;
}

/* line 18, scss/style.scss */
body::-webkit-scrollbar {
  display: none;
}

/* line 21, scss/style.scss */
body,
html {
  min-height: 100%;
}

/* line 25, scss/style.scss */
body[static] {
  overflow: hidden;
}

/* line 28, scss/style.scss */
body,
textarea,
input {
  font: 16.5px/1.7em "Simplifica", helvetica, arial, sans-serif;
  letter-spacing: 1.5px;
}

/* line 35, scss/style.scss */
svg,
img {
  -webkit-user-select: none;
     -moz-user-select: none;
      -ms-user-select: none;
          user-select: none;
  user-drag: none;
}

/* line 40, scss/style.scss */
.hero, nav span, h1, h2 {
  font: 19px/1.7em "Questrial", helvetica, arial, sans-serif;
  text-transform: uppercase;
  letter-spacing: 3px;
}

/* line 45, scss/style.scss */
.smler {
  font-size: 85%;
}

/* line 48, scss/style.scss */
.fullobj, main .thumb img {
  min-width: 100%;
  width: auto;
  min-height: 100%;
  height: auto;
}

/* line 59, scss/style.scss */
aside {
  position: fixed;
  z-index: 11;
  pointer-events: none;
  overflow: hidden;
}

/* line 64, scss/style.scss */
aside img,
aside svg {
  position: absolute;
}

/* line 68, scss/style.scss */
aside img {
  -webkit-transform: rotate(-7deg);
  -ms-transform: rotate(-7deg);
  transform: rotate(-7deg);
  min-height: 429px;
  z-index: 2;
  height: 53%;
  left: 5.3%;
  top: 21%;
}

/* line 76, scss/style.scss */
aside svg {
  height: 100%;
  width: 100%;
  min-height: 600px;
  min-width: 1000px;
  left: 0;
  top: 0;
  max-width: 1100px;
}

/* line 88, scss/style.scss */
#logo .wrapper > * {
  position: relative;
  top: 20px;
}

/* line 94, scss/style.scss */
#logo.active .wrapper > svg,
#logo.active span {
  -webkit-animation: slideenter 1000ms ease-out forwards;
          animation: slideenter 1000ms ease-out forwards;
}

/* line 98, scss/style.scss */
#logo.active span {
  -webkit-animation-delay: 500ms;
          animation-delay: 500ms;
}

/* line 103, scss/style.scss */
nav {
  position: fixed;
  top: 50%;
  left: 0;
  width: 20%;
  z-index: 12;
  min-width: 150px;
}

/* line 111, scss/style.scss */
nav:hover li a {
  -webkit-animation: slideenter 300ms ease-in forwards;
          animation: slideenter 300ms ease-in forwards;
  top: 20px;
  opacity: 0;
}

/* line 116, scss/style.scss */
nav:hover li:nth-child(2) a {
  -webkit-animation-delay: .05s;
          animation-delay: .05s;
}

/* line 119, scss/style.scss */
nav:hover li:nth-child(3) a {
  -webkit-animation-delay: .1s;
          animation-delay: .1s;
}

/* line 122, scss/style.scss */
nav:hover li:nth-child(4) a {
  -webkit-animation-delay: .15s;
          animation-delay: .15s;
}

/* line 125, scss/style.scss */
nav:hover li.active:after {
  left: -70px;
}

/* line 130, scss/style.scss */
nav.hamburger li.active:after {
  left: -47px;
}

/* line 133, scss/style.scss */
nav.hamburger li.active:before {
  opacity: 1;
  left: 14px;
}

/* line 138, scss/style.scss */
nav span {
  letter-spacing: 1px;
  margin-right: 10px;
}

/* line 143, scss/style.scss */
nav li {
  height: 32px;
  position: relative;
  padding-left: 30px;
}

/* line 147, scss/style.scss */
nav li a {
  position: absolute;
  -webkit-animation: slideout 300ms ease-in forwards;
          animation: slideout 300ms ease-in forwards;
  top: 20px;
  opacity: 0;
}

/* line 154, scss/style.scss */
nav li:after,
nav li:before {
  position: absolute;
}

/* line 158, scss/style.scss */
nav li:before {
  left: 9px;
  z-index: 12;
  opacity: 0;
  width: 20px;
  height: 20px;
  content: url("../assets/images/svg/hamburger.svg");
}

/* line 167, scss/style.scss */
nav li:after {
  -webkit-transform: rotate(1deg);
  -ms-transform: rotate(1deg);
  transform: rotate(1deg);
  -webkit-animation-delay: 0s;
          animation-delay: 0s;
  content: url("../assets/images/activenav.jpg");
  z-index: 11;
  left: -70px;
  top: -29px;
  display: block;
}

/* line 177, scss/style.scss */
nav li.active a {
  -webkit-animation: slideenter 300ms ease-in forwards;
          animation: slideenter 300ms ease-in forwards;
}

/* line 180, scss/style.scss */
nav li.active:after {
  -webkit-transform: rotate(54deg);
  -ms-transform: rotate(54deg);
  transform: rotate(54deg);
  -webkit-animation-delay: 2s;
          animation-delay: 2s;
}

/* line 185, scss/style.scss */
.preload {
  height: 0;
  width: 0;
  overflow: hidden;
}

/* line 190, scss/style.scss */
.wrapper {
  max-width: 370px;
  width: 100%;
}

/* line 194, scss/style.scss */
#notice p,
.wrapper {
  position: absolute;
  top: 50%;
  left: 23%;
}

/* line 200, scss/style.scss */
.expand {
  position: absolute !important;
  overflow: auto;
  top: 40%;
  left: 105%;
  width: 60% !important;
}

/* line 207, scss/style.scss */
.expand * {
  float: left;
}

/* line 208, scss/style.scss */
.expand svg {
  height: 40px;
}

/* line 214, scss/style.scss */
.expand a:hover svg circle {
  r: 13.5;
}

/* line 215, scss/style.scss */
.expand a:hover span {
  opacity: 1;
  width: auto;
  margin-left: 10px;
}

/* line 222, scss/style.scss */
.expand span {
  margin: 10px 0 0 0px;
  opacity: 0;
}

/* line 230, scss/style.scss */
h1,
h2,
.hero,
nav span,
h1,
h2,
label {
  color: #444;
}

/* line 236, scss/style.scss */
h2 {
  font-size: 16.5px;
  letter-spacing: 2.8px;
  line-height: 1.3em;
}

/* line 242, scss/style.scss */
#popup .controller {
  background: url("../assets/images/svg/slider-control-bottom.svg") no-repeat scroll 100% 100% transparent;
  bottom: 0;
  left: 40%;
  max-height: 29px;
  min-width: 90px;
  right: initial;
  top: initial;
  padding: 9px 0px 0 0;
}

/* line 252, scss/style.scss */
#popup .controller span.scroll {
  font-family: "Simplifica", helvetica, arial, sans-serif;
  text-transform: lowercase;
  margin-left: 5px;
}

/* line 259, scss/style.scss */
.slider .slide,
.slider li {
  position: absolute;
  overflow: hidden;
  width: 100%;
  height: 100%;
  display: none;
}

/* line 266, scss/style.scss */
.slider .slide[data-show], .slider .slide[data-transitioning],
.slider li[data-show],
.slider li[data-transitioning] {
  display: block;
}

/* line 270, scss/style.scss */
.slider .slide[data-show],
.slider li[data-show] {
  z-index: 3;
}

/* line 272, scss/style.scss */
.slider .slide[data-show] img,
.slider li[data-show] img {
  -webkit-animation: slideenter 400ms ease-in;
          animation: slideenter 400ms ease-in;
}

/* line 276, scss/style.scss */
.slider .slide[data-transitioning],
.slider li[data-transitioning] {
  z-index: 2;
}

/* line 279, scss/style.scss */
.slider .slide.portrait,
.slider li.portrait {
  overflow-x: hidden;
  overflow-y: scroll;
}

/* line 283, scss/style.scss */
.slider .slide.portrait img,
.slider li.portrait img {
  width: 100%;
  height: auto;
  -o-object-fit: initial;
     object-fit: initial;
}

/* line 289, scss/style.scss */
.slider .slide img,
.slider li img {
  display: block;
  min-width: 100%;
  min-height: 100%;
  -o-object-fit: cover;
     object-fit: cover;
  width: 100vw;
  height: 100vh;
}

/* line 296, scss/style.scss */
.slider .slide img.portrait,
.slider li img.portrait {
  width: 100%;
  height: auto;
  -o-object-fit: initial;
     object-fit: initial;
}

/* line 304, scss/style.scss */
#popup {
  display: none;
  position: fixed;
  z-index: 10;
}

/* line 308, scss/style.scss */
#popup[data-active="true"] {
  display: block;
}

/* line 312, scss/style.scss */
#popup[data-fecthing] .spinner {
  display: block;
  opacity: 1;
}

/* line 317, scss/style.scss */
#popup .spinner {
  position: absolute;
  top: 50%;
  left: 45%;
  display: none;
  opacity: 0;
  height: 50px;
  width: 75px;
  z-index: 2;
  text-align: center;
}

/* line 327, scss/style.scss */
#popup .spinner svg {
  width: 50px;
  height: 50px;
}

/* line 337, scss/style.scss */
#popup .controller {
  padding: 4px 20px 0 20px;
}

/* line 340, scss/style.scss */
#popup .controller [data-control="mute"] {
  display: none;
}

/* line 343, scss/style.scss */
#popup .controller[data-video] [data-control="mute"] {
  display: inline-block;
}

/* line 347, scss/style.scss */
#popup .controller[data-single] i,
#popup .controller[data-single] c,
#popup .controller[data-single] t,
#popup .controller[data-single] divider,
#popup .controller[data-single] [data-control="prev"],
#popup .controller[data-single] [data-control="next"] {
  display: none;
}

/* line 356, scss/style.scss */
#popup .controller > * {
  display: inline-block;
  margin-right: 3px;
}

/* line 360, scss/style.scss */
#popup .controller span {
  margin: 0px 12px;
}

/* line 363, scss/style.scss */
#popup .controller i {
  text-align: right;
  display: inline-block;
}

/* line 367, scss/style.scss */
#popup .controller *:last-child {
  margin-right: 20px;
}

/* line 370, scss/style.scss */
#popup .controller scroll,
#popup .controller mute,
#popup .controller t {
  font-family: "Simplifica", helvetica, arial, sans-serif;
  text-transform: lowercase;
  margin-left: 5px;
}

/* line 381, scss/style.scss */
main #about .thumb {
  width: 180px;
  height: 180px;
  position: absolute;
  top: 0px;
  float: left;
  z-index: 1;
  margin-left: -30px;
}

/* line 389, scss/style.scss */
main #about .thumb img,
main #about .thumb svg {
  top: 0;
  left: 0;
}

/* line 395, scss/style.scss */
main #about .thumb span {
  opacity: 1;
}

/* line 399, scss/style.scss */
main #about .thumb:nth-child(2) {
  z-index: 2;
  left: 165px;
}

/* line 403, scss/style.scss */
main #about .wrapper > p span {
  margin-right: 15px;
}

/* line 407, scss/style.scss */
main #about .slides > div:nth-child(2) .wrapper {
  margin-top: -90px;
}

/* line 409, scss/style.scss */
main #about .slides > div:nth-child(2) .wrapper h1 {
  margin-top: 200px;
}

/* line 416, scss/style.scss */
main #logo svg {
  width: 220px;
  height: auto;
  margin-bottom: 20px;
}

/* line 421, scss/style.scss */
main #logo .wrapper {
  top: 35%;
  left: 37%;
  width: 220px;
  text-align: center;
}

/* line 429, scss/style.scss */
main #blog > * {
  display: block;
  width: 100%;
  height: 100%;
}

/* line 434, scss/style.scss */
main #blog .wrapper.controller {
  min-height: 0;
  padding-left: 0;
}

/* line 439, scss/style.scss */
main #blog .wrapper.controller[data-control] .extend a {
  display: block;
}

/* line 442, scss/style.scss */
main #blog .wrapper.controller[data-control] .expand > a {
  display: none;
}

/* line 448, scss/style.scss */
main #blog .wrapper.controller .extend a:hover span {
  width: auto;
}

/* line 452, scss/style.scss */
main #blog .wrapper.controller .extend span {
  width: 0px;
  overflow: hidden;
}

/* line 456, scss/style.scss */
main #blog .wrapper.controller .extend a {
  display: none;
}

/* line 460, scss/style.scss */
main #blog .wrapper.controller .expand {
  top: 65px;
}

/* line 464, scss/style.scss */
main #blog > .slides > div {
  padding-left: 25%;
  width: 80%;
}

/* line 468, scss/style.scss */
main #blog .post {
  float: left;
  width: 100px;
  height: 280px;
  text-align: center;
  margin: 0 20px 40px 0;
  position: relative;
  top: 45%;
}

/* line 477, scss/style.scss */
main #blog .post:hover h2 {
  white-space: initial;
  height: initial;
}

/* line 482, scss/style.scss */
main #blog .post a {
  font-size: 15px;
}

/* line 485, scss/style.scss */
main #blog .post h2 {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  height: 23px;
}

/* line 490, scss/style.scss */
main #blog .post h2 span {
  font-family: "Simplifica", helvetica, arial, sans-serif;
  letter-spacing: 1.6px;
  margin-left: 10px;
  text-transform: lowercase;
}

/* line 497, scss/style.scss */
main #blog .post .excerpt {
  margin: 0 -15px 0px 20px;
}

/* line 502, scss/style.scss */
main .thumb {
  width: 180px;
  height: 160px;
  overflow: hidden;
  position: relative;
  margin: 0 auto 25px auto;
}

/* line 508, scss/style.scss */
main .thumb:hover span {
  opacity: 1;
  margin: 51% 14px;
}

/* line 512, scss/style.scss */
main .thumb svg {
  z-index: 4;
  width: 145px;
  height: 160px;
}

/* line 517, scss/style.scss */
main .thumb span {
  z-index: 5;
  font-size: 15px;
  display: block;
  position: relative;
  margin: 58% 14px;
  opacity: 0;
  color: white;
  text-align: right;
}

/* line 528, scss/style.scss */
main .thumb svg,
main .thumb img {
  position: absolute;
  left: 0;
  top: 0;
}

/* line 538, scss/style.scss */
main #projects {
  margin-left: 1px;
  height: auto;
}

/* line 545, scss/style.scss */
main #projects .slides section, main #projects
.slides > div, main #projects .slides
video, main #projects .slides #about .thumb img, main #about .thumb #projects .slides img, main #projects .slides #about .thumb svg, main #about .thumb #projects .slides svg, main #projects .slides .slider img, main #projects .slider .slides > div, main #projects .slides .controller li a, .controller li main #projects .slides a {
  position: relative;
}

/* line 551, scss/style.scss */
main #contact .thanks {
  margin-top: 15px;
  display: none;
}

/* line 554, scss/style.scss */
main #contact .thanks h2 {
  font-size: 16.5px;
}

/* line 558, scss/style.scss */
main #contact [data-invalid] {
  -webkit-box-shadow: inset 0 -2px 0px -1px #999;
          box-shadow: inset 0 -2px 0px -1px #999;
}

/* line 562, scss/style.scss */
main #contact [data-sent] .copy {
  display: none;
}

/* line 565, scss/style.scss */
main #contact [data-sent] .thanks {
  display: initial;
}

/* line 569, scss/style.scss */
main #contact .expand {
  top: 20%;
}

/* line 572, scss/style.scss */
main #contact label {
  font-family: "Questrial", helvetica, arial, sans-serif;
  text-transform: uppercase;
  float: left;
  width: 110px;
}

/* line 578, scss/style.scss */
main #contact span {
  margin-right: 25px;
}

/* line 581, scss/style.scss */
main #contact input,
main #contact textarea {
  padding: 0;
  outline: none;
  width: 255px;
  background: none;
  border: none;
}

/* line 589, scss/style.scss */
main #contact textarea {
  height: 130px;
  resize: none;
}

/* line 590, scss/style.scss */
main #contact .wrapper div {
  margin-bottom: 5px;
}

/* line 595, scss/style.scss */
section {
  overflow: hidden;
  position: relative;
}

/* line 598, scss/style.scss */
section .navigate {
  bottom: 20px !important;
  top: initial;
}

/* line 603, scss/style.scss */
aside,
#popup,
section,
#notice {
  width: 90.5vw;
  height: 100vh;
  left: 9.5vw;
  top: 0;
}

/* line 613, scss/style.scss */
.slider.noslide {
  min-height: 100vh;
  height: auto;
}

/* line 616, scss/style.scss */
.slider.noslide .slides {
  position: initial;
}

/* line 618, scss/style.scss */
.slider.noslide .slides > div {
  position: relative;
  display: block;
}

/* line 624, scss/style.scss */
.slider .slides {
  height: 100%;
  width: 100%;
  position: absolute;
  overflow: hidden;
  top: 0;
  left: 0;
}

/* line 631, scss/style.scss */
.slider .slides > div {
  position: absolute;
  display: none;
}

/* line 636, scss/style.scss */
.slider .slides > [data-show] {
  -webkit-animation: slideenter 400ms ease-in;
          animation: slideenter 400ms ease-in;
  display: block;
  z-index: 1;
  overflow: hidden;
}

/* line 642, scss/style.scss */
.slider .slides [data-show][data="scroll"],
.slider .slides div.standby[data="scroll"] {
  overflow-y: scroll;
  overflow-x: hidden;
}

/* line 647, scss/style.scss */
.slider .slides > div.standby {
  z-index: 0;
  display: block;
  overflow: hidden;
}

/* line 655, scss/style.scss */
.slider.active.extended > .controller {
  display: none;
}

/* line 657, scss/style.scss */
.slider.active .controller li a {
  -webkit-animation: menuenter 300ms ease-in forwards;
          animation: menuenter 300ms ease-in forwards;
  -webkit-animation-delay: .3s;
          animation-delay: .3s;
  left: 20px;
  opacity: 0;
}

/* line 663, scss/style.scss */
.slider.active .controller li:nth-child(2) a {
  -webkit-animation-delay: .4s;
          animation-delay: .4s;
}

/* line 666, scss/style.scss */
.slider.active .controller li:nth-child(3) a {
  -webkit-animation-delay: .5s;
          animation-delay: .5s;
}

/* line 669, scss/style.scss */
.slider.active .controller li:nth-child(4) a {
  -webkit-animation-delay: .6s;
          animation-delay: .6s;
}

/* line 674, scss/style.scss */
svg.navigate {
  enable-background: new 0 0 40 40;
}

/* line 676, scss/style.scss */
svg.navigate .round {
  fill: none;
  stroke: #484848;
  stroke-width: 1.8;
  stroke-linecap: round;
  stroke-linejoin: round;
}

/* line 684, scss/style.scss */
.controller {
  position: absolute;
  z-index: 4;
  right: 0;
  top: 50%;
  padding-left: 8px;
  font-family: "Questrial", helvetica, arial, sans-serif;
  text-transform: uppercase;
}

/* line 692, scss/style.scss */
.controller mute,
.controller svg,
.controller span,
.controller li {
  cursor: pointer;
}

/* line 698, scss/style.scss */
.controller span {
  font-size: 0.9em;
}

/* line 702, scss/style.scss */
.controller span.close {
  margin-left: 15px !important;
}

/* line 705, scss/style.scss */
.controller span.next:hover,
.controller span.prev:hover,
.controller span.close:hover {
  bottom: 3px !important;
  top: -3px !important;
  opacity: 1 !important;
  -webkit-animation-fill-mode: initial !important;
          animation-fill-mode: initial !important;
}

/* line 713, scss/style.scss */
.controller ul {
  padding: 20px 7px;
}

/* line 716, scss/style.scss */
.controller li {
  width: 15px;
  height: 22px;
  margin: 5px;
  position: relative;
  background-size: 100%;
}

/* line 722, scss/style.scss */
.controller li a {
  position: absolute;
  display: block;
  background: url("../assets/images/remote.png");
}

/* line 729, scss/style.scss */
.controller li.active {
  width: 23px;
  height: 28px;
  margin: 5px 7px 5px 0px;
}

/* line 731, scss/style.scss */
.controller li.active a {
  background: url("../assets/images/activeremote.png");
}

/* line 737, scss/style.scss */
.plyr .plyr__controls {
  display: none;
}

/* line 740, scss/style.scss */
.plyr .plyr__video-embed {
  height: 100vh;
  padding-bottom: 0;
}

/* line 743, scss/style.scss */
.plyr .plyr__video-embed iframe {
  margin-left: 50%;
  -webkit-transform: translateX(-50%);
      -ms-transform: translateX(-50%);
          transform: translateX(-50%);
}

/* line 749, scss/style.scss */
#notice {
  position: fixed;
  top: 0;
}

@media (max-width: 768px) {
  /* line 754, scss/style.scss */
  .wrapper,
  #notice p {
    width: 50%;
    left: 23vw;
  }
  /* line 759, scss/style.scss */
  main #blog .post {
    width: 68px;
  }
}

@media (max-width: 768px) and (orientation: landscape) {
  /* line 764, scss/style.scss */
  nav {
    display: none;
  }
  /* line 767, scss/style.scss */
  main #logo .wrapper {
    top: 20%;
  }
  /* line 770, scss/style.scss */
  .wrapper {
    max-width: 300px;
    top: 40%;
  }
  /* line 774, scss/style.scss */
  aside,
  #popup,
  section,
  #notice {
    width: 105.5vw;
    height: 100vh;
    left: -5.5vw;
    top: 0;
  }
  /* line 783, scss/style.scss */
  #notice p {
    width: 40%;
    left: 45%;
  }
  /* line 787, scss/style.scss */
  .slides > div,
  .slider .slides > div,
  section {
    height: 125vh;
  }
}

@media (orientation: landscape) {
  /* line 794, scss/style.scss */
  #notice {
    display: none;
  }
}

@media (orientation: portrait) {
  /* line 799, scss/style.scss */
  nav {
    display: none;
  }
  /* line 802, scss/style.scss */
  aside,
  #popup,
  section,
  #notice {
    width: 114.5vw;
    height: 100vh;
    left: -14.5vw;
    top: 0;
  }
  /* line 811, scss/style.scss */
  .wrapper,
  #notice p {
    width: 40%;
    left: 45%;
  }
  /* line 816, scss/style.scss */
  body,
  html {
    overflow: hidden;
  }
  /* line 820, scss/style.scss */
  main section {
    opacity: .05;
  }
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
